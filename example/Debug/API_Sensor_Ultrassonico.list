
API_Sensor_Ultrassonico.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c94  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c5c  08008da8  08008da8  00018da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a04  08009a04  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08009a04  08009a04  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a04  08009a04  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a04  08009a04  00019a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a08  08009a08  00019a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  200001e8  08009bf4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  08009bf4  00020720  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6a4  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e2  00000000  00000000  0002d8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  0002f998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  000307b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c55  00000000  00000000  000314f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd03  00000000  00000000  0004a14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c21a  00000000  00000000  00059e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e606a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005054  00000000  00000000  000e60bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008d8c 	.word	0x08008d8c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008d8c 	.word	0x08008d8c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <Medir_Distancia_CM>:
uint32_t Diferenca = 0; //Variavel que marca o tempo que o Echo ficou em nivel alto
uint8_t Primeira_Captura = 0;
uint32_t Distancia  = 0;
extern int funcao; // Variavel que diz qual função o projeto quer

uint32_t Medir_Distancia_CM(void){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Trigger_Pin, 1); // Para acionar o sensor se deve gerar um pulso de duração de 10uS no pino Trigger
 8000bde:	2201      	movs	r2, #1
 8000be0:	2102      	movs	r1, #2
 8000be2:	480f      	ldr	r0, [pc, #60]	; (8000c20 <Medir_Distancia_CM+0x48>)
 8000be4:	f001 fb6a 	bl	80022bc <HAL_GPIO_WritePin>
	for(int x = 0; x < 40; ++x){} //delay de 10uS (O clock funciona a 40Mhz)
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	e002      	b.n	8000bf4 <Medir_Distancia_CM+0x1c>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b27      	cmp	r3, #39	; 0x27
 8000bf8:	ddf9      	ble.n	8000bee <Medir_Distancia_CM+0x16>
	HAL_GPIO_WritePin(GPIOA, Trigger_Pin, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4808      	ldr	r0, [pc, #32]	; (8000c20 <Medir_Distancia_CM+0x48>)
 8000c00:	f001 fb5c 	bl	80022bc <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1); //Habilita a interrupção para o timer 1, irá permitir a leitura da subida do Echo
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <Medir_Distancia_CM+0x4c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <Medir_Distancia_CM+0x4c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f042 0202 	orr.w	r2, r2, #2
 8000c12:	60da      	str	r2, [r3, #12]
	return Distancia; //Retorna a distância em centímetros
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <Medir_Distancia_CM+0x50>)
 8000c16:	681b      	ldr	r3, [r3, #0]

} //Vai retornar a distância medida em centímetros
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40010800 	.word	0x40010800
 8000c24:	2000026c 	.word	0x2000026c
 8000c28:	20000214 	.word	0x20000214
 8000c2c:	00000000 	.word	0x00000000

08000c30 <Medir_Distancia_INCH>:


uint32_t Medir_Distancia_INCH(void){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Trigger_Pin, 1); // Para acionar o sensor se deve gerar um pulso de duração de 10uS no pino Trigger
 8000c36:	2201      	movs	r2, #1
 8000c38:	2102      	movs	r1, #2
 8000c3a:	4819      	ldr	r0, [pc, #100]	; (8000ca0 <Medir_Distancia_INCH+0x70>)
 8000c3c:	f001 fb3e 	bl	80022bc <HAL_GPIO_WritePin>
	for(int x = 0; x < 40; ++x){} //delay de 10uS (O clock funciona a 40Mhz)
 8000c40:	2300      	movs	r3, #0
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	e002      	b.n	8000c4c <Medir_Distancia_INCH+0x1c>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b27      	cmp	r3, #39	; 0x27
 8000c50:	ddf9      	ble.n	8000c46 <Medir_Distancia_INCH+0x16>
	HAL_GPIO_WritePin(GPIOA, Trigger_Pin, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2102      	movs	r1, #2
 8000c56:	4812      	ldr	r0, [pc, #72]	; (8000ca0 <Medir_Distancia_INCH+0x70>)
 8000c58:	f001 fb30 	bl	80022bc <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1); //Habilita a interrupção para o timer 1, irá permitir a leitura da subida do Echo
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <Medir_Distancia_INCH+0x74>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68da      	ldr	r2, [r3, #12]
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <Medir_Distancia_INCH+0x74>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f042 0202 	orr.w	r2, r2, #2
 8000c6a:	60da      	str	r2, [r3, #12]
	return Distancia/2.54; //Retorna a distância em polegadas
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <Medir_Distancia_INCH+0x78>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fbb7 	bl	80003e4 <__aeabi_ui2d>
 8000c76:	a308      	add	r3, pc, #32	; (adr r3, 8000c98 <Medir_Distancia_INCH+0x68>)
 8000c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7c:	f7ff fd56 	bl	800072c <__aeabi_ddiv>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	4610      	mov	r0, r2
 8000c86:	4619      	mov	r1, r3
 8000c88:	f7ff fefe 	bl	8000a88 <__aeabi_d2uiz>
 8000c8c:	4603      	mov	r3, r0

} //Vai retornar a distância em polegadas
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	851eb852 	.word	0x851eb852
 8000c9c:	400451eb 	.word	0x400451eb
 8000ca0:	40010800 	.word	0x40010800
 8000ca4:	2000026c 	.word	0x2000026c
 8000ca8:	20000214 	.word	0x20000214

08000cac <Aproximacao>:


void Aproximacao(void){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
	uint32_t dist = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
	while(funcao == 1){ //A função vai acontecer enquanto a variável funcao estiver em 1
 8000cb6:	e01f      	b.n	8000cf8 <Aproximacao+0x4c>
		dist = Medir_Distancia_CM(); //Mede a distancia atual do objeto
 8000cb8:	f7ff ff8e 	bl	8000bd8 <Medir_Distancia_CM>
 8000cbc:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, LED_1_Pin, 1); //Acender o led
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2110      	movs	r1, #16
 8000cc2:	4812      	ldr	r0, [pc, #72]	; (8000d0c <Aproximacao+0x60>)
 8000cc4:	f001 fafa 	bl	80022bc <HAL_GPIO_WritePin>
		HAL_Delay(10*dist); // delay de acordo com a distancia
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 f83c 	bl	8001d50 <HAL_Delay>
		dist = Medir_Distancia_CM();
 8000cd8:	f7ff ff7e 	bl	8000bd8 <Medir_Distancia_CM>
 8000cdc:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, LED_1_Pin, 0); // Desliga o led
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2110      	movs	r1, #16
 8000ce2:	480a      	ldr	r0, [pc, #40]	; (8000d0c <Aproximacao+0x60>)
 8000ce4:	f001 faea 	bl	80022bc <HAL_GPIO_WritePin>
		HAL_Delay(10*dist);
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	4613      	mov	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 f82c 	bl	8001d50 <HAL_Delay>
	while(funcao == 1){ //A função vai acontecer enquanto a variável funcao estiver em 1
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <Aproximacao+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d0db      	beq.n	8000cb8 <Aproximacao+0xc>
	}

} //Irá funcionar como um sensor de ré, o LED irá piscar com uma frequência inversamente proporcional a distância
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40010800 	.word	0x40010800
 8000d10:	200002fc 	.word	0x200002fc

08000d14 <Alerta_Distancia>:

void Alerta_Distancia(uint32_t dist){ //A função vai acontecer enquanto a variável funcao estiver em 2
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	uint32_t dist_atual = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
	while(funcao == 2){
 8000d20:	e014      	b.n	8000d4c <Alerta_Distancia+0x38>
	dist_atual = Medir_Distancia_CM(); //Mede a distancia atual
 8000d22:	f7ff ff59 	bl	8000bd8 <Medir_Distancia_CM>
 8000d26:	60f8      	str	r0, [r7, #12]
	if (dist_atual < dist) HAL_GPIO_WritePin(GPIOA, LED_2_Pin, 1); //Condicional para decisao se acende o led ou não
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d205      	bcs.n	8000d3c <Alerta_Distancia+0x28>
 8000d30:	2201      	movs	r2, #1
 8000d32:	2120      	movs	r1, #32
 8000d34:	480a      	ldr	r0, [pc, #40]	; (8000d60 <Alerta_Distancia+0x4c>)
 8000d36:	f001 fac1 	bl	80022bc <HAL_GPIO_WritePin>
 8000d3a:	e004      	b.n	8000d46 <Alerta_Distancia+0x32>
	else HAL_GPIO_WritePin(GPIOA, LED_2_Pin, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2120      	movs	r1, #32
 8000d40:	4807      	ldr	r0, [pc, #28]	; (8000d60 <Alerta_Distancia+0x4c>)
 8000d42:	f001 fabb 	bl	80022bc <HAL_GPIO_WritePin>
	HAL_Delay(60); //delay de 60ms indicado pelo fabricante do sensor entre uma medição e outra
 8000d46:	203c      	movs	r0, #60	; 0x3c
 8000d48:	f001 f802 	bl	8001d50 <HAL_Delay>
	while(funcao == 2){
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <Alerta_Distancia+0x50>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d0e6      	beq.n	8000d22 <Alerta_Distancia+0xe>
	}
} //Recebe um valor de distância como parâmetro e quando o objeto estiver em uma distância menor um led irá acender como alerta
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40010800 	.word	0x40010800
 8000d64:	200002fc 	.word	0x200002fc

08000d68 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) //Esta função serve para capturar o tempo de que Echo fica em nível lógico alto
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	7f1b      	ldrb	r3, [r3, #28]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	f040 8082 	bne.w	8000e7e <HAL_TIM_IC_CaptureCallback+0x116>
	{
		if (Primeira_Captura==0) //Se a variavel for igual a zero significa que o sinal subiu para nivel lógico alto
 8000d7a:	4b45      	ldr	r3, [pc, #276]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d11a      	bne.n	8000db8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			Time1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); //O momento de subida é armazenado na variavel time1
 8000d82:	2100      	movs	r1, #0
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f003 f89f 	bl	8003ec8 <HAL_TIM_ReadCapturedValue>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a41      	ldr	r2, [pc, #260]	; (8000e94 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d8e:	6013      	str	r3, [r2, #0]
			Primeira_Captura = 1;
 8000d90:	4b3f      	ldr	r3, [pc, #252]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]


			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING); //Muda a configuração para ler o momento em que o sinal esteja descendo
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6a1a      	ldr	r2, [r3, #32]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 020a 	bic.w	r2, r2, #10
 8000da4:	621a      	str	r2, [r3, #32]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6a1a      	ldr	r2, [r3, #32]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f042 0202 	orr.w	r2, r2, #2
 8000db4:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); //Muda a configuração para ler o momento em que o sinal esteja subindo
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1); //A interrupção é desabilitada para ser chamada apenas quando necessário
		}
	}
}
 8000db6:	e062      	b.n	8000e7e <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Primeira_Captura==1) ////Se a variavel for igual a um significa que o sinal desceu para nivel lógico baixo
 8000db8:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d15e      	bne.n	8000e7e <HAL_TIM_IC_CaptureCallback+0x116>
			Time2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);// //O momento de descida é armazenado na variavel time1
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f003 f880 	bl	8003ec8 <HAL_TIM_ReadCapturedValue>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a33      	ldr	r2, [pc, #204]	; (8000e98 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000dcc:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0); //Reinicia o contador do timer1 para zero
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
			if (Time2 > Time1)// Se time2 for maior que time1 o resultado do tempo é igual a diferenca
 8000dd6:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d907      	bls.n	8000df2 <HAL_TIM_IC_CaptureCallback+0x8a>
				Diferenca = Time2-Time1;
 8000de2:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	4a2b      	ldr	r2, [pc, #172]	; (8000e9c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	e00f      	b.n	8000e12 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (Time1 > Time2)// Se time1 for maior que time2 significa que o contador ultrapassou seu limite e reiniciou a contagem
 8000df2:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d909      	bls.n	8000e12 <HAL_TIM_IC_CaptureCallback+0xaa>
				Diferenca = (0xffff - Time1) + Time2;
 8000dfe:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e0c:	33ff      	adds	r3, #255	; 0xff
 8000e0e:	4a23      	ldr	r2, [pc, #140]	; (8000e9c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e10:	6013      	str	r3, [r2, #0]
			Distancia = Diferenca * 0.034/2;
 8000e12:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fae4 	bl	80003e4 <__aeabi_ui2d>
 8000e1c:	a31a      	add	r3, pc, #104	; (adr r3, 8000e88 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	f7ff fb59 	bl	80004d8 <__aeabi_dmul>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e36:	f7ff fc79 	bl	800072c <__aeabi_ddiv>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	4610      	mov	r0, r2
 8000e40:	4619      	mov	r1, r3
 8000e42:	f7ff fe21 	bl	8000a88 <__aeabi_d2uiz>
 8000e46:	4603      	mov	r3, r0
 8000e48:	4a15      	ldr	r2, [pc, #84]	; (8000ea0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e4a:	6013      	str	r3, [r2, #0]
			Primeira_Captura = 0;
 8000e4c:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); //Muda a configuração para ler o momento em que o sinal esteja subindo
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6a1a      	ldr	r2, [r3, #32]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f022 020a 	bic.w	r2, r2, #10
 8000e60:	621a      	str	r2, [r3, #32]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6a12      	ldr	r2, [r2, #32]
 8000e6c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1); //A interrupção é desabilitada para ser chamada apenas quando necessário
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 0202 	bic.w	r2, r2, #2
 8000e7c:	60da      	str	r2, [r3, #12]
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	b020c49c 	.word	0xb020c49c
 8000e8c:	3fa16872 	.word	0x3fa16872
 8000e90:	20000210 	.word	0x20000210
 8000e94:	20000204 	.word	0x20000204
 8000e98:	20000208 	.word	0x20000208
 8000e9c:	2000020c 	.word	0x2000020c
 8000ea0:	20000214 	.word	0x20000214
 8000ea4:	2000026c 	.word	0x2000026c

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b094      	sub	sp, #80	; 0x50
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char distancia_cm_str[30];
	char distancia_inch_str[30];
	uint32_t distancia_cm = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t distancia_inch = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t distancia_limite_cm = 10;
 8000eb6:	230a      	movs	r3, #10
 8000eb8:	647b      	str	r3, [r7, #68]	; 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eba:	f000 fee7 	bl	8001c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebe:	f000 f869 	bl	8000f94 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_TIM_Base_Start(&htim3);
 8000ec2:	482e      	ldr	r0, [pc, #184]	; (8000f7c <main+0xd4>)
 8000ec4:	f002 fbf8 	bl	80036b8 <HAL_TIM_Base_Start>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec8:	f000 f998 	bl	80011fc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ecc:	f000 f8d2 	bl	8001074 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ed0:	f000 f946 	bl	8001160 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000ed4:	f000 f8a0 	bl	8001018 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000ed8:	f000 fa16 	bl	8001308 <SSD1306_Init>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000edc:	2100      	movs	r1, #0
 8000ede:	4828      	ldr	r0, [pc, #160]	; (8000f80 <main+0xd8>)
 8000ee0:	f002 fc8c 	bl	80037fc <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
// Este projeto irá chamar uma função da API de acordo com o valor da variável funcao, esta variável varia de acordo com a quantidade de vezes que o botão B2 foi apertado

  {
	  switch (funcao){
 8000ee4:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <main+0xdc>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d03e      	beq.n	8000f6a <main+0xc2>
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	dc40      	bgt.n	8000f72 <main+0xca>
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d032      	beq.n	8000f5a <main+0xb2>
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d035      	beq.n	8000f64 <main+0xbc>
 8000ef8:	e03b      	b.n	8000f72 <main+0xca>
	  case 0:
		  while(funcao == 0){ // Neste caso ele irá medir a distância em centímetros e polegadas e então printar no display OLED
			  distancia_cm = Medir_Distancia_CM();
 8000efa:	f7ff fe6d 	bl	8000bd8 <Medir_Distancia_CM>
 8000efe:	64f8      	str	r0, [r7, #76]	; 0x4c
			  distancia_inch = Medir_Distancia_INCH();
 8000f00:	f7ff fe96 	bl	8000c30 <Medir_Distancia_INCH>
 8000f04:	64b8      	str	r0, [r7, #72]	; 0x48
			  sprintf(distancia_cm_str, "D_cm: %.2lu cm",distancia_cm);
 8000f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f0c:	491e      	ldr	r1, [pc, #120]	; (8000f88 <main+0xe0>)
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f004 f980 	bl	8005214 <siprintf>
			  SSD1306_GotoXY (0,0);
 8000f14:	2100      	movs	r1, #0
 8000f16:	2000      	movs	r0, #0
 8000f18:	f000 fb5e 	bl	80015d8 <SSD1306_GotoXY>
			  SSD1306_Puts (distancia_cm_str, &Font_7x10, 1);
 8000f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f20:	2201      	movs	r2, #1
 8000f22:	491a      	ldr	r1, [pc, #104]	; (8000f8c <main+0xe4>)
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 fbed 	bl	8001704 <SSD1306_Puts>
			  SSD1306_UpdateScreen(); // update display
 8000f2a:	f000 fab1 	bl	8001490 <SSD1306_UpdateScreen>
			  sprintf(distancia_inch_str, "D_inch: %.2lu inch",distancia_inch);
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f32:	4917      	ldr	r1, [pc, #92]	; (8000f90 <main+0xe8>)
 8000f34:	4618      	mov	r0, r3
 8000f36:	f004 f96d 	bl	8005214 <siprintf>
			  SSD1306_GotoXY (0,30);
 8000f3a:	211e      	movs	r1, #30
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f000 fb4b 	bl	80015d8 <SSD1306_GotoXY>
			  SSD1306_Puts (distancia_inch_str, &Font_7x10, 1);
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2201      	movs	r2, #1
 8000f46:	4911      	ldr	r1, [pc, #68]	; (8000f8c <main+0xe4>)
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 fbdb 	bl	8001704 <SSD1306_Puts>
			  SSD1306_UpdateScreen(); // update display
 8000f4e:	f000 fa9f 	bl	8001490 <SSD1306_UpdateScreen>
			  HAL_Delay(600);}
 8000f52:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000f56:	f000 fefb 	bl	8001d50 <HAL_Delay>
		  while(funcao == 0){ // Neste caso ele irá medir a distância em centímetros e polegadas e então printar no display OLED
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <main+0xdc>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0cb      	beq.n	8000efa <main+0x52>
		  break;
 8000f62:	e009      	b.n	8000f78 <main+0xd0>
	  case 1:
		  Aproximacao();
 8000f64:	f7ff fea2 	bl	8000cac <Aproximacao>
		  break;
 8000f68:	e006      	b.n	8000f78 <main+0xd0>

	  case 2:
		  Alerta_Distancia(distancia_limite_cm);
 8000f6a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000f6c:	f7ff fed2 	bl	8000d14 <Alerta_Distancia>
		  break;
 8000f70:	e002      	b.n	8000f78 <main+0xd0>

	  default:
		  funcao = 0;
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <main+0xdc>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
	  switch (funcao){
 8000f78:	e7b4      	b.n	8000ee4 <main+0x3c>
 8000f7a:	bf00      	nop
 8000f7c:	200002b4 	.word	0x200002b4
 8000f80:	2000026c 	.word	0x2000026c
 8000f84:	200002fc 	.word	0x200002fc
 8000f88:	08008da8 	.word	0x08008da8
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	08008db8 	.word	0x08008db8

08000f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b090      	sub	sp, #64	; 0x40
 8000f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9a:	f107 0318 	add.w	r3, r7, #24
 8000f9e:	2228      	movs	r2, #40	; 0x28
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f003 fabc 	bl	8004520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fbe:	2310      	movs	r3, #16
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000fca:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0318 	add.w	r3, r7, #24
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 ff19 	bl	8002e0c <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000fe0:	f000 f98c 	bl	80012fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 f986 	bl	8003310 <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800100a:	f000 f977 	bl	80012fc <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3740      	adds	r7, #64	; 0x40
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_I2C1_Init+0x50>)
 800101e:	4a13      	ldr	r2, [pc, #76]	; (800106c <MX_I2C1_Init+0x54>)
 8001020:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_I2C1_Init+0x50>)
 8001024:	4a12      	ldr	r2, [pc, #72]	; (8001070 <MX_I2C1_Init+0x58>)
 8001026:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_I2C1_Init+0x50>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_I2C1_Init+0x50>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_I2C1_Init+0x50>)
 8001036:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800103a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <MX_I2C1_Init+0x50>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_I2C1_Init+0x50>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <MX_I2C1_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_I2C1_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_I2C1_Init+0x50>)
 8001056:	f001 f961 	bl	800231c <HAL_I2C_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001060:	f000 f94c 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000218 	.word	0x20000218
 800106c:	40005400 	.word	0x40005400
 8001070:	00061a80 	.word	0x00061a80

08001074 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107a:	f107 0318 	add.w	r3, r7, #24
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001092:	463b      	mov	r3, r7
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800109e:	4b2e      	ldr	r3, [pc, #184]	; (8001158 <MX_TIM1_Init+0xe4>)
 80010a0:	4a2e      	ldr	r2, [pc, #184]	; (800115c <MX_TIM1_Init+0xe8>)
 80010a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 80010a4:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <MX_TIM1_Init+0xe4>)
 80010a6:	223f      	movs	r2, #63	; 0x3f
 80010a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <MX_TIM1_Init+0xe4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff - 1;
 80010b0:	4b29      	ldr	r3, [pc, #164]	; (8001158 <MX_TIM1_Init+0xe4>)
 80010b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80010b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b8:	4b27      	ldr	r3, [pc, #156]	; (8001158 <MX_TIM1_Init+0xe4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010be:	4b26      	ldr	r3, [pc, #152]	; (8001158 <MX_TIM1_Init+0xe4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <MX_TIM1_Init+0xe4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010ca:	4823      	ldr	r0, [pc, #140]	; (8001158 <MX_TIM1_Init+0xe4>)
 80010cc:	f002 faa4 	bl	8003618 <HAL_TIM_Base_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80010d6:	f000 f911 	bl	80012fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010de:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010e0:	f107 0318 	add.w	r3, r7, #24
 80010e4:	4619      	mov	r1, r3
 80010e6:	481c      	ldr	r0, [pc, #112]	; (8001158 <MX_TIM1_Init+0xe4>)
 80010e8:	f002 fe2a 	bl	8003d40 <HAL_TIM_ConfigClockSource>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80010f2:	f000 f903 	bl	80012fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80010f6:	4818      	ldr	r0, [pc, #96]	; (8001158 <MX_TIM1_Init+0xe4>)
 80010f8:	f002 fb28 	bl	800374c <HAL_TIM_IC_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001102:	f000 f8fb 	bl	80012fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4619      	mov	r1, r3
 8001114:	4810      	ldr	r0, [pc, #64]	; (8001158 <MX_TIM1_Init+0xe4>)
 8001116:	f003 f969 	bl	80043ec <HAL_TIMEx_MasterConfigSynchronization>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001120:	f000 f8ec 	bl	80012fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001124:	2300      	movs	r3, #0
 8001126:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001128:	2301      	movs	r3, #1
 800112a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001134:	463b      	mov	r3, r7
 8001136:	2200      	movs	r2, #0
 8001138:	4619      	mov	r1, r3
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <MX_TIM1_Init+0xe4>)
 800113c:	f002 fd6c 	bl	8003c18 <HAL_TIM_IC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001146:	f000 f8d9 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start(&htim1);
 800114a:	4803      	ldr	r0, [pc, #12]	; (8001158 <MX_TIM1_Init+0xe4>)
 800114c:	f002 fab4 	bl	80036b8 <HAL_TIM_Base_Start>
  /* USER CODE END TIM1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	3728      	adds	r7, #40	; 0x28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2000026c 	.word	0x2000026c
 800115c:	40012c00 	.word	0x40012c00

08001160 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	463b      	mov	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_TIM3_Init+0x94>)
 800117e:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <MX_TIM3_Init+0x98>)
 8001180:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001184:	223f      	movs	r2, #63	; 0x3f
 8001186:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_TIM3_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001194:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_TIM3_Init+0x94>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011a2:	4814      	ldr	r0, [pc, #80]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011a4:	f002 fa38 	bl	8003618 <HAL_TIM_Base_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80011ae:	f000 f8a5 	bl	80012fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	4619      	mov	r1, r3
 80011be:	480d      	ldr	r0, [pc, #52]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011c0:	f002 fdbe 	bl	8003d40 <HAL_TIM_ConfigClockSource>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80011ca:	f000 f897 	bl	80012fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d6:	463b      	mov	r3, r7
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011dc:	f003 f906 	bl	80043ec <HAL_TIMEx_MasterConfigSynchronization>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80011e6:	f000 f889 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200002b4 	.word	0x200002b4
 80011f8:	40000400 	.word	0x40000400

080011fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001210:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <MX_GPIO_Init+0xb4>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a26      	ldr	r2, [pc, #152]	; (80012b0 <MX_GPIO_Init+0xb4>)
 8001216:	f043 0310 	orr.w	r3, r3, #16
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <MX_GPIO_Init+0xb4>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <MX_GPIO_Init+0xb4>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a20      	ldr	r2, [pc, #128]	; (80012b0 <MX_GPIO_Init+0xb4>)
 800122e:	f043 0304 	orr.w	r3, r3, #4
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <MX_GPIO_Init+0xb4>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <MX_GPIO_Init+0xb4>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a1a      	ldr	r2, [pc, #104]	; (80012b0 <MX_GPIO_Init+0xb4>)
 8001246:	f043 0308 	orr.w	r3, r3, #8
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <MX_GPIO_Init+0xb4>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trigger_Pin|LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	2132      	movs	r1, #50	; 0x32
 800125c:	4815      	ldr	r0, [pc, #84]	; (80012b4 <MX_GPIO_Init+0xb8>)
 800125e:	f001 f82d 	bl	80022bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001266:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <MX_GPIO_Init+0xbc>)
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	4619      	mov	r1, r3
 8001276:	4811      	ldr	r0, [pc, #68]	; (80012bc <MX_GPIO_Init+0xc0>)
 8001278:	f000 fe9c 	bl	8001fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Trigger_Pin LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin|LED_1_Pin|LED_2_Pin;
 800127c:	2332      	movs	r3, #50	; 0x32
 800127e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2302      	movs	r3, #2
 800128a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	4808      	ldr	r0, [pc, #32]	; (80012b4 <MX_GPIO_Init+0xb8>)
 8001294:	f000 fe8e 	bl	8001fb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2100      	movs	r1, #0
 800129c:	2028      	movs	r0, #40	; 0x28
 800129e:	f000 fe52 	bl	8001f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012a2:	2028      	movs	r0, #40	; 0x28
 80012a4:	f000 fe6b 	bl	8001f7e <HAL_NVIC_EnableIRQ>

}
 80012a8:	bf00      	nop
 80012aa:	3720      	adds	r7, #32
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010800 	.word	0x40010800
 80012b8:	10210000 	.word	0x10210000
 80012bc:	40011000 	.word	0x40011000

080012c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012d0:	d10c      	bne.n	80012ec <HAL_GPIO_EXTI_Callback+0x2c>
		if(funcao < 2)
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x38>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	dc05      	bgt.n	80012e6 <HAL_GPIO_EXTI_Callback+0x26>
		funcao++;
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x38>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x38>)
 80012e2:	6013      	str	r3, [r2, #0]
		else
		funcao = 0;}
}
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_EXTI_Callback+0x2c>
		funcao = 0;}
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x38>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200002fc 	.word	0x200002fc

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
}
 8001302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001304:	e7fe      	b.n	8001304 <Error_Handler+0x8>
	...

08001308 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800130e:	f000 fa1f 	bl	8001750 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001312:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001316:	2201      	movs	r2, #1
 8001318:	2178      	movs	r1, #120	; 0x78
 800131a:	485b      	ldr	r0, [pc, #364]	; (8001488 <SSD1306_Init+0x180>)
 800131c:	f001 fa40 	bl	80027a0 <HAL_I2C_IsDeviceReady>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001326:	2300      	movs	r3, #0
 8001328:	e0a9      	b.n	800147e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800132a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800132e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001330:	e002      	b.n	8001338 <SSD1306_Init+0x30>
		p--;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3b01      	subs	r3, #1
 8001336:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f9      	bne.n	8001332 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800133e:	22ae      	movs	r2, #174	; 0xae
 8001340:	2100      	movs	r1, #0
 8001342:	2078      	movs	r0, #120	; 0x78
 8001344:	f000 fa7e 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001348:	2220      	movs	r2, #32
 800134a:	2100      	movs	r1, #0
 800134c:	2078      	movs	r0, #120	; 0x78
 800134e:	f000 fa79 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001352:	2210      	movs	r2, #16
 8001354:	2100      	movs	r1, #0
 8001356:	2078      	movs	r0, #120	; 0x78
 8001358:	f000 fa74 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800135c:	22b0      	movs	r2, #176	; 0xb0
 800135e:	2100      	movs	r1, #0
 8001360:	2078      	movs	r0, #120	; 0x78
 8001362:	f000 fa6f 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001366:	22c8      	movs	r2, #200	; 0xc8
 8001368:	2100      	movs	r1, #0
 800136a:	2078      	movs	r0, #120	; 0x78
 800136c:	f000 fa6a 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	2078      	movs	r0, #120	; 0x78
 8001376:	f000 fa65 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800137a:	2210      	movs	r2, #16
 800137c:	2100      	movs	r1, #0
 800137e:	2078      	movs	r0, #120	; 0x78
 8001380:	f000 fa60 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001384:	2240      	movs	r2, #64	; 0x40
 8001386:	2100      	movs	r1, #0
 8001388:	2078      	movs	r0, #120	; 0x78
 800138a:	f000 fa5b 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800138e:	2281      	movs	r2, #129	; 0x81
 8001390:	2100      	movs	r1, #0
 8001392:	2078      	movs	r0, #120	; 0x78
 8001394:	f000 fa56 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001398:	22ff      	movs	r2, #255	; 0xff
 800139a:	2100      	movs	r1, #0
 800139c:	2078      	movs	r0, #120	; 0x78
 800139e:	f000 fa51 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80013a2:	22a1      	movs	r2, #161	; 0xa1
 80013a4:	2100      	movs	r1, #0
 80013a6:	2078      	movs	r0, #120	; 0x78
 80013a8:	f000 fa4c 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80013ac:	22a6      	movs	r2, #166	; 0xa6
 80013ae:	2100      	movs	r1, #0
 80013b0:	2078      	movs	r0, #120	; 0x78
 80013b2:	f000 fa47 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80013b6:	22a8      	movs	r2, #168	; 0xa8
 80013b8:	2100      	movs	r1, #0
 80013ba:	2078      	movs	r0, #120	; 0x78
 80013bc:	f000 fa42 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80013c0:	223f      	movs	r2, #63	; 0x3f
 80013c2:	2100      	movs	r1, #0
 80013c4:	2078      	movs	r0, #120	; 0x78
 80013c6:	f000 fa3d 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80013ca:	22a4      	movs	r2, #164	; 0xa4
 80013cc:	2100      	movs	r1, #0
 80013ce:	2078      	movs	r0, #120	; 0x78
 80013d0:	f000 fa38 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80013d4:	22d3      	movs	r2, #211	; 0xd3
 80013d6:	2100      	movs	r1, #0
 80013d8:	2078      	movs	r0, #120	; 0x78
 80013da:	f000 fa33 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2078      	movs	r0, #120	; 0x78
 80013e4:	f000 fa2e 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80013e8:	22d5      	movs	r2, #213	; 0xd5
 80013ea:	2100      	movs	r1, #0
 80013ec:	2078      	movs	r0, #120	; 0x78
 80013ee:	f000 fa29 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80013f2:	22f0      	movs	r2, #240	; 0xf0
 80013f4:	2100      	movs	r1, #0
 80013f6:	2078      	movs	r0, #120	; 0x78
 80013f8:	f000 fa24 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80013fc:	22d9      	movs	r2, #217	; 0xd9
 80013fe:	2100      	movs	r1, #0
 8001400:	2078      	movs	r0, #120	; 0x78
 8001402:	f000 fa1f 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001406:	2222      	movs	r2, #34	; 0x22
 8001408:	2100      	movs	r1, #0
 800140a:	2078      	movs	r0, #120	; 0x78
 800140c:	f000 fa1a 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001410:	22da      	movs	r2, #218	; 0xda
 8001412:	2100      	movs	r1, #0
 8001414:	2078      	movs	r0, #120	; 0x78
 8001416:	f000 fa15 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800141a:	2212      	movs	r2, #18
 800141c:	2100      	movs	r1, #0
 800141e:	2078      	movs	r0, #120	; 0x78
 8001420:	f000 fa10 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001424:	22db      	movs	r2, #219	; 0xdb
 8001426:	2100      	movs	r1, #0
 8001428:	2078      	movs	r0, #120	; 0x78
 800142a:	f000 fa0b 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800142e:	2220      	movs	r2, #32
 8001430:	2100      	movs	r1, #0
 8001432:	2078      	movs	r0, #120	; 0x78
 8001434:	f000 fa06 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001438:	228d      	movs	r2, #141	; 0x8d
 800143a:	2100      	movs	r1, #0
 800143c:	2078      	movs	r0, #120	; 0x78
 800143e:	f000 fa01 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001442:	2214      	movs	r2, #20
 8001444:	2100      	movs	r1, #0
 8001446:	2078      	movs	r0, #120	; 0x78
 8001448:	f000 f9fc 	bl	8001844 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800144c:	22af      	movs	r2, #175	; 0xaf
 800144e:	2100      	movs	r1, #0
 8001450:	2078      	movs	r0, #120	; 0x78
 8001452:	f000 f9f7 	bl	8001844 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001456:	222e      	movs	r2, #46	; 0x2e
 8001458:	2100      	movs	r1, #0
 800145a:	2078      	movs	r0, #120	; 0x78
 800145c:	f000 f9f2 	bl	8001844 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001460:	2000      	movs	r0, #0
 8001462:	f000 f843 	bl	80014ec <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001466:	f000 f813 	bl	8001490 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <SSD1306_Init+0x184>)
 800146c:	2200      	movs	r2, #0
 800146e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <SSD1306_Init+0x184>)
 8001472:	2200      	movs	r2, #0
 8001474:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <SSD1306_Init+0x184>)
 8001478:	2201      	movs	r2, #1
 800147a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800147c:	2301      	movs	r3, #1
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000218 	.word	0x20000218
 800148c:	20000700 	.word	0x20000700

08001490 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001496:	2300      	movs	r3, #0
 8001498:	71fb      	strb	r3, [r7, #7]
 800149a:	e01d      	b.n	80014d8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	3b50      	subs	r3, #80	; 0x50
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	461a      	mov	r2, r3
 80014a4:	2100      	movs	r1, #0
 80014a6:	2078      	movs	r0, #120	; 0x78
 80014a8:	f000 f9cc 	bl	8001844 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2100      	movs	r1, #0
 80014b0:	2078      	movs	r0, #120	; 0x78
 80014b2:	f000 f9c7 	bl	8001844 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80014b6:	2210      	movs	r2, #16
 80014b8:	2100      	movs	r1, #0
 80014ba:	2078      	movs	r0, #120	; 0x78
 80014bc:	f000 f9c2 	bl	8001844 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	01db      	lsls	r3, r3, #7
 80014c4:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <SSD1306_UpdateScreen+0x58>)
 80014c6:	441a      	add	r2, r3
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	2140      	movs	r1, #64	; 0x40
 80014cc:	2078      	movs	r0, #120	; 0x78
 80014ce:	f000 f953 	bl	8001778 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	3301      	adds	r3, #1
 80014d6:	71fb      	strb	r3, [r7, #7]
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	2b07      	cmp	r3, #7
 80014dc:	d9de      	bls.n	800149c <SSD1306_UpdateScreen+0xc>
	}
}
 80014de:	bf00      	nop
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000300 	.word	0x20000300

080014ec <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <SSD1306_Fill+0x14>
 80014fc:	2300      	movs	r3, #0
 80014fe:	e000      	b.n	8001502 <SSD1306_Fill+0x16>
 8001500:	23ff      	movs	r3, #255	; 0xff
 8001502:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001506:	4619      	mov	r1, r3
 8001508:	4803      	ldr	r0, [pc, #12]	; (8001518 <SSD1306_Fill+0x2c>)
 800150a:	f003 f809 	bl	8004520 <memset>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000300 	.word	0x20000300

0800151c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	80fb      	strh	r3, [r7, #6]
 8001526:	460b      	mov	r3, r1
 8001528:	80bb      	strh	r3, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	70fb      	strb	r3, [r7, #3]
	if (
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	2b7f      	cmp	r3, #127	; 0x7f
 8001532:	d848      	bhi.n	80015c6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001534:	88bb      	ldrh	r3, [r7, #4]
 8001536:	2b3f      	cmp	r3, #63	; 0x3f
 8001538:	d845      	bhi.n	80015c6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800153a:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <SSD1306_DrawPixel+0xb4>)
 800153c:	791b      	ldrb	r3, [r3, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d006      	beq.n	8001550 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d11a      	bne.n	800158c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001556:	88fa      	ldrh	r2, [r7, #6]
 8001558:	88bb      	ldrh	r3, [r7, #4]
 800155a:	08db      	lsrs	r3, r3, #3
 800155c:	b298      	uxth	r0, r3
 800155e:	4603      	mov	r3, r0
 8001560:	01db      	lsls	r3, r3, #7
 8001562:	4413      	add	r3, r2
 8001564:	4a1b      	ldr	r2, [pc, #108]	; (80015d4 <SSD1306_DrawPixel+0xb8>)
 8001566:	5cd3      	ldrb	r3, [r2, r3]
 8001568:	b25a      	sxtb	r2, r3
 800156a:	88bb      	ldrh	r3, [r7, #4]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	2101      	movs	r1, #1
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	b25b      	sxtb	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	b259      	sxtb	r1, r3
 800157c:	88fa      	ldrh	r2, [r7, #6]
 800157e:	4603      	mov	r3, r0
 8001580:	01db      	lsls	r3, r3, #7
 8001582:	4413      	add	r3, r2
 8001584:	b2c9      	uxtb	r1, r1
 8001586:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <SSD1306_DrawPixel+0xb8>)
 8001588:	54d1      	strb	r1, [r2, r3]
 800158a:	e01d      	b.n	80015c8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800158c:	88fa      	ldrh	r2, [r7, #6]
 800158e:	88bb      	ldrh	r3, [r7, #4]
 8001590:	08db      	lsrs	r3, r3, #3
 8001592:	b298      	uxth	r0, r3
 8001594:	4603      	mov	r3, r0
 8001596:	01db      	lsls	r3, r3, #7
 8001598:	4413      	add	r3, r2
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <SSD1306_DrawPixel+0xb8>)
 800159c:	5cd3      	ldrb	r3, [r2, r3]
 800159e:	b25a      	sxtb	r2, r3
 80015a0:	88bb      	ldrh	r3, [r7, #4]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	2101      	movs	r1, #1
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	4013      	ands	r3, r2
 80015b4:	b259      	sxtb	r1, r3
 80015b6:	88fa      	ldrh	r2, [r7, #6]
 80015b8:	4603      	mov	r3, r0
 80015ba:	01db      	lsls	r3, r3, #7
 80015bc:	4413      	add	r3, r2
 80015be:	b2c9      	uxtb	r1, r1
 80015c0:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <SSD1306_DrawPixel+0xb8>)
 80015c2:	54d1      	strb	r1, [r2, r3]
 80015c4:	e000      	b.n	80015c8 <SSD1306_DrawPixel+0xac>
		return;
 80015c6:	bf00      	nop
	}
}
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	20000700 	.word	0x20000700
 80015d4:	20000300 	.word	0x20000300

080015d8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	80fb      	strh	r3, [r7, #6]
 80015e4:	4613      	mov	r3, r2
 80015e6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80015e8:	4a05      	ldr	r2, [pc, #20]	; (8001600 <SSD1306_GotoXY+0x28>)
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <SSD1306_GotoXY+0x28>)
 80015f0:	88bb      	ldrh	r3, [r7, #4]
 80015f2:	8053      	strh	r3, [r2, #2]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000700 	.word	0x20000700

08001604 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	4613      	mov	r3, r2
 8001612:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001614:	4b3a      	ldr	r3, [pc, #232]	; (8001700 <SSD1306_Putc+0xfc>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
	if (
 8001620:	2b7f      	cmp	r3, #127	; 0x7f
 8001622:	dc07      	bgt.n	8001634 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001624:	4b36      	ldr	r3, [pc, #216]	; (8001700 <SSD1306_Putc+0xfc>)
 8001626:	885b      	ldrh	r3, [r3, #2]
 8001628:	461a      	mov	r2, r3
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	785b      	ldrb	r3, [r3, #1]
 800162e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001630:	2b3f      	cmp	r3, #63	; 0x3f
 8001632:	dd01      	ble.n	8001638 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001634:	2300      	movs	r3, #0
 8001636:	e05e      	b.n	80016f6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	e04b      	b.n	80016d6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	3b20      	subs	r3, #32
 8001646:	6839      	ldr	r1, [r7, #0]
 8001648:	7849      	ldrb	r1, [r1, #1]
 800164a:	fb01 f303 	mul.w	r3, r1, r3
 800164e:	4619      	mov	r1, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	440b      	add	r3, r1
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800165c:	2300      	movs	r3, #0
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	e030      	b.n	80016c4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d010      	beq.n	8001694 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001672:	4b23      	ldr	r3, [pc, #140]	; (8001700 <SSD1306_Putc+0xfc>)
 8001674:	881a      	ldrh	r2, [r3, #0]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	b29b      	uxth	r3, r3
 800167a:	4413      	add	r3, r2
 800167c:	b298      	uxth	r0, r3
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <SSD1306_Putc+0xfc>)
 8001680:	885a      	ldrh	r2, [r3, #2]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	b29b      	uxth	r3, r3
 8001686:	4413      	add	r3, r2
 8001688:	b29b      	uxth	r3, r3
 800168a:	79ba      	ldrb	r2, [r7, #6]
 800168c:	4619      	mov	r1, r3
 800168e:	f7ff ff45 	bl	800151c <SSD1306_DrawPixel>
 8001692:	e014      	b.n	80016be <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <SSD1306_Putc+0xfc>)
 8001696:	881a      	ldrh	r2, [r3, #0]
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	b29b      	uxth	r3, r3
 800169c:	4413      	add	r3, r2
 800169e:	b298      	uxth	r0, r3
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <SSD1306_Putc+0xfc>)
 80016a2:	885a      	ldrh	r2, [r3, #2]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	b299      	uxth	r1, r3
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	bf0c      	ite	eq
 80016b2:	2301      	moveq	r3, #1
 80016b4:	2300      	movne	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	f7ff ff2f 	bl	800151c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	3301      	adds	r3, #1
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d3c8      	bcc.n	8001662 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	3301      	adds	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	785b      	ldrb	r3, [r3, #1]
 80016da:	461a      	mov	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	4293      	cmp	r3, r2
 80016e0:	d3ad      	bcc.n	800163e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <SSD1306_Putc+0xfc>)
 80016e4:	881a      	ldrh	r2, [r3, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	4413      	add	r3, r2
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <SSD1306_Putc+0xfc>)
 80016f2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80016f4:	79fb      	ldrb	r3, [r7, #7]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000700 	.word	0x20000700

08001704 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	4613      	mov	r3, r2
 8001710:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001712:	e012      	b.n	800173a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	79fa      	ldrb	r2, [r7, #7]
 800171a:	68b9      	ldr	r1, [r7, #8]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff71 	bl	8001604 <SSD1306_Putc>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d002      	beq.n	8001734 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	e008      	b.n	8001746 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3301      	adds	r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1e8      	bne.n	8001714 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	781b      	ldrb	r3, [r3, #0]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <ssd1306_I2C_Init+0x24>)
 8001758:	607b      	str	r3, [r7, #4]
	while(p>0)
 800175a:	e002      	b.n	8001762 <ssd1306_I2C_Init+0x12>
		p--;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f9      	bne.n	800175c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	0003d090 	.word	0x0003d090

08001778 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b0c7      	sub	sp, #284	; 0x11c
 800177c:	af02      	add	r7, sp, #8
 800177e:	4604      	mov	r4, r0
 8001780:	4608      	mov	r0, r1
 8001782:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001786:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800178a:	600a      	str	r2, [r1, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001792:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001796:	4622      	mov	r2, r4
 8001798:	701a      	strb	r2, [r3, #0]
 800179a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800179e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80017a2:	4602      	mov	r2, r0
 80017a4:	701a      	strb	r2, [r3, #0]
 80017a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80017ae:	460a      	mov	r2, r1
 80017b0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80017b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80017ba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80017be:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80017c2:	7812      	ldrb	r2, [r2, #0]
 80017c4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80017cc:	e015      	b.n	80017fa <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80017ce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017d2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80017d6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	441a      	add	r2, r3
 80017de:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017e2:	3301      	adds	r3, #1
 80017e4:	7811      	ldrb	r1, [r2, #0]
 80017e6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80017ea:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80017ee:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80017f0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017f4:	3301      	adds	r3, #1
 80017f6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80017fa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017fe:	b29b      	uxth	r3, r3
 8001800:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001804:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001808:	8812      	ldrh	r2, [r2, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d8df      	bhi.n	80017ce <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800180e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001812:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	b299      	uxth	r1, r3
 800181a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800181e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	b29b      	uxth	r3, r3
 8001828:	f107 020c 	add.w	r2, r7, #12
 800182c:	200a      	movs	r0, #10
 800182e:	9000      	str	r0, [sp, #0]
 8001830:	4803      	ldr	r0, [pc, #12]	; (8001840 <ssd1306_I2C_WriteMulti+0xc8>)
 8001832:	f000 feb7 	bl	80025a4 <HAL_I2C_Master_Transmit>
}
 8001836:	bf00      	nop
 8001838:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800183c:	46bd      	mov	sp, r7
 800183e:	bd90      	pop	{r4, r7, pc}
 8001840:	20000218 	.word	0x20000218

08001844 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af02      	add	r7, sp, #8
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
 800184e:	460b      	mov	r3, r1
 8001850:	71bb      	strb	r3, [r7, #6]
 8001852:	4613      	mov	r3, r2
 8001854:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800185a:	797b      	ldrb	r3, [r7, #5]
 800185c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	b299      	uxth	r1, r3
 8001862:	f107 020c 	add.w	r2, r7, #12
 8001866:	230a      	movs	r3, #10
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2302      	movs	r3, #2
 800186c:	4803      	ldr	r0, [pc, #12]	; (800187c <ssd1306_I2C_Write+0x38>)
 800186e:	f000 fe99 	bl	80025a4 <HAL_I2C_Master_Transmit>
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000218 	.word	0x20000218

08001880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_MspInit+0x40>)
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <HAL_MspInit+0x40>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6193      	str	r3, [r2, #24]
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_MspInit+0x40>)
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_MspInit+0x40>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <HAL_MspInit+0x40>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a8:	61d3      	str	r3, [r2, #28]
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_MspInit+0x40>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	40021000 	.word	0x40021000

080018c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a1d      	ldr	r2, [pc, #116]	; (8001954 <HAL_I2C_MspInit+0x90>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d132      	bne.n	800194a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e4:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <HAL_I2C_MspInit+0x94>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a1b      	ldr	r2, [pc, #108]	; (8001958 <HAL_I2C_MspInit+0x94>)
 80018ea:	f043 0308 	orr.w	r3, r3, #8
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <HAL_I2C_MspInit+0x94>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001902:	2312      	movs	r3, #18
 8001904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	4812      	ldr	r0, [pc, #72]	; (800195c <HAL_I2C_MspInit+0x98>)
 8001912:	f000 fb4f 	bl	8001fb4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_I2C_MspInit+0x9c>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	f043 0302 	orr.w	r3, r3, #2
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
 800192c:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <HAL_I2C_MspInit+0x9c>)
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_I2C_MspInit+0x94>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4a08      	ldr	r2, [pc, #32]	; (8001958 <HAL_I2C_MspInit+0x94>)
 8001938:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800193c:	61d3      	str	r3, [r2, #28]
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_I2C_MspInit+0x94>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800194a:	bf00      	nop
 800194c:	3728      	adds	r7, #40	; 0x28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40005400 	.word	0x40005400
 8001958:	40021000 	.word	0x40021000
 800195c:	40010c00 	.word	0x40010c00
 8001960:	40010000 	.word	0x40010000

08001964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 0318 	add.w	r3, r7, #24
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a27      	ldr	r2, [pc, #156]	; (8001a1c <HAL_TIM_Base_MspInit+0xb8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d12d      	bne.n	80019e0 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001984:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <HAL_TIM_Base_MspInit+0xbc>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a25      	ldr	r2, [pc, #148]	; (8001a20 <HAL_TIM_Base_MspInit+0xbc>)
 800198a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <HAL_TIM_Base_MspInit+0xbc>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <HAL_TIM_Base_MspInit+0xbc>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a1f      	ldr	r2, [pc, #124]	; (8001a20 <HAL_TIM_Base_MspInit+0xbc>)
 80019a2:	f043 0304 	orr.w	r3, r3, #4
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <HAL_TIM_Base_MspInit+0xbc>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c2:	f107 0318 	add.w	r3, r7, #24
 80019c6:	4619      	mov	r1, r3
 80019c8:	4816      	ldr	r0, [pc, #88]	; (8001a24 <HAL_TIM_Base_MspInit+0xc0>)
 80019ca:	f000 faf3 	bl	8001fb4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	201b      	movs	r0, #27
 80019d4:	f000 fab7 	bl	8001f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80019d8:	201b      	movs	r0, #27
 80019da:	f000 fad0 	bl	8001f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019de:	e018      	b.n	8001a12 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <HAL_TIM_Base_MspInit+0xc4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d113      	bne.n	8001a12 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_TIM_Base_MspInit+0xbc>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	4a0c      	ldr	r2, [pc, #48]	; (8001a20 <HAL_TIM_Base_MspInit+0xbc>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	61d3      	str	r3, [r2, #28]
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_TIM_Base_MspInit+0xbc>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	201d      	movs	r0, #29
 8001a08:	f000 fa9d 	bl	8001f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a0c:	201d      	movs	r0, #29
 8001a0e:	f000 fab6 	bl	8001f7e <HAL_NVIC_EnableIRQ>
}
 8001a12:	bf00      	nop
 8001a14:	3728      	adds	r7, #40	; 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40012c00 	.word	0x40012c00
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010800 	.word	0x40010800
 8001a28:	40000400 	.word	0x40000400

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <NMI_Handler+0x4>

08001a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <MemManage_Handler+0x4>

08001a3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a72:	f000 f951 	bl	8001d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <TIM1_CC_IRQHandler+0x10>)
 8001a82:	f001 ffc1 	bl	8003a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2000026c 	.word	0x2000026c

08001a90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <TIM3_IRQHandler+0x10>)
 8001a96:	f001 ffb7 	bl	8003a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200002b4 	.word	0x200002b4

08001aa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8001aa8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001aac:	f000 fc1e 	bl	80022ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
	return 1;
 8001ab8:	2301      	movs	r3, #1
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr

08001ac2 <_kill>:

int _kill(int pid, int sig)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001acc:	f002 fcfe 	bl	80044cc <__errno>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2216      	movs	r2, #22
 8001ad4:	601a      	str	r2, [r3, #0]
	return -1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_exit>:

void _exit (int status)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001aea:	f04f 31ff 	mov.w	r1, #4294967295
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffe7 	bl	8001ac2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001af4:	e7fe      	b.n	8001af4 <_exit+0x12>

08001af6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	e00a      	b.n	8001b1e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b08:	f3af 8000 	nop.w
 8001b0c:	4601      	mov	r1, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	60ba      	str	r2, [r7, #8]
 8001b14:	b2ca      	uxtb	r2, r1
 8001b16:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	dbf0      	blt.n	8001b08 <_read+0x12>
	}

return len;
 8001b26:	687b      	ldr	r3, [r7, #4]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	e009      	b.n	8001b56 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	60ba      	str	r2, [r7, #8]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3301      	adds	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	dbf1      	blt.n	8001b42 <_write+0x12>
	}
	return len;
 8001b5e:	687b      	ldr	r3, [r7, #4]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_close>:

int _close(int file)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	return -1;
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b8e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <_isatty>:

int _isatty(int file)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	return 1;
 8001ba4:	2301      	movs	r3, #1
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
	return 0;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <_sbrk+0x5c>)
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <_sbrk+0x60>)
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <_sbrk+0x64>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <_sbrk+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d207      	bcs.n	8001c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf8:	f002 fc68 	bl	80044cc <__errno>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	220c      	movs	r2, #12
 8001c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
 8001c06:	e009      	b.n	8001c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <_sbrk+0x64>)
 8001c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20005000 	.word	0x20005000
 8001c28:	00000400 	.word	0x00000400
 8001c2c:	20000708 	.word	0x20000708
 8001c30:	20000720 	.word	0x20000720

08001c34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c40:	480c      	ldr	r0, [pc, #48]	; (8001c74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c42:	490d      	ldr	r1, [pc, #52]	; (8001c78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c44:	4a0d      	ldr	r2, [pc, #52]	; (8001c7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c48:	e002      	b.n	8001c50 <LoopCopyDataInit>

08001c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c4e:	3304      	adds	r3, #4

08001c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c54:	d3f9      	bcc.n	8001c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c58:	4c0a      	ldr	r4, [pc, #40]	; (8001c84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c5c:	e001      	b.n	8001c62 <LoopFillZerobss>

08001c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c60:	3204      	adds	r2, #4

08001c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c64:	d3fb      	bcc.n	8001c5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c66:	f7ff ffe5 	bl	8001c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c6a:	f002 fc35 	bl	80044d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c6e:	f7ff f91b 	bl	8000ea8 <main>
  bx lr
 8001c72:	4770      	bx	lr
  ldr r0, =_sdata
 8001c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c78:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001c7c:	08009a0c 	.word	0x08009a0c
  ldr r2, =_sbss
 8001c80:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001c84:	20000720 	.word	0x20000720

08001c88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c88:	e7fe      	b.n	8001c88 <ADC1_2_IRQHandler>
	...

08001c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <HAL_Init+0x28>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <HAL_Init+0x28>)
 8001c96:	f043 0310 	orr.w	r3, r3, #16
 8001c9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	f000 f947 	bl	8001f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca2:	200f      	movs	r0, #15
 8001ca4:	f000 f808 	bl	8001cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca8:	f7ff fdea 	bl	8001880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40022000 	.word	0x40022000

08001cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_InitTick+0x54>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_InitTick+0x58>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f95f 	bl	8001f9a <HAL_SYSTICK_Config>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00e      	b.n	8001d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b0f      	cmp	r3, #15
 8001cea:	d80a      	bhi.n	8001d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cec:	2200      	movs	r2, #0
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f000 f927 	bl	8001f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf8:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <HAL_InitTick+0x5c>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e000      	b.n	8001d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	20000010 	.word	0x20000010
 8001d14:	2000000c 	.word	0x2000000c

08001d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_IncTick+0x1c>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_IncTick+0x20>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	4a03      	ldr	r2, [pc, #12]	; (8001d38 <HAL_IncTick+0x20>)
 8001d2a:	6013      	str	r3, [r2, #0]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	20000010 	.word	0x20000010
 8001d38:	2000070c 	.word	0x2000070c

08001d3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d40:	4b02      	ldr	r3, [pc, #8]	; (8001d4c <HAL_GetTick+0x10>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	2000070c 	.word	0x2000070c

08001d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff fff0 	bl	8001d3c <HAL_GetTick>
 8001d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d005      	beq.n	8001d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_Delay+0x44>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d76:	bf00      	nop
 8001d78:	f7ff ffe0 	bl	8001d3c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d8f7      	bhi.n	8001d78 <HAL_Delay+0x28>
  {
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000010 	.word	0x20000010

08001d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db4:	4013      	ands	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dca:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	60d3      	str	r3, [r2, #12]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <__NVIC_GetPriorityGrouping+0x18>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	f003 0307 	and.w	r3, r3, #7
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	db0b      	blt.n	8001e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	f003 021f 	and.w	r2, r3, #31
 8001e14:	4906      	ldr	r1, [pc, #24]	; (8001e30 <__NVIC_EnableIRQ+0x34>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	e000e100 	.word	0xe000e100

08001e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6039      	str	r1, [r7, #0]
 8001e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	db0a      	blt.n	8001e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	490c      	ldr	r1, [pc, #48]	; (8001e80 <__NVIC_SetPriority+0x4c>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	0112      	lsls	r2, r2, #4
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	440b      	add	r3, r1
 8001e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e5c:	e00a      	b.n	8001e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4908      	ldr	r1, [pc, #32]	; (8001e84 <__NVIC_SetPriority+0x50>)
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	0112      	lsls	r2, r2, #4
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	440b      	add	r3, r1
 8001e72:	761a      	strb	r2, [r3, #24]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000e100 	.word	0xe000e100
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	; 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	bf28      	it	cs
 8001ea6:	2304      	movcs	r3, #4
 8001ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3304      	adds	r3, #4
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d902      	bls.n	8001eb8 <NVIC_EncodePriority+0x30>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3b03      	subs	r3, #3
 8001eb6:	e000      	b.n	8001eba <NVIC_EncodePriority+0x32>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	401a      	ands	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43d9      	mvns	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	4313      	orrs	r3, r2
         );
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3724      	adds	r7, #36	; 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001efc:	d301      	bcc.n	8001f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00f      	b.n	8001f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <SysTick_Config+0x40>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f10:	f7ff ff90 	bl	8001e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <SysTick_Config+0x40>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1a:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <SysTick_Config+0x40>)
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	e000e010 	.word	0xe000e010

08001f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ff2d 	bl	8001d98 <__NVIC_SetPriorityGrouping>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f58:	f7ff ff42 	bl	8001de0 <__NVIC_GetPriorityGrouping>
 8001f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	6978      	ldr	r0, [r7, #20]
 8001f64:	f7ff ff90 	bl	8001e88 <NVIC_EncodePriority>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff5f 	bl	8001e34 <__NVIC_SetPriority>
}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff35 	bl	8001dfc <__NVIC_EnableIRQ>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ffa2 	bl	8001eec <SysTick_Config>
 8001fa8:	4603      	mov	r3, r0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b08b      	sub	sp, #44	; 0x2c
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc6:	e169      	b.n	800229c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	f040 8158 	bne.w	8002296 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4a9a      	ldr	r2, [pc, #616]	; (8002254 <HAL_GPIO_Init+0x2a0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d05e      	beq.n	80020ae <HAL_GPIO_Init+0xfa>
 8001ff0:	4a98      	ldr	r2, [pc, #608]	; (8002254 <HAL_GPIO_Init+0x2a0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d875      	bhi.n	80020e2 <HAL_GPIO_Init+0x12e>
 8001ff6:	4a98      	ldr	r2, [pc, #608]	; (8002258 <HAL_GPIO_Init+0x2a4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d058      	beq.n	80020ae <HAL_GPIO_Init+0xfa>
 8001ffc:	4a96      	ldr	r2, [pc, #600]	; (8002258 <HAL_GPIO_Init+0x2a4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d86f      	bhi.n	80020e2 <HAL_GPIO_Init+0x12e>
 8002002:	4a96      	ldr	r2, [pc, #600]	; (800225c <HAL_GPIO_Init+0x2a8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d052      	beq.n	80020ae <HAL_GPIO_Init+0xfa>
 8002008:	4a94      	ldr	r2, [pc, #592]	; (800225c <HAL_GPIO_Init+0x2a8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d869      	bhi.n	80020e2 <HAL_GPIO_Init+0x12e>
 800200e:	4a94      	ldr	r2, [pc, #592]	; (8002260 <HAL_GPIO_Init+0x2ac>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d04c      	beq.n	80020ae <HAL_GPIO_Init+0xfa>
 8002014:	4a92      	ldr	r2, [pc, #584]	; (8002260 <HAL_GPIO_Init+0x2ac>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d863      	bhi.n	80020e2 <HAL_GPIO_Init+0x12e>
 800201a:	4a92      	ldr	r2, [pc, #584]	; (8002264 <HAL_GPIO_Init+0x2b0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d046      	beq.n	80020ae <HAL_GPIO_Init+0xfa>
 8002020:	4a90      	ldr	r2, [pc, #576]	; (8002264 <HAL_GPIO_Init+0x2b0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d85d      	bhi.n	80020e2 <HAL_GPIO_Init+0x12e>
 8002026:	2b12      	cmp	r3, #18
 8002028:	d82a      	bhi.n	8002080 <HAL_GPIO_Init+0xcc>
 800202a:	2b12      	cmp	r3, #18
 800202c:	d859      	bhi.n	80020e2 <HAL_GPIO_Init+0x12e>
 800202e:	a201      	add	r2, pc, #4	; (adr r2, 8002034 <HAL_GPIO_Init+0x80>)
 8002030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002034:	080020af 	.word	0x080020af
 8002038:	08002089 	.word	0x08002089
 800203c:	0800209b 	.word	0x0800209b
 8002040:	080020dd 	.word	0x080020dd
 8002044:	080020e3 	.word	0x080020e3
 8002048:	080020e3 	.word	0x080020e3
 800204c:	080020e3 	.word	0x080020e3
 8002050:	080020e3 	.word	0x080020e3
 8002054:	080020e3 	.word	0x080020e3
 8002058:	080020e3 	.word	0x080020e3
 800205c:	080020e3 	.word	0x080020e3
 8002060:	080020e3 	.word	0x080020e3
 8002064:	080020e3 	.word	0x080020e3
 8002068:	080020e3 	.word	0x080020e3
 800206c:	080020e3 	.word	0x080020e3
 8002070:	080020e3 	.word	0x080020e3
 8002074:	080020e3 	.word	0x080020e3
 8002078:	08002091 	.word	0x08002091
 800207c:	080020a5 	.word	0x080020a5
 8002080:	4a79      	ldr	r2, [pc, #484]	; (8002268 <HAL_GPIO_Init+0x2b4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002086:	e02c      	b.n	80020e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	623b      	str	r3, [r7, #32]
          break;
 800208e:	e029      	b.n	80020e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	3304      	adds	r3, #4
 8002096:	623b      	str	r3, [r7, #32]
          break;
 8002098:	e024      	b.n	80020e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	3308      	adds	r3, #8
 80020a0:	623b      	str	r3, [r7, #32]
          break;
 80020a2:	e01f      	b.n	80020e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	330c      	adds	r3, #12
 80020aa:	623b      	str	r3, [r7, #32]
          break;
 80020ac:	e01a      	b.n	80020e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d102      	bne.n	80020bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020b6:	2304      	movs	r3, #4
 80020b8:	623b      	str	r3, [r7, #32]
          break;
 80020ba:	e013      	b.n	80020e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d105      	bne.n	80020d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020c4:	2308      	movs	r3, #8
 80020c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	611a      	str	r2, [r3, #16]
          break;
 80020ce:	e009      	b.n	80020e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020d0:	2308      	movs	r3, #8
 80020d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	615a      	str	r2, [r3, #20]
          break;
 80020da:	e003      	b.n	80020e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020dc:	2300      	movs	r3, #0
 80020de:	623b      	str	r3, [r7, #32]
          break;
 80020e0:	e000      	b.n	80020e4 <HAL_GPIO_Init+0x130>
          break;
 80020e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	2bff      	cmp	r3, #255	; 0xff
 80020e8:	d801      	bhi.n	80020ee <HAL_GPIO_Init+0x13a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	e001      	b.n	80020f2 <HAL_GPIO_Init+0x13e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3304      	adds	r3, #4
 80020f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2bff      	cmp	r3, #255	; 0xff
 80020f8:	d802      	bhi.n	8002100 <HAL_GPIO_Init+0x14c>
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	e002      	b.n	8002106 <HAL_GPIO_Init+0x152>
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	3b08      	subs	r3, #8
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	210f      	movs	r1, #15
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	fa01 f303 	lsl.w	r3, r1, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	401a      	ands	r2, r3
 8002118:	6a39      	ldr	r1, [r7, #32]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	431a      	orrs	r2, r3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 80b1 	beq.w	8002296 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002134:	4b4d      	ldr	r3, [pc, #308]	; (800226c <HAL_GPIO_Init+0x2b8>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	4a4c      	ldr	r2, [pc, #304]	; (800226c <HAL_GPIO_Init+0x2b8>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	6193      	str	r3, [r2, #24]
 8002140:	4b4a      	ldr	r3, [pc, #296]	; (800226c <HAL_GPIO_Init+0x2b8>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800214c:	4a48      	ldr	r2, [pc, #288]	; (8002270 <HAL_GPIO_Init+0x2bc>)
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	089b      	lsrs	r3, r3, #2
 8002152:	3302      	adds	r3, #2
 8002154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002158:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	220f      	movs	r2, #15
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4013      	ands	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a40      	ldr	r2, [pc, #256]	; (8002274 <HAL_GPIO_Init+0x2c0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d013      	beq.n	80021a0 <HAL_GPIO_Init+0x1ec>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a3f      	ldr	r2, [pc, #252]	; (8002278 <HAL_GPIO_Init+0x2c4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00d      	beq.n	800219c <HAL_GPIO_Init+0x1e8>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3e      	ldr	r2, [pc, #248]	; (800227c <HAL_GPIO_Init+0x2c8>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d007      	beq.n	8002198 <HAL_GPIO_Init+0x1e4>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3d      	ldr	r2, [pc, #244]	; (8002280 <HAL_GPIO_Init+0x2cc>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d101      	bne.n	8002194 <HAL_GPIO_Init+0x1e0>
 8002190:	2303      	movs	r3, #3
 8002192:	e006      	b.n	80021a2 <HAL_GPIO_Init+0x1ee>
 8002194:	2304      	movs	r3, #4
 8002196:	e004      	b.n	80021a2 <HAL_GPIO_Init+0x1ee>
 8002198:	2302      	movs	r3, #2
 800219a:	e002      	b.n	80021a2 <HAL_GPIO_Init+0x1ee>
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <HAL_GPIO_Init+0x1ee>
 80021a0:	2300      	movs	r3, #0
 80021a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a4:	f002 0203 	and.w	r2, r2, #3
 80021a8:	0092      	lsls	r2, r2, #2
 80021aa:	4093      	lsls	r3, r2
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021b2:	492f      	ldr	r1, [pc, #188]	; (8002270 <HAL_GPIO_Init+0x2bc>)
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	089b      	lsrs	r3, r3, #2
 80021b8:	3302      	adds	r3, #2
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d006      	beq.n	80021da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021cc:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <HAL_GPIO_Init+0x2d0>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	492c      	ldr	r1, [pc, #176]	; (8002284 <HAL_GPIO_Init+0x2d0>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021da:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <HAL_GPIO_Init+0x2d0>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	4928      	ldr	r1, [pc, #160]	; (8002284 <HAL_GPIO_Init+0x2d0>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d006      	beq.n	8002202 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021f4:	4b23      	ldr	r3, [pc, #140]	; (8002284 <HAL_GPIO_Init+0x2d0>)
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	4922      	ldr	r1, [pc, #136]	; (8002284 <HAL_GPIO_Init+0x2d0>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
 8002200:	e006      	b.n	8002210 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002202:	4b20      	ldr	r3, [pc, #128]	; (8002284 <HAL_GPIO_Init+0x2d0>)
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	43db      	mvns	r3, r3
 800220a:	491e      	ldr	r1, [pc, #120]	; (8002284 <HAL_GPIO_Init+0x2d0>)
 800220c:	4013      	ands	r3, r2
 800220e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d006      	beq.n	800222a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800221c:	4b19      	ldr	r3, [pc, #100]	; (8002284 <HAL_GPIO_Init+0x2d0>)
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	4918      	ldr	r1, [pc, #96]	; (8002284 <HAL_GPIO_Init+0x2d0>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	608b      	str	r3, [r1, #8]
 8002228:	e006      	b.n	8002238 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <HAL_GPIO_Init+0x2d0>)
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	43db      	mvns	r3, r3
 8002232:	4914      	ldr	r1, [pc, #80]	; (8002284 <HAL_GPIO_Init+0x2d0>)
 8002234:	4013      	ands	r3, r2
 8002236:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d021      	beq.n	8002288 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <HAL_GPIO_Init+0x2d0>)
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	490e      	ldr	r1, [pc, #56]	; (8002284 <HAL_GPIO_Init+0x2d0>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	60cb      	str	r3, [r1, #12]
 8002250:	e021      	b.n	8002296 <HAL_GPIO_Init+0x2e2>
 8002252:	bf00      	nop
 8002254:	10320000 	.word	0x10320000
 8002258:	10310000 	.word	0x10310000
 800225c:	10220000 	.word	0x10220000
 8002260:	10210000 	.word	0x10210000
 8002264:	10120000 	.word	0x10120000
 8002268:	10110000 	.word	0x10110000
 800226c:	40021000 	.word	0x40021000
 8002270:	40010000 	.word	0x40010000
 8002274:	40010800 	.word	0x40010800
 8002278:	40010c00 	.word	0x40010c00
 800227c:	40011000 	.word	0x40011000
 8002280:	40011400 	.word	0x40011400
 8002284:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_GPIO_Init+0x304>)
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	43db      	mvns	r3, r3
 8002290:	4909      	ldr	r1, [pc, #36]	; (80022b8 <HAL_GPIO_Init+0x304>)
 8002292:	4013      	ands	r3, r2
 8002294:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	3301      	adds	r3, #1
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	fa22 f303 	lsr.w	r3, r2, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f47f ae8e 	bne.w	8001fc8 <HAL_GPIO_Init+0x14>
  }
}
 80022ac:	bf00      	nop
 80022ae:	bf00      	nop
 80022b0:	372c      	adds	r7, #44	; 0x2c
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	40010400 	.word	0x40010400

080022bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	807b      	strh	r3, [r7, #2]
 80022c8:	4613      	mov	r3, r2
 80022ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022cc:	787b      	ldrb	r3, [r7, #1]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022d2:	887a      	ldrh	r2, [r7, #2]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022d8:	e003      	b.n	80022e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022da:	887b      	ldrh	r3, [r7, #2]
 80022dc:	041a      	lsls	r2, r3, #16
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	611a      	str	r2, [r3, #16]
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr

080022ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d006      	beq.n	8002310 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe ffd8 	bl	80012c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40010400 	.word	0x40010400

0800231c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e12b      	b.n	8002586 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff fabe 	bl	80018c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2224      	movs	r2, #36	; 0x24
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800236e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800237e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002380:	f001 f918 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8002384:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4a81      	ldr	r2, [pc, #516]	; (8002590 <HAL_I2C_Init+0x274>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d807      	bhi.n	80023a0 <HAL_I2C_Init+0x84>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4a80      	ldr	r2, [pc, #512]	; (8002594 <HAL_I2C_Init+0x278>)
 8002394:	4293      	cmp	r3, r2
 8002396:	bf94      	ite	ls
 8002398:	2301      	movls	r3, #1
 800239a:	2300      	movhi	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	e006      	b.n	80023ae <HAL_I2C_Init+0x92>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4a7d      	ldr	r2, [pc, #500]	; (8002598 <HAL_I2C_Init+0x27c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	bf94      	ite	ls
 80023a8:	2301      	movls	r3, #1
 80023aa:	2300      	movhi	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0e7      	b.n	8002586 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4a78      	ldr	r2, [pc, #480]	; (800259c <HAL_I2C_Init+0x280>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	0c9b      	lsrs	r3, r3, #18
 80023c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4a6a      	ldr	r2, [pc, #424]	; (8002590 <HAL_I2C_Init+0x274>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d802      	bhi.n	80023f0 <HAL_I2C_Init+0xd4>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	3301      	adds	r3, #1
 80023ee:	e009      	b.n	8002404 <HAL_I2C_Init+0xe8>
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023f6:	fb02 f303 	mul.w	r3, r2, r3
 80023fa:	4a69      	ldr	r2, [pc, #420]	; (80025a0 <HAL_I2C_Init+0x284>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	099b      	lsrs	r3, r3, #6
 8002402:	3301      	adds	r3, #1
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	430b      	orrs	r3, r1
 800240a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002416:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	495c      	ldr	r1, [pc, #368]	; (8002590 <HAL_I2C_Init+0x274>)
 8002420:	428b      	cmp	r3, r1
 8002422:	d819      	bhi.n	8002458 <HAL_I2C_Init+0x13c>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1e59      	subs	r1, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002432:	1c59      	adds	r1, r3, #1
 8002434:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002438:	400b      	ands	r3, r1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <HAL_I2C_Init+0x138>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1e59      	subs	r1, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fbb1 f3f3 	udiv	r3, r1, r3
 800244c:	3301      	adds	r3, #1
 800244e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002452:	e051      	b.n	80024f8 <HAL_I2C_Init+0x1dc>
 8002454:	2304      	movs	r3, #4
 8002456:	e04f      	b.n	80024f8 <HAL_I2C_Init+0x1dc>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d111      	bne.n	8002484 <HAL_I2C_Init+0x168>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1e58      	subs	r0, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	440b      	add	r3, r1
 800246e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002472:	3301      	adds	r3, #1
 8002474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	e012      	b.n	80024aa <HAL_I2C_Init+0x18e>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1e58      	subs	r0, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	0099      	lsls	r1, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	fbb0 f3f3 	udiv	r3, r0, r3
 800249a:	3301      	adds	r3, #1
 800249c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf0c      	ite	eq
 80024a4:	2301      	moveq	r3, #1
 80024a6:	2300      	movne	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_I2C_Init+0x196>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e022      	b.n	80024f8 <HAL_I2C_Init+0x1dc>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10e      	bne.n	80024d8 <HAL_I2C_Init+0x1bc>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1e58      	subs	r0, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6859      	ldr	r1, [r3, #4]
 80024c2:	460b      	mov	r3, r1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	440b      	add	r3, r1
 80024c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d6:	e00f      	b.n	80024f8 <HAL_I2C_Init+0x1dc>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1e58      	subs	r0, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	0099      	lsls	r1, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ee:	3301      	adds	r3, #1
 80024f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	6809      	ldr	r1, [r1, #0]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69da      	ldr	r2, [r3, #28]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002526:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6911      	ldr	r1, [r2, #16]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68d2      	ldr	r2, [r2, #12]
 8002532:	4311      	orrs	r1, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	000186a0 	.word	0x000186a0
 8002594:	001e847f 	.word	0x001e847f
 8002598:	003d08ff 	.word	0x003d08ff
 800259c:	431bde83 	.word	0x431bde83
 80025a0:	10624dd3 	.word	0x10624dd3

080025a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	461a      	mov	r2, r3
 80025b0:	460b      	mov	r3, r1
 80025b2:	817b      	strh	r3, [r7, #10]
 80025b4:	4613      	mov	r3, r2
 80025b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025b8:	f7ff fbc0 	bl	8001d3c <HAL_GetTick>
 80025bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	f040 80e0 	bne.w	800278c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2319      	movs	r3, #25
 80025d2:	2201      	movs	r2, #1
 80025d4:	4970      	ldr	r1, [pc, #448]	; (8002798 <HAL_I2C_Master_Transmit+0x1f4>)
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 fa92 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025e2:	2302      	movs	r3, #2
 80025e4:	e0d3      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_I2C_Master_Transmit+0x50>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e0cc      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b01      	cmp	r3, #1
 8002608:	d007      	beq.n	800261a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0201 	orr.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002628:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2221      	movs	r2, #33	; 0x21
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2210      	movs	r2, #16
 8002636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	893a      	ldrh	r2, [r7, #8]
 800264a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4a50      	ldr	r2, [pc, #320]	; (800279c <HAL_I2C_Master_Transmit+0x1f8>)
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800265c:	8979      	ldrh	r1, [r7, #10]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f9ca 	bl	80029fc <I2C_MasterRequestWrite>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e08d      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002688:	e066      	b.n	8002758 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	6a39      	ldr	r1, [r7, #32]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fb0c 	bl	8002cac <I2C_WaitOnTXEFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00d      	beq.n	80026b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d107      	bne.n	80026b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e06b      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	781a      	ldrb	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d11b      	bne.n	800272c <HAL_I2C_Master_Transmit+0x188>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d017      	beq.n	800272c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	781a      	ldrb	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	6a39      	ldr	r1, [r7, #32]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 fafc 	bl	8002d2e <I2C_WaitOnBTFFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00d      	beq.n	8002758 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2b04      	cmp	r3, #4
 8002742:	d107      	bne.n	8002754 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002752:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e01a      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275c:	2b00      	cmp	r3, #0
 800275e:	d194      	bne.n	800268a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	00100002 	.word	0x00100002
 800279c:	ffff0000 	.word	0xffff0000

080027a0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	460b      	mov	r3, r1
 80027ae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80027b0:	f7ff fac4 	bl	8001d3c <HAL_GetTick>
 80027b4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80027b6:	2301      	movs	r3, #1
 80027b8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	f040 8111 	bne.w	80029ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	2319      	movs	r3, #25
 80027ce:	2201      	movs	r2, #1
 80027d0:	4988      	ldr	r1, [pc, #544]	; (80029f4 <HAL_I2C_IsDeviceReady+0x254>)
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f994 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80027de:	2302      	movs	r3, #2
 80027e0:	e104      	b.n	80029ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_I2C_IsDeviceReady+0x50>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e0fd      	b.n	80029ec <HAL_I2C_IsDeviceReady+0x24c>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b01      	cmp	r3, #1
 8002804:	d007      	beq.n	8002816 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0201 	orr.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002824:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2224      	movs	r2, #36	; 0x24
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4a70      	ldr	r2, [pc, #448]	; (80029f8 <HAL_I2C_IsDeviceReady+0x258>)
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002848:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2200      	movs	r2, #0
 8002852:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f952 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00d      	beq.n	800287e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002870:	d103      	bne.n	800287a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e0b6      	b.n	80029ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800287e:	897b      	ldrh	r3, [r7, #10]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800288c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800288e:	f7ff fa55 	bl	8001d3c <HAL_GetTick>
 8002892:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b02      	cmp	r3, #2
 80028a0:	bf0c      	ite	eq
 80028a2:	2301      	moveq	r3, #1
 80028a4:	2300      	movne	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b8:	bf0c      	ite	eq
 80028ba:	2301      	moveq	r3, #1
 80028bc:	2300      	movne	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028c2:	e025      	b.n	8002910 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028c4:	f7ff fa3a 	bl	8001d3c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d302      	bcc.n	80028da <HAL_I2C_IsDeviceReady+0x13a>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d103      	bne.n	80028e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	22a0      	movs	r2, #160	; 0xa0
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2ba0      	cmp	r3, #160	; 0xa0
 800291a:	d005      	beq.n	8002928 <HAL_I2C_IsDeviceReady+0x188>
 800291c:	7dfb      	ldrb	r3, [r7, #23]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <HAL_I2C_IsDeviceReady+0x188>
 8002922:	7dbb      	ldrb	r3, [r7, #22]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0cd      	beq.n	80028c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b02      	cmp	r3, #2
 800293c:	d129      	bne.n	8002992 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	2319      	movs	r3, #25
 800296a:	2201      	movs	r2, #1
 800296c:	4921      	ldr	r1, [pc, #132]	; (80029f4 <HAL_I2C_IsDeviceReady+0x254>)
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f8c6 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e036      	b.n	80029ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2220      	movs	r2, #32
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	e02c      	b.n	80029ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	2319      	movs	r3, #25
 80029b2:	2201      	movs	r2, #1
 80029b4:	490f      	ldr	r1, [pc, #60]	; (80029f4 <HAL_I2C_IsDeviceReady+0x254>)
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f8a2 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e012      	b.n	80029ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	3301      	adds	r3, #1
 80029ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	f4ff af32 	bcc.w	800283a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80029ea:	2302      	movs	r3, #2
  }
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	00100002 	.word	0x00100002
 80029f8:	ffff0000 	.word	0xffff0000

080029fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d006      	beq.n	8002a26 <I2C_MasterRequestWrite+0x2a>
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d003      	beq.n	8002a26 <I2C_MasterRequestWrite+0x2a>
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a24:	d108      	bne.n	8002a38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	e00b      	b.n	8002a50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	2b12      	cmp	r3, #18
 8002a3e:	d107      	bne.n	8002a50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f84f 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00d      	beq.n	8002a84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a76:	d103      	bne.n	8002a80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e035      	b.n	8002af0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a8c:	d108      	bne.n	8002aa0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a8e:	897b      	ldrh	r3, [r7, #10]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a9c:	611a      	str	r2, [r3, #16]
 8002a9e:	e01b      	b.n	8002ad8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002aa0:	897b      	ldrh	r3, [r7, #10]
 8002aa2:	11db      	asrs	r3, r3, #7
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	f003 0306 	and.w	r3, r3, #6
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f063 030f 	orn	r3, r3, #15
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	490e      	ldr	r1, [pc, #56]	; (8002af8 <I2C_MasterRequestWrite+0xfc>)
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f875 	bl	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e010      	b.n	8002af0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ace:	897b      	ldrh	r3, [r7, #10]
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4907      	ldr	r1, [pc, #28]	; (8002afc <I2C_MasterRequestWrite+0x100>)
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f865 	bl	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	00010008 	.word	0x00010008
 8002afc:	00010002 	.word	0x00010002

08002b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b10:	e025      	b.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d021      	beq.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1a:	f7ff f90f 	bl	8001d3c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d302      	bcc.n	8002b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d116      	bne.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f043 0220 	orr.w	r2, r3, #32
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e023      	b.n	8002ba6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	0c1b      	lsrs	r3, r3, #16
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d10d      	bne.n	8002b84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4013      	ands	r3, r2
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	bf0c      	ite	eq
 8002b7a:	2301      	moveq	r3, #1
 8002b7c:	2300      	movne	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	e00c      	b.n	8002b9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf0c      	ite	eq
 8002b96:	2301      	moveq	r3, #1
 8002b98:	2300      	movne	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d0b6      	beq.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bbc:	e051      	b.n	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bcc:	d123      	bne.n	8002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bdc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002be6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f043 0204 	orr.w	r2, r3, #4
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e046      	b.n	8002ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d021      	beq.n	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1e:	f7ff f88d 	bl	8001d3c <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d302      	bcc.n	8002c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d116      	bne.n	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f043 0220 	orr.w	r2, r3, #32
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e020      	b.n	8002ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	0c1b      	lsrs	r3, r3, #16
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d10c      	bne.n	8002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	43da      	mvns	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4013      	ands	r3, r2
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bf14      	ite	ne
 8002c7e:	2301      	movne	r3, #1
 8002c80:	2300      	moveq	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	e00b      	b.n	8002c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	43da      	mvns	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4013      	ands	r3, r2
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf14      	ite	ne
 8002c98:	2301      	movne	r3, #1
 8002c9a:	2300      	moveq	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d18d      	bne.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cb8:	e02d      	b.n	8002d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f878 	bl	8002db0 <I2C_IsAcknowledgeFailed>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e02d      	b.n	8002d26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd0:	d021      	beq.n	8002d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd2:	f7ff f833 	bl	8001d3c <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d302      	bcc.n	8002ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d116      	bne.n	8002d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e007      	b.n	8002d26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d20:	2b80      	cmp	r3, #128	; 0x80
 8002d22:	d1ca      	bne.n	8002cba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d3a:	e02d      	b.n	8002d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f837 	bl	8002db0 <I2C_IsAcknowledgeFailed>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e02d      	b.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d52:	d021      	beq.n	8002d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d54:	f7fe fff2 	bl	8001d3c <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d302      	bcc.n	8002d6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d116      	bne.n	8002d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e007      	b.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d1ca      	bne.n	8002d3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc6:	d11b      	bne.n	8002e00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	f043 0204 	orr.w	r2, r3, #4
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e000      	b.n	8002e02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e272      	b.n	8003304 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 8087 	beq.w	8002f3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e2c:	4b92      	ldr	r3, [pc, #584]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d00c      	beq.n	8002e52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e38:	4b8f      	ldr	r3, [pc, #572]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d112      	bne.n	8002e6a <HAL_RCC_OscConfig+0x5e>
 8002e44:	4b8c      	ldr	r3, [pc, #560]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e50:	d10b      	bne.n	8002e6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e52:	4b89      	ldr	r3, [pc, #548]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d06c      	beq.n	8002f38 <HAL_RCC_OscConfig+0x12c>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d168      	bne.n	8002f38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e24c      	b.n	8003304 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e72:	d106      	bne.n	8002e82 <HAL_RCC_OscConfig+0x76>
 8002e74:	4b80      	ldr	r3, [pc, #512]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a7f      	ldr	r2, [pc, #508]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	e02e      	b.n	8002ee0 <HAL_RCC_OscConfig+0xd4>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x98>
 8002e8a:	4b7b      	ldr	r3, [pc, #492]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a7a      	ldr	r2, [pc, #488]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	4b78      	ldr	r3, [pc, #480]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a77      	ldr	r2, [pc, #476]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	e01d      	b.n	8002ee0 <HAL_RCC_OscConfig+0xd4>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eac:	d10c      	bne.n	8002ec8 <HAL_RCC_OscConfig+0xbc>
 8002eae:	4b72      	ldr	r3, [pc, #456]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a71      	ldr	r2, [pc, #452]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	4b6f      	ldr	r3, [pc, #444]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a6e      	ldr	r2, [pc, #440]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	e00b      	b.n	8002ee0 <HAL_RCC_OscConfig+0xd4>
 8002ec8:	4b6b      	ldr	r3, [pc, #428]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a6a      	ldr	r2, [pc, #424]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	4b68      	ldr	r3, [pc, #416]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a67      	ldr	r2, [pc, #412]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ede:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d013      	beq.n	8002f10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fe ff28 	bl	8001d3c <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef0:	f7fe ff24 	bl	8001d3c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b64      	cmp	r3, #100	; 0x64
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e200      	b.n	8003304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f02:	4b5d      	ldr	r3, [pc, #372]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0xe4>
 8002f0e:	e014      	b.n	8002f3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fe ff14 	bl	8001d3c <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f18:	f7fe ff10 	bl	8001d3c <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	; 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e1ec      	b.n	8003304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2a:	4b53      	ldr	r3, [pc, #332]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x10c>
 8002f36:	e000      	b.n	8002f3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d063      	beq.n	800300e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f46:	4b4c      	ldr	r3, [pc, #304]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00b      	beq.n	8002f6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f52:	4b49      	ldr	r3, [pc, #292]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d11c      	bne.n	8002f98 <HAL_RCC_OscConfig+0x18c>
 8002f5e:	4b46      	ldr	r3, [pc, #280]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d116      	bne.n	8002f98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6a:	4b43      	ldr	r3, [pc, #268]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d005      	beq.n	8002f82 <HAL_RCC_OscConfig+0x176>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d001      	beq.n	8002f82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e1c0      	b.n	8003304 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f82:	4b3d      	ldr	r3, [pc, #244]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4939      	ldr	r1, [pc, #228]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f96:	e03a      	b.n	800300e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d020      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa0:	4b36      	ldr	r3, [pc, #216]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa6:	f7fe fec9 	bl	8001d3c <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fae:	f7fe fec5 	bl	8001d3c <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e1a1      	b.n	8003304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc0:	4b2d      	ldr	r3, [pc, #180]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0f0      	beq.n	8002fae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fcc:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4927      	ldr	r1, [pc, #156]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	600b      	str	r3, [r1, #0]
 8002fe0:	e015      	b.n	800300e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe2:	4b26      	ldr	r3, [pc, #152]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fea8 	bl	8001d3c <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff0:	f7fe fea4 	bl	8001d3c <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e180      	b.n	8003304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003002:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d03a      	beq.n	8003090 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d019      	beq.n	8003056 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003022:	4b17      	ldr	r3, [pc, #92]	; (8003080 <HAL_RCC_OscConfig+0x274>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003028:	f7fe fe88 	bl	8001d3c <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003030:	f7fe fe84 	bl	8001d3c <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e160      	b.n	8003304 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003042:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <HAL_RCC_OscConfig+0x26c>)
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800304e:	2001      	movs	r0, #1
 8003050:	f000 fac4 	bl	80035dc <RCC_Delay>
 8003054:	e01c      	b.n	8003090 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003056:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <HAL_RCC_OscConfig+0x274>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305c:	f7fe fe6e 	bl	8001d3c <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003062:	e00f      	b.n	8003084 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003064:	f7fe fe6a 	bl	8001d3c <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d908      	bls.n	8003084 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e146      	b.n	8003304 <HAL_RCC_OscConfig+0x4f8>
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000
 800307c:	42420000 	.word	0x42420000
 8003080:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003084:	4b92      	ldr	r3, [pc, #584]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1e9      	bne.n	8003064 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80a6 	beq.w	80031ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309e:	2300      	movs	r3, #0
 80030a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030a2:	4b8b      	ldr	r3, [pc, #556]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10d      	bne.n	80030ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ae:	4b88      	ldr	r3, [pc, #544]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	4a87      	ldr	r2, [pc, #540]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b8:	61d3      	str	r3, [r2, #28]
 80030ba:	4b85      	ldr	r3, [pc, #532]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c6:	2301      	movs	r3, #1
 80030c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ca:	4b82      	ldr	r3, [pc, #520]	; (80032d4 <HAL_RCC_OscConfig+0x4c8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d118      	bne.n	8003108 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d6:	4b7f      	ldr	r3, [pc, #508]	; (80032d4 <HAL_RCC_OscConfig+0x4c8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a7e      	ldr	r2, [pc, #504]	; (80032d4 <HAL_RCC_OscConfig+0x4c8>)
 80030dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e2:	f7fe fe2b 	bl	8001d3c <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ea:	f7fe fe27 	bl	8001d3c <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b64      	cmp	r3, #100	; 0x64
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e103      	b.n	8003304 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fc:	4b75      	ldr	r3, [pc, #468]	; (80032d4 <HAL_RCC_OscConfig+0x4c8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d106      	bne.n	800311e <HAL_RCC_OscConfig+0x312>
 8003110:	4b6f      	ldr	r3, [pc, #444]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	4a6e      	ldr	r2, [pc, #440]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6213      	str	r3, [r2, #32]
 800311c:	e02d      	b.n	800317a <HAL_RCC_OscConfig+0x36e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0x334>
 8003126:	4b6a      	ldr	r3, [pc, #424]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4a69      	ldr	r2, [pc, #420]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	6213      	str	r3, [r2, #32]
 8003132:	4b67      	ldr	r3, [pc, #412]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	4a66      	ldr	r2, [pc, #408]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 8003138:	f023 0304 	bic.w	r3, r3, #4
 800313c:	6213      	str	r3, [r2, #32]
 800313e:	e01c      	b.n	800317a <HAL_RCC_OscConfig+0x36e>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2b05      	cmp	r3, #5
 8003146:	d10c      	bne.n	8003162 <HAL_RCC_OscConfig+0x356>
 8003148:	4b61      	ldr	r3, [pc, #388]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	4a60      	ldr	r2, [pc, #384]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 800314e:	f043 0304 	orr.w	r3, r3, #4
 8003152:	6213      	str	r3, [r2, #32]
 8003154:	4b5e      	ldr	r3, [pc, #376]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	4a5d      	ldr	r2, [pc, #372]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	6213      	str	r3, [r2, #32]
 8003160:	e00b      	b.n	800317a <HAL_RCC_OscConfig+0x36e>
 8003162:	4b5b      	ldr	r3, [pc, #364]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	4a5a      	ldr	r2, [pc, #360]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	6213      	str	r3, [r2, #32]
 800316e:	4b58      	ldr	r3, [pc, #352]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	4a57      	ldr	r2, [pc, #348]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	f023 0304 	bic.w	r3, r3, #4
 8003178:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d015      	beq.n	80031ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003182:	f7fe fddb 	bl	8001d3c <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003188:	e00a      	b.n	80031a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318a:	f7fe fdd7 	bl	8001d3c <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f241 3288 	movw	r2, #5000	; 0x1388
 8003198:	4293      	cmp	r3, r2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e0b1      	b.n	8003304 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a0:	4b4b      	ldr	r3, [pc, #300]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ee      	beq.n	800318a <HAL_RCC_OscConfig+0x37e>
 80031ac:	e014      	b.n	80031d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ae:	f7fe fdc5 	bl	8001d3c <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b4:	e00a      	b.n	80031cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f7fe fdc1 	bl	8001d3c <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e09b      	b.n	8003304 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031cc:	4b40      	ldr	r3, [pc, #256]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1ee      	bne.n	80031b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d105      	bne.n	80031ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031de:	4b3c      	ldr	r3, [pc, #240]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	4a3b      	ldr	r2, [pc, #236]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 80031e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 8087 	beq.w	8003302 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031f4:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 030c 	and.w	r3, r3, #12
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d061      	beq.n	80032c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d146      	bne.n	8003296 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003208:	4b33      	ldr	r3, [pc, #204]	; (80032d8 <HAL_RCC_OscConfig+0x4cc>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320e:	f7fe fd95 	bl	8001d3c <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003216:	f7fe fd91 	bl	8001d3c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e06d      	b.n	8003304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003228:	4b29      	ldr	r3, [pc, #164]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323c:	d108      	bne.n	8003250 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800323e:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	4921      	ldr	r1, [pc, #132]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003250:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a19      	ldr	r1, [r3, #32]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	430b      	orrs	r3, r1
 8003262:	491b      	ldr	r1, [pc, #108]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 8003264:	4313      	orrs	r3, r2
 8003266:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003268:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_RCC_OscConfig+0x4cc>)
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326e:	f7fe fd65 	bl	8001d3c <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003276:	f7fe fd61 	bl	8001d3c <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e03d      	b.n	8003304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003288:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x46a>
 8003294:	e035      	b.n	8003302 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003296:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <HAL_RCC_OscConfig+0x4cc>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe fd4e 	bl	8001d3c <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a4:	f7fe fd4a 	bl	8001d3c <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e026      	b.n	8003304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b6:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x498>
 80032c2:	e01e      	b.n	8003302 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d107      	bne.n	80032dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e019      	b.n	8003304 <HAL_RCC_OscConfig+0x4f8>
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40007000 	.word	0x40007000
 80032d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCC_OscConfig+0x500>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d106      	bne.n	80032fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40021000 	.word	0x40021000

08003310 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0d0      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003324:	4b6a      	ldr	r3, [pc, #424]	; (80034d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d910      	bls.n	8003354 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003332:	4b67      	ldr	r3, [pc, #412]	; (80034d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 0207 	bic.w	r2, r3, #7
 800333a:	4965      	ldr	r1, [pc, #404]	; (80034d0 <HAL_RCC_ClockConfig+0x1c0>)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	4313      	orrs	r3, r2
 8003340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003342:	4b63      	ldr	r3, [pc, #396]	; (80034d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0b8      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d020      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800336c:	4b59      	ldr	r3, [pc, #356]	; (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4a58      	ldr	r2, [pc, #352]	; (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003372:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003376:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003384:	4b53      	ldr	r3, [pc, #332]	; (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4a52      	ldr	r2, [pc, #328]	; (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800338e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003390:	4b50      	ldr	r3, [pc, #320]	; (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	494d      	ldr	r1, [pc, #308]	; (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d040      	beq.n	8003430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d107      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	4b47      	ldr	r3, [pc, #284]	; (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d115      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e07f      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ce:	4b41      	ldr	r3, [pc, #260]	; (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e073      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033de:	4b3d      	ldr	r3, [pc, #244]	; (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e06b      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ee:	4b39      	ldr	r3, [pc, #228]	; (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f023 0203 	bic.w	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4936      	ldr	r1, [pc, #216]	; (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003400:	f7fe fc9c 	bl	8001d3c <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003406:	e00a      	b.n	800341e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003408:	f7fe fc98 	bl	8001d3c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	; 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e053      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	4b2d      	ldr	r3, [pc, #180]	; (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 020c 	and.w	r2, r3, #12
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	429a      	cmp	r2, r3
 800342e:	d1eb      	bne.n	8003408 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003430:	4b27      	ldr	r3, [pc, #156]	; (80034d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d210      	bcs.n	8003460 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 0207 	bic.w	r2, r3, #7
 8003446:	4922      	ldr	r1, [pc, #136]	; (80034d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800344e:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e032      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800346c:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4916      	ldr	r1, [pc, #88]	; (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 800347a:	4313      	orrs	r3, r2
 800347c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800348a:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	490e      	ldr	r1, [pc, #56]	; (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 800349a:	4313      	orrs	r3, r2
 800349c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800349e:	f000 f821 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 80034a2:	4602      	mov	r2, r0
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	490a      	ldr	r1, [pc, #40]	; (80034d8 <HAL_RCC_ClockConfig+0x1c8>)
 80034b0:	5ccb      	ldrb	r3, [r1, r3]
 80034b2:	fa22 f303 	lsr.w	r3, r2, r3
 80034b6:	4a09      	ldr	r2, [pc, #36]	; (80034dc <HAL_RCC_ClockConfig+0x1cc>)
 80034b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034ba:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <HAL_RCC_ClockConfig+0x1d0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe fbfa 	bl	8001cb8 <HAL_InitTick>

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40022000 	.word	0x40022000
 80034d4:	40021000 	.word	0x40021000
 80034d8:	08009548 	.word	0x08009548
 80034dc:	20000008 	.word	0x20000008
 80034e0:	2000000c 	.word	0x2000000c

080034e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e4:	b490      	push	{r4, r7}
 80034e6:	b08a      	sub	sp, #40	; 0x28
 80034e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034ea:	4b29      	ldr	r3, [pc, #164]	; (8003590 <HAL_RCC_GetSysClockFreq+0xac>)
 80034ec:	1d3c      	adds	r4, r7, #4
 80034ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034f4:	f240 2301 	movw	r3, #513	; 0x201
 80034f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	2300      	movs	r3, #0
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800350e:	4b21      	ldr	r3, [pc, #132]	; (8003594 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b04      	cmp	r3, #4
 800351c:	d002      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0x40>
 800351e:	2b08      	cmp	r3, #8
 8003520:	d003      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0x46>
 8003522:	e02b      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003524:	4b1c      	ldr	r3, [pc, #112]	; (8003598 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003526:	623b      	str	r3, [r7, #32]
      break;
 8003528:	e02b      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	0c9b      	lsrs	r3, r3, #18
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	3328      	adds	r3, #40	; 0x28
 8003534:	443b      	add	r3, r7
 8003536:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800353a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d012      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003546:	4b13      	ldr	r3, [pc, #76]	; (8003594 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	0c5b      	lsrs	r3, r3, #17
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	3328      	adds	r3, #40	; 0x28
 8003552:	443b      	add	r3, r7
 8003554:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003558:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	4a0e      	ldr	r2, [pc, #56]	; (8003598 <HAL_RCC_GetSysClockFreq+0xb4>)
 800355e:	fb03 f202 	mul.w	r2, r3, r2
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
 800356a:	e004      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	4a0b      	ldr	r2, [pc, #44]	; (800359c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003570:	fb02 f303 	mul.w	r3, r2, r3
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	623b      	str	r3, [r7, #32]
      break;
 800357a:	e002      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800357c:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_RCC_GetSysClockFreq+0xb4>)
 800357e:	623b      	str	r3, [r7, #32]
      break;
 8003580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003582:	6a3b      	ldr	r3, [r7, #32]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3728      	adds	r7, #40	; 0x28
 8003588:	46bd      	mov	sp, r7
 800358a:	bc90      	pop	{r4, r7}
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	08008dcc 	.word	0x08008dcc
 8003594:	40021000 	.word	0x40021000
 8003598:	007a1200 	.word	0x007a1200
 800359c:	003d0900 	.word	0x003d0900

080035a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a4:	4b02      	ldr	r3, [pc, #8]	; (80035b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80035a6:	681b      	ldr	r3, [r3, #0]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr
 80035b0:	20000008 	.word	0x20000008

080035b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035b8:	f7ff fff2 	bl	80035a0 <HAL_RCC_GetHCLKFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	0a1b      	lsrs	r3, r3, #8
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	4903      	ldr	r1, [pc, #12]	; (80035d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40021000 	.word	0x40021000
 80035d8:	08009558 	.word	0x08009558

080035dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035e4:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <RCC_Delay+0x34>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a0a      	ldr	r2, [pc, #40]	; (8003614 <RCC_Delay+0x38>)
 80035ea:	fba2 2303 	umull	r2, r3, r2, r3
 80035ee:	0a5b      	lsrs	r3, r3, #9
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	fb02 f303 	mul.w	r3, r2, r3
 80035f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035f8:	bf00      	nop
  }
  while (Delay --);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1e5a      	subs	r2, r3, #1
 80035fe:	60fa      	str	r2, [r7, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f9      	bne.n	80035f8 <RCC_Delay+0x1c>
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	20000008 	.word	0x20000008
 8003614:	10624dd3 	.word	0x10624dd3

08003618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e041      	b.n	80036ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fe f990 	bl	8001964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3304      	adds	r3, #4
 8003654:	4619      	mov	r1, r3
 8003656:	4610      	mov	r0, r2
 8003658:	f000 fc9e 	bl	8003f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d001      	beq.n	80036d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e032      	b.n	8003736 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a18      	ldr	r2, [pc, #96]	; (8003740 <HAL_TIM_Base_Start+0x88>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00e      	beq.n	8003700 <HAL_TIM_Base_Start+0x48>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ea:	d009      	beq.n	8003700 <HAL_TIM_Base_Start+0x48>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a14      	ldr	r2, [pc, #80]	; (8003744 <HAL_TIM_Base_Start+0x8c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d004      	beq.n	8003700 <HAL_TIM_Base_Start+0x48>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a13      	ldr	r2, [pc, #76]	; (8003748 <HAL_TIM_Base_Start+0x90>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d111      	bne.n	8003724 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b06      	cmp	r3, #6
 8003710:	d010      	beq.n	8003734 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0201 	orr.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003722:	e007      	b.n	8003734 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr
 8003740:	40012c00 	.word	0x40012c00
 8003744:	40000400 	.word	0x40000400
 8003748:	40000800 	.word	0x40000800

0800374c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e041      	b.n	80037e2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f839 	bl	80037ea <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3304      	adds	r3, #4
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f000 fc04 	bl	8003f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d104      	bne.n	8003816 <HAL_TIM_IC_Start_IT+0x1a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003812:	b2db      	uxtb	r3, r3
 8003814:	e013      	b.n	800383e <HAL_TIM_IC_Start_IT+0x42>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b04      	cmp	r3, #4
 800381a:	d104      	bne.n	8003826 <HAL_TIM_IC_Start_IT+0x2a>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003822:	b2db      	uxtb	r3, r3
 8003824:	e00b      	b.n	800383e <HAL_TIM_IC_Start_IT+0x42>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b08      	cmp	r3, #8
 800382a:	d104      	bne.n	8003836 <HAL_TIM_IC_Start_IT+0x3a>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003832:	b2db      	uxtb	r3, r3
 8003834:	e003      	b.n	800383e <HAL_TIM_IC_Start_IT+0x42>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800383c:	b2db      	uxtb	r3, r3
 800383e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d104      	bne.n	8003850 <HAL_TIM_IC_Start_IT+0x54>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800384c:	b2db      	uxtb	r3, r3
 800384e:	e013      	b.n	8003878 <HAL_TIM_IC_Start_IT+0x7c>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2b04      	cmp	r3, #4
 8003854:	d104      	bne.n	8003860 <HAL_TIM_IC_Start_IT+0x64>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800385c:	b2db      	uxtb	r3, r3
 800385e:	e00b      	b.n	8003878 <HAL_TIM_IC_Start_IT+0x7c>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2b08      	cmp	r3, #8
 8003864:	d104      	bne.n	8003870 <HAL_TIM_IC_Start_IT+0x74>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800386c:	b2db      	uxtb	r3, r3
 800386e:	e003      	b.n	8003878 <HAL_TIM_IC_Start_IT+0x7c>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003876:	b2db      	uxtb	r3, r3
 8003878:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d102      	bne.n	8003886 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003880:	7bbb      	ldrb	r3, [r7, #14]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d001      	beq.n	800388a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e0b3      	b.n	80039f2 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d104      	bne.n	800389a <HAL_TIM_IC_Start_IT+0x9e>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003898:	e013      	b.n	80038c2 <HAL_TIM_IC_Start_IT+0xc6>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b04      	cmp	r3, #4
 800389e:	d104      	bne.n	80038aa <HAL_TIM_IC_Start_IT+0xae>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038a8:	e00b      	b.n	80038c2 <HAL_TIM_IC_Start_IT+0xc6>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d104      	bne.n	80038ba <HAL_TIM_IC_Start_IT+0xbe>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b8:	e003      	b.n	80038c2 <HAL_TIM_IC_Start_IT+0xc6>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2202      	movs	r2, #2
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d104      	bne.n	80038d2 <HAL_TIM_IC_Start_IT+0xd6>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038d0:	e013      	b.n	80038fa <HAL_TIM_IC_Start_IT+0xfe>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d104      	bne.n	80038e2 <HAL_TIM_IC_Start_IT+0xe6>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038e0:	e00b      	b.n	80038fa <HAL_TIM_IC_Start_IT+0xfe>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d104      	bne.n	80038f2 <HAL_TIM_IC_Start_IT+0xf6>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038f0:	e003      	b.n	80038fa <HAL_TIM_IC_Start_IT+0xfe>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2202      	movs	r2, #2
 80038f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b0c      	cmp	r3, #12
 80038fe:	d841      	bhi.n	8003984 <HAL_TIM_IC_Start_IT+0x188>
 8003900:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <HAL_TIM_IC_Start_IT+0x10c>)
 8003902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003906:	bf00      	nop
 8003908:	0800393d 	.word	0x0800393d
 800390c:	08003985 	.word	0x08003985
 8003910:	08003985 	.word	0x08003985
 8003914:	08003985 	.word	0x08003985
 8003918:	0800394f 	.word	0x0800394f
 800391c:	08003985 	.word	0x08003985
 8003920:	08003985 	.word	0x08003985
 8003924:	08003985 	.word	0x08003985
 8003928:	08003961 	.word	0x08003961
 800392c:	08003985 	.word	0x08003985
 8003930:	08003985 	.word	0x08003985
 8003934:	08003985 	.word	0x08003985
 8003938:	08003973 	.word	0x08003973
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0202 	orr.w	r2, r2, #2
 800394a:	60da      	str	r2, [r3, #12]
      break;
 800394c:	e01b      	b.n	8003986 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0204 	orr.w	r2, r2, #4
 800395c:	60da      	str	r2, [r3, #12]
      break;
 800395e:	e012      	b.n	8003986 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0208 	orr.w	r2, r2, #8
 800396e:	60da      	str	r2, [r3, #12]
      break;
 8003970:	e009      	b.n	8003986 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0210 	orr.w	r2, r2, #16
 8003980:	60da      	str	r2, [r3, #12]
      break;
 8003982:	e000      	b.n	8003986 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003984:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2201      	movs	r2, #1
 800398c:	6839      	ldr	r1, [r7, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fd07 	bl	80043a2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a18      	ldr	r2, [pc, #96]	; (80039fc <HAL_TIM_IC_Start_IT+0x200>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00e      	beq.n	80039bc <HAL_TIM_IC_Start_IT+0x1c0>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a6:	d009      	beq.n	80039bc <HAL_TIM_IC_Start_IT+0x1c0>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a14      	ldr	r2, [pc, #80]	; (8003a00 <HAL_TIM_IC_Start_IT+0x204>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d004      	beq.n	80039bc <HAL_TIM_IC_Start_IT+0x1c0>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a13      	ldr	r2, [pc, #76]	; (8003a04 <HAL_TIM_IC_Start_IT+0x208>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d111      	bne.n	80039e0 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b06      	cmp	r3, #6
 80039cc:	d010      	beq.n	80039f0 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0201 	orr.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039de:	e007      	b.n	80039f0 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40012c00 	.word	0x40012c00
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40000800 	.word	0x40000800

08003a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d122      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d11b      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0202 	mvn.w	r2, #2
 8003a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fd f98c 	bl	8000d68 <HAL_TIM_IC_CaptureCallback>
 8003a50:	e005      	b.n	8003a5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fa85 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fa8b 	bl	8003f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d122      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d11b      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0204 	mvn.w	r2, #4
 8003a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd f962 	bl	8000d68 <HAL_TIM_IC_CaptureCallback>
 8003aa4:	e005      	b.n	8003ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fa5b 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fa61 	bl	8003f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d122      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d11b      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0208 	mvn.w	r2, #8
 8003adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fd f938 	bl	8000d68 <HAL_TIM_IC_CaptureCallback>
 8003af8:	e005      	b.n	8003b06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fa31 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fa37 	bl	8003f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	d122      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d11b      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0210 	mvn.w	r2, #16
 8003b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2208      	movs	r2, #8
 8003b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fd f90e 	bl	8000d68 <HAL_TIM_IC_CaptureCallback>
 8003b4c:	e005      	b.n	8003b5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fa07 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fa0d 	bl	8003f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d10e      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d107      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0201 	mvn.w	r2, #1
 8003b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f9e2 	bl	8003f50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b96:	2b80      	cmp	r3, #128	; 0x80
 8003b98:	d10e      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba4:	2b80      	cmp	r3, #128	; 0x80
 8003ba6:	d107      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fc81 	bl	80044ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	d10e      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd0:	2b40      	cmp	r3, #64	; 0x40
 8003bd2:	d107      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f9d1 	bl	8003f86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d10e      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d107      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0220 	mvn.w	r2, #32
 8003c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fc4c 	bl	80044a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e082      	b.n	8003d38 <HAL_TIM_IC_ConfigChannel+0x120>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d11b      	bne.n	8003c78 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	6819      	ldr	r1, [r3, #0]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f000 fa04 	bl	800405c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 020c 	bic.w	r2, r2, #12
 8003c62:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6999      	ldr	r1, [r3, #24]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	619a      	str	r2, [r3, #24]
 8003c76:	e05a      	b.n	8003d2e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d11c      	bne.n	8003cb8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	6819      	ldr	r1, [r3, #0]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f000 fa6d 	bl	800416c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699a      	ldr	r2, [r3, #24]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003ca0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6999      	ldr	r1, [r3, #24]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	021a      	lsls	r2, r3, #8
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	619a      	str	r2, [r3, #24]
 8003cb6:	e03a      	b.n	8003d2e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d11b      	bne.n	8003cf6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	6819      	ldr	r1, [r3, #0]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f000 fab8 	bl	8004242 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69da      	ldr	r2, [r3, #28]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 020c 	bic.w	r2, r2, #12
 8003ce0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69d9      	ldr	r1, [r3, #28]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	61da      	str	r2, [r3, #28]
 8003cf4:	e01b      	b.n	8003d2e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	6819      	ldr	r1, [r3, #0]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f000 fad7 	bl	80042b8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69da      	ldr	r2, [r3, #28]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d18:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69d9      	ldr	r1, [r3, #28]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	021a      	lsls	r2, r3, #8
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_TIM_ConfigClockSource+0x18>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e0b3      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x180>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d90:	d03e      	beq.n	8003e10 <HAL_TIM_ConfigClockSource+0xd0>
 8003d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d96:	f200 8087 	bhi.w	8003ea8 <HAL_TIM_ConfigClockSource+0x168>
 8003d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9e:	f000 8085 	beq.w	8003eac <HAL_TIM_ConfigClockSource+0x16c>
 8003da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da6:	d87f      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x168>
 8003da8:	2b70      	cmp	r3, #112	; 0x70
 8003daa:	d01a      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0xa2>
 8003dac:	2b70      	cmp	r3, #112	; 0x70
 8003dae:	d87b      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x168>
 8003db0:	2b60      	cmp	r3, #96	; 0x60
 8003db2:	d050      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x116>
 8003db4:	2b60      	cmp	r3, #96	; 0x60
 8003db6:	d877      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x168>
 8003db8:	2b50      	cmp	r3, #80	; 0x50
 8003dba:	d03c      	beq.n	8003e36 <HAL_TIM_ConfigClockSource+0xf6>
 8003dbc:	2b50      	cmp	r3, #80	; 0x50
 8003dbe:	d873      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x168>
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d058      	beq.n	8003e76 <HAL_TIM_ConfigClockSource+0x136>
 8003dc4:	2b40      	cmp	r3, #64	; 0x40
 8003dc6:	d86f      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x168>
 8003dc8:	2b30      	cmp	r3, #48	; 0x30
 8003dca:	d064      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x156>
 8003dcc:	2b30      	cmp	r3, #48	; 0x30
 8003dce:	d86b      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x168>
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d060      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x156>
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d867      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x168>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d05c      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x156>
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	d05a      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003de0:	e062      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6899      	ldr	r1, [r3, #8]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f000 fab7 	bl	8004364 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	609a      	str	r2, [r3, #8]
      break;
 8003e0e:	e04e      	b.n	8003eae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6899      	ldr	r1, [r3, #8]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f000 faa0 	bl	8004364 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e32:	609a      	str	r2, [r3, #8]
      break;
 8003e34:	e03b      	b.n	8003eae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6859      	ldr	r1, [r3, #4]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	461a      	mov	r2, r3
 8003e44:	f000 f964 	bl	8004110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2150      	movs	r1, #80	; 0x50
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fa6e 	bl	8004330 <TIM_ITRx_SetConfig>
      break;
 8003e54:	e02b      	b.n	8003eae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	6859      	ldr	r1, [r3, #4]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	461a      	mov	r2, r3
 8003e64:	f000 f9be 	bl	80041e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2160      	movs	r1, #96	; 0x60
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fa5e 	bl	8004330 <TIM_ITRx_SetConfig>
      break;
 8003e74:	e01b      	b.n	8003eae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	6859      	ldr	r1, [r3, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	461a      	mov	r2, r3
 8003e84:	f000 f944 	bl	8004110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2140      	movs	r1, #64	; 0x40
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fa4e 	bl	8004330 <TIM_ITRx_SetConfig>
      break;
 8003e94:	e00b      	b.n	8003eae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	f000 fa45 	bl	8004330 <TIM_ITRx_SetConfig>
        break;
 8003ea6:	e002      	b.n	8003eae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ea8:	bf00      	nop
 8003eaa:	e000      	b.n	8003eae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003eac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b0c      	cmp	r3, #12
 8003eda:	d831      	bhi.n	8003f40 <HAL_TIM_ReadCapturedValue+0x78>
 8003edc:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003f19 	.word	0x08003f19
 8003ee8:	08003f41 	.word	0x08003f41
 8003eec:	08003f41 	.word	0x08003f41
 8003ef0:	08003f41 	.word	0x08003f41
 8003ef4:	08003f23 	.word	0x08003f23
 8003ef8:	08003f41 	.word	0x08003f41
 8003efc:	08003f41 	.word	0x08003f41
 8003f00:	08003f41 	.word	0x08003f41
 8003f04:	08003f2d 	.word	0x08003f2d
 8003f08:	08003f41 	.word	0x08003f41
 8003f0c:	08003f41 	.word	0x08003f41
 8003f10:	08003f41 	.word	0x08003f41
 8003f14:	08003f37 	.word	0x08003f37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	60fb      	str	r3, [r7, #12]

      break;
 8003f20:	e00f      	b.n	8003f42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	60fb      	str	r3, [r7, #12]

      break;
 8003f2a:	e00a      	b.n	8003f42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f32:	60fb      	str	r3, [r7, #12]

      break;
 8003f34:	e005      	b.n	8003f42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	60fb      	str	r3, [r7, #12]

      break;
 8003f3e:	e000      	b.n	8003f42 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003f40:	bf00      	nop
  }

  return tmpreg;
 8003f42:	68fb      	ldr	r3, [r7, #12]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop

08003f50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr

08003f62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr

08003f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr

08003f86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a29      	ldr	r2, [pc, #164]	; (8004050 <TIM_Base_SetConfig+0xb8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00b      	beq.n	8003fc8 <TIM_Base_SetConfig+0x30>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb6:	d007      	beq.n	8003fc8 <TIM_Base_SetConfig+0x30>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a26      	ldr	r2, [pc, #152]	; (8004054 <TIM_Base_SetConfig+0xbc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d003      	beq.n	8003fc8 <TIM_Base_SetConfig+0x30>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a25      	ldr	r2, [pc, #148]	; (8004058 <TIM_Base_SetConfig+0xc0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d108      	bne.n	8003fda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a1c      	ldr	r2, [pc, #112]	; (8004050 <TIM_Base_SetConfig+0xb8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00b      	beq.n	8003ffa <TIM_Base_SetConfig+0x62>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe8:	d007      	beq.n	8003ffa <TIM_Base_SetConfig+0x62>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a19      	ldr	r2, [pc, #100]	; (8004054 <TIM_Base_SetConfig+0xbc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d003      	beq.n	8003ffa <TIM_Base_SetConfig+0x62>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a18      	ldr	r2, [pc, #96]	; (8004058 <TIM_Base_SetConfig+0xc0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d108      	bne.n	800400c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	4313      	orrs	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a07      	ldr	r2, [pc, #28]	; (8004050 <TIM_Base_SetConfig+0xb8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d103      	bne.n	8004040 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	615a      	str	r2, [r3, #20]
}
 8004046:	bf00      	nop
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr
 8004050:	40012c00 	.word	0x40012c00
 8004054:	40000400 	.word	0x40000400
 8004058:	40000800 	.word	0x40000800

0800405c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f023 0201 	bic.w	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4a1f      	ldr	r2, [pc, #124]	; (8004104 <TIM_TI1_SetConfig+0xa8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00b      	beq.n	80040a2 <TIM_TI1_SetConfig+0x46>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004090:	d007      	beq.n	80040a2 <TIM_TI1_SetConfig+0x46>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4a1c      	ldr	r2, [pc, #112]	; (8004108 <TIM_TI1_SetConfig+0xac>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d003      	beq.n	80040a2 <TIM_TI1_SetConfig+0x46>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4a1b      	ldr	r2, [pc, #108]	; (800410c <TIM_TI1_SetConfig+0xb0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d101      	bne.n	80040a6 <TIM_TI1_SetConfig+0x4a>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <TIM_TI1_SetConfig+0x4c>
 80040a6:	2300      	movs	r3, #0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 0303 	bic.w	r3, r3, #3
 80040b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	e003      	b.n	80040c6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f023 030a 	bic.w	r3, r3, #10
 80040e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f003 030a 	and.w	r3, r3, #10
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	621a      	str	r2, [r3, #32]
}
 80040fa:	bf00      	nop
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr
 8004104:	40012c00 	.word	0x40012c00
 8004108:	40000400 	.word	0x40000400
 800410c:	40000800 	.word	0x40000800

08004110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	f023 0201 	bic.w	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800413a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f023 030a 	bic.w	r3, r3, #10
 800414c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0210 	bic.w	r2, r3, #16
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	021b      	lsls	r3, r3, #8
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	031b      	lsls	r3, r3, #12
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	621a      	str	r2, [r3, #32]
}
 80041da:	bf00      	nop
 80041dc:	371c      	adds	r7, #28
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	f023 0210 	bic.w	r2, r3, #16
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800420e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	031b      	lsls	r3, r3, #12
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004220:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	621a      	str	r2, [r3, #32]
}
 8004238:	bf00      	nop
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004242:	b480      	push	{r7}
 8004244:	b087      	sub	sp, #28
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
 800424e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f023 0303 	bic.w	r3, r3, #3
 800426e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800427e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	b2db      	uxtb	r3, r3
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004292:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	621a      	str	r2, [r3, #32]
}
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	031b      	lsls	r3, r3, #12
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800430a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	031b      	lsls	r3, r3, #12
 8004310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr

08004330 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	f043 0307 	orr.w	r3, r3, #7
 8004352:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	609a      	str	r2, [r3, #8]
}
 800435a:	bf00      	nop
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr

08004364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800437e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	021a      	lsls	r2, r3, #8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	431a      	orrs	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4313      	orrs	r3, r2
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	609a      	str	r2, [r3, #8]
}
 8004398:	bf00      	nop
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr

080043a2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b087      	sub	sp, #28
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	2201      	movs	r2, #1
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a1a      	ldr	r2, [r3, #32]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	43db      	mvns	r3, r3
 80043c4:	401a      	ands	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1a      	ldr	r2, [r3, #32]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f003 031f 	and.w	r3, r3, #31
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	fa01 f303 	lsl.w	r3, r1, r3
 80043da:	431a      	orrs	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	621a      	str	r2, [r3, #32]
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr
	...

080043ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004400:	2302      	movs	r3, #2
 8004402:	e046      	b.n	8004492 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a16      	ldr	r2, [pc, #88]	; (800449c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00e      	beq.n	8004466 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004450:	d009      	beq.n	8004466 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a12      	ldr	r2, [pc, #72]	; (80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d004      	beq.n	8004466 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a10      	ldr	r2, [pc, #64]	; (80044a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d10c      	bne.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800446c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	4313      	orrs	r3, r2
 8004476:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr
 800449c:	40012c00 	.word	0x40012c00
 80044a0:	40000400 	.word	0x40000400
 80044a4:	40000800 	.word	0x40000800

080044a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr

080044ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <__errno>:
 80044cc:	4b01      	ldr	r3, [pc, #4]	; (80044d4 <__errno+0x8>)
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000014 	.word	0x20000014

080044d8 <__libc_init_array>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	2600      	movs	r6, #0
 80044dc:	4d0c      	ldr	r5, [pc, #48]	; (8004510 <__libc_init_array+0x38>)
 80044de:	4c0d      	ldr	r4, [pc, #52]	; (8004514 <__libc_init_array+0x3c>)
 80044e0:	1b64      	subs	r4, r4, r5
 80044e2:	10a4      	asrs	r4, r4, #2
 80044e4:	42a6      	cmp	r6, r4
 80044e6:	d109      	bne.n	80044fc <__libc_init_array+0x24>
 80044e8:	f004 fc50 	bl	8008d8c <_init>
 80044ec:	2600      	movs	r6, #0
 80044ee:	4d0a      	ldr	r5, [pc, #40]	; (8004518 <__libc_init_array+0x40>)
 80044f0:	4c0a      	ldr	r4, [pc, #40]	; (800451c <__libc_init_array+0x44>)
 80044f2:	1b64      	subs	r4, r4, r5
 80044f4:	10a4      	asrs	r4, r4, #2
 80044f6:	42a6      	cmp	r6, r4
 80044f8:	d105      	bne.n	8004506 <__libc_init_array+0x2e>
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004500:	4798      	blx	r3
 8004502:	3601      	adds	r6, #1
 8004504:	e7ee      	b.n	80044e4 <__libc_init_array+0xc>
 8004506:	f855 3b04 	ldr.w	r3, [r5], #4
 800450a:	4798      	blx	r3
 800450c:	3601      	adds	r6, #1
 800450e:	e7f2      	b.n	80044f6 <__libc_init_array+0x1e>
 8004510:	08009a04 	.word	0x08009a04
 8004514:	08009a04 	.word	0x08009a04
 8004518:	08009a04 	.word	0x08009a04
 800451c:	08009a08 	.word	0x08009a08

08004520 <memset>:
 8004520:	4603      	mov	r3, r0
 8004522:	4402      	add	r2, r0
 8004524:	4293      	cmp	r3, r2
 8004526:	d100      	bne.n	800452a <memset+0xa>
 8004528:	4770      	bx	lr
 800452a:	f803 1b01 	strb.w	r1, [r3], #1
 800452e:	e7f9      	b.n	8004524 <memset+0x4>

08004530 <__cvt>:
 8004530:	2b00      	cmp	r3, #0
 8004532:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004536:	461f      	mov	r7, r3
 8004538:	bfbb      	ittet	lt
 800453a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800453e:	461f      	movlt	r7, r3
 8004540:	2300      	movge	r3, #0
 8004542:	232d      	movlt	r3, #45	; 0x2d
 8004544:	b088      	sub	sp, #32
 8004546:	4614      	mov	r4, r2
 8004548:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800454a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800454c:	7013      	strb	r3, [r2, #0]
 800454e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004550:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004554:	f023 0820 	bic.w	r8, r3, #32
 8004558:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800455c:	d005      	beq.n	800456a <__cvt+0x3a>
 800455e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004562:	d100      	bne.n	8004566 <__cvt+0x36>
 8004564:	3501      	adds	r5, #1
 8004566:	2302      	movs	r3, #2
 8004568:	e000      	b.n	800456c <__cvt+0x3c>
 800456a:	2303      	movs	r3, #3
 800456c:	aa07      	add	r2, sp, #28
 800456e:	9204      	str	r2, [sp, #16]
 8004570:	aa06      	add	r2, sp, #24
 8004572:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004576:	e9cd 3500 	strd	r3, r5, [sp]
 800457a:	4622      	mov	r2, r4
 800457c:	463b      	mov	r3, r7
 800457e:	f001 fd83 	bl	8006088 <_dtoa_r>
 8004582:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004586:	4606      	mov	r6, r0
 8004588:	d102      	bne.n	8004590 <__cvt+0x60>
 800458a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800458c:	07db      	lsls	r3, r3, #31
 800458e:	d522      	bpl.n	80045d6 <__cvt+0xa6>
 8004590:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004594:	eb06 0905 	add.w	r9, r6, r5
 8004598:	d110      	bne.n	80045bc <__cvt+0x8c>
 800459a:	7833      	ldrb	r3, [r6, #0]
 800459c:	2b30      	cmp	r3, #48	; 0x30
 800459e:	d10a      	bne.n	80045b6 <__cvt+0x86>
 80045a0:	2200      	movs	r2, #0
 80045a2:	2300      	movs	r3, #0
 80045a4:	4620      	mov	r0, r4
 80045a6:	4639      	mov	r1, r7
 80045a8:	f7fc f9fe 	bl	80009a8 <__aeabi_dcmpeq>
 80045ac:	b918      	cbnz	r0, 80045b6 <__cvt+0x86>
 80045ae:	f1c5 0501 	rsb	r5, r5, #1
 80045b2:	f8ca 5000 	str.w	r5, [sl]
 80045b6:	f8da 3000 	ldr.w	r3, [sl]
 80045ba:	4499      	add	r9, r3
 80045bc:	2200      	movs	r2, #0
 80045be:	2300      	movs	r3, #0
 80045c0:	4620      	mov	r0, r4
 80045c2:	4639      	mov	r1, r7
 80045c4:	f7fc f9f0 	bl	80009a8 <__aeabi_dcmpeq>
 80045c8:	b108      	cbz	r0, 80045ce <__cvt+0x9e>
 80045ca:	f8cd 901c 	str.w	r9, [sp, #28]
 80045ce:	2230      	movs	r2, #48	; 0x30
 80045d0:	9b07      	ldr	r3, [sp, #28]
 80045d2:	454b      	cmp	r3, r9
 80045d4:	d307      	bcc.n	80045e6 <__cvt+0xb6>
 80045d6:	4630      	mov	r0, r6
 80045d8:	9b07      	ldr	r3, [sp, #28]
 80045da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80045dc:	1b9b      	subs	r3, r3, r6
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	b008      	add	sp, #32
 80045e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e6:	1c59      	adds	r1, r3, #1
 80045e8:	9107      	str	r1, [sp, #28]
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	e7f0      	b.n	80045d0 <__cvt+0xa0>

080045ee <__exponent>:
 80045ee:	4603      	mov	r3, r0
 80045f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045f2:	2900      	cmp	r1, #0
 80045f4:	f803 2b02 	strb.w	r2, [r3], #2
 80045f8:	bfb6      	itet	lt
 80045fa:	222d      	movlt	r2, #45	; 0x2d
 80045fc:	222b      	movge	r2, #43	; 0x2b
 80045fe:	4249      	neglt	r1, r1
 8004600:	2909      	cmp	r1, #9
 8004602:	7042      	strb	r2, [r0, #1]
 8004604:	dd2b      	ble.n	800465e <__exponent+0x70>
 8004606:	f10d 0407 	add.w	r4, sp, #7
 800460a:	46a4      	mov	ip, r4
 800460c:	270a      	movs	r7, #10
 800460e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004612:	460a      	mov	r2, r1
 8004614:	46a6      	mov	lr, r4
 8004616:	fb07 1516 	mls	r5, r7, r6, r1
 800461a:	2a63      	cmp	r2, #99	; 0x63
 800461c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004620:	4631      	mov	r1, r6
 8004622:	f104 34ff 	add.w	r4, r4, #4294967295
 8004626:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800462a:	dcf0      	bgt.n	800460e <__exponent+0x20>
 800462c:	3130      	adds	r1, #48	; 0x30
 800462e:	f1ae 0502 	sub.w	r5, lr, #2
 8004632:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004636:	4629      	mov	r1, r5
 8004638:	1c44      	adds	r4, r0, #1
 800463a:	4561      	cmp	r1, ip
 800463c:	d30a      	bcc.n	8004654 <__exponent+0x66>
 800463e:	f10d 0209 	add.w	r2, sp, #9
 8004642:	eba2 020e 	sub.w	r2, r2, lr
 8004646:	4565      	cmp	r5, ip
 8004648:	bf88      	it	hi
 800464a:	2200      	movhi	r2, #0
 800464c:	4413      	add	r3, r2
 800464e:	1a18      	subs	r0, r3, r0
 8004650:	b003      	add	sp, #12
 8004652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004654:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004658:	f804 2f01 	strb.w	r2, [r4, #1]!
 800465c:	e7ed      	b.n	800463a <__exponent+0x4c>
 800465e:	2330      	movs	r3, #48	; 0x30
 8004660:	3130      	adds	r1, #48	; 0x30
 8004662:	7083      	strb	r3, [r0, #2]
 8004664:	70c1      	strb	r1, [r0, #3]
 8004666:	1d03      	adds	r3, r0, #4
 8004668:	e7f1      	b.n	800464e <__exponent+0x60>
	...

0800466c <_printf_float>:
 800466c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004670:	b091      	sub	sp, #68	; 0x44
 8004672:	460c      	mov	r4, r1
 8004674:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004678:	4616      	mov	r6, r2
 800467a:	461f      	mov	r7, r3
 800467c:	4605      	mov	r5, r0
 800467e:	f002 fe57 	bl	8007330 <_localeconv_r>
 8004682:	6803      	ldr	r3, [r0, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	9309      	str	r3, [sp, #36]	; 0x24
 8004688:	f7fb fd62 	bl	8000150 <strlen>
 800468c:	2300      	movs	r3, #0
 800468e:	930e      	str	r3, [sp, #56]	; 0x38
 8004690:	f8d8 3000 	ldr.w	r3, [r8]
 8004694:	900a      	str	r0, [sp, #40]	; 0x28
 8004696:	3307      	adds	r3, #7
 8004698:	f023 0307 	bic.w	r3, r3, #7
 800469c:	f103 0208 	add.w	r2, r3, #8
 80046a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80046a4:	f8d4 b000 	ldr.w	fp, [r4]
 80046a8:	f8c8 2000 	str.w	r2, [r8]
 80046ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80046b4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80046b8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80046bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80046be:	f04f 32ff 	mov.w	r2, #4294967295
 80046c2:	4640      	mov	r0, r8
 80046c4:	4b9c      	ldr	r3, [pc, #624]	; (8004938 <_printf_float+0x2cc>)
 80046c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046c8:	f7fc f9a0 	bl	8000a0c <__aeabi_dcmpun>
 80046cc:	bb70      	cbnz	r0, 800472c <_printf_float+0xc0>
 80046ce:	f04f 32ff 	mov.w	r2, #4294967295
 80046d2:	4640      	mov	r0, r8
 80046d4:	4b98      	ldr	r3, [pc, #608]	; (8004938 <_printf_float+0x2cc>)
 80046d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046d8:	f7fc f97a 	bl	80009d0 <__aeabi_dcmple>
 80046dc:	bb30      	cbnz	r0, 800472c <_printf_float+0xc0>
 80046de:	2200      	movs	r2, #0
 80046e0:	2300      	movs	r3, #0
 80046e2:	4640      	mov	r0, r8
 80046e4:	4651      	mov	r1, sl
 80046e6:	f7fc f969 	bl	80009bc <__aeabi_dcmplt>
 80046ea:	b110      	cbz	r0, 80046f2 <_printf_float+0x86>
 80046ec:	232d      	movs	r3, #45	; 0x2d
 80046ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046f2:	4b92      	ldr	r3, [pc, #584]	; (800493c <_printf_float+0x2d0>)
 80046f4:	4892      	ldr	r0, [pc, #584]	; (8004940 <_printf_float+0x2d4>)
 80046f6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80046fa:	bf94      	ite	ls
 80046fc:	4698      	movls	r8, r3
 80046fe:	4680      	movhi	r8, r0
 8004700:	2303      	movs	r3, #3
 8004702:	f04f 0a00 	mov.w	sl, #0
 8004706:	6123      	str	r3, [r4, #16]
 8004708:	f02b 0304 	bic.w	r3, fp, #4
 800470c:	6023      	str	r3, [r4, #0]
 800470e:	4633      	mov	r3, r6
 8004710:	4621      	mov	r1, r4
 8004712:	4628      	mov	r0, r5
 8004714:	9700      	str	r7, [sp, #0]
 8004716:	aa0f      	add	r2, sp, #60	; 0x3c
 8004718:	f000 f9d4 	bl	8004ac4 <_printf_common>
 800471c:	3001      	adds	r0, #1
 800471e:	f040 8090 	bne.w	8004842 <_printf_float+0x1d6>
 8004722:	f04f 30ff 	mov.w	r0, #4294967295
 8004726:	b011      	add	sp, #68	; 0x44
 8004728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800472c:	4642      	mov	r2, r8
 800472e:	4653      	mov	r3, sl
 8004730:	4640      	mov	r0, r8
 8004732:	4651      	mov	r1, sl
 8004734:	f7fc f96a 	bl	8000a0c <__aeabi_dcmpun>
 8004738:	b148      	cbz	r0, 800474e <_printf_float+0xe2>
 800473a:	f1ba 0f00 	cmp.w	sl, #0
 800473e:	bfb8      	it	lt
 8004740:	232d      	movlt	r3, #45	; 0x2d
 8004742:	4880      	ldr	r0, [pc, #512]	; (8004944 <_printf_float+0x2d8>)
 8004744:	bfb8      	it	lt
 8004746:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800474a:	4b7f      	ldr	r3, [pc, #508]	; (8004948 <_printf_float+0x2dc>)
 800474c:	e7d3      	b.n	80046f6 <_printf_float+0x8a>
 800474e:	6863      	ldr	r3, [r4, #4]
 8004750:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	d142      	bne.n	80047de <_printf_float+0x172>
 8004758:	2306      	movs	r3, #6
 800475a:	6063      	str	r3, [r4, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	9206      	str	r2, [sp, #24]
 8004760:	aa0e      	add	r2, sp, #56	; 0x38
 8004762:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004766:	aa0d      	add	r2, sp, #52	; 0x34
 8004768:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800476c:	9203      	str	r2, [sp, #12]
 800476e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004772:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004776:	6023      	str	r3, [r4, #0]
 8004778:	6863      	ldr	r3, [r4, #4]
 800477a:	4642      	mov	r2, r8
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	4628      	mov	r0, r5
 8004780:	4653      	mov	r3, sl
 8004782:	910b      	str	r1, [sp, #44]	; 0x2c
 8004784:	f7ff fed4 	bl	8004530 <__cvt>
 8004788:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800478a:	4680      	mov	r8, r0
 800478c:	2947      	cmp	r1, #71	; 0x47
 800478e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004790:	d108      	bne.n	80047a4 <_printf_float+0x138>
 8004792:	1cc8      	adds	r0, r1, #3
 8004794:	db02      	blt.n	800479c <_printf_float+0x130>
 8004796:	6863      	ldr	r3, [r4, #4]
 8004798:	4299      	cmp	r1, r3
 800479a:	dd40      	ble.n	800481e <_printf_float+0x1b2>
 800479c:	f1a9 0902 	sub.w	r9, r9, #2
 80047a0:	fa5f f989 	uxtb.w	r9, r9
 80047a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80047a8:	d81f      	bhi.n	80047ea <_printf_float+0x17e>
 80047aa:	464a      	mov	r2, r9
 80047ac:	3901      	subs	r1, #1
 80047ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047b2:	910d      	str	r1, [sp, #52]	; 0x34
 80047b4:	f7ff ff1b 	bl	80045ee <__exponent>
 80047b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047ba:	4682      	mov	sl, r0
 80047bc:	1813      	adds	r3, r2, r0
 80047be:	2a01      	cmp	r2, #1
 80047c0:	6123      	str	r3, [r4, #16]
 80047c2:	dc02      	bgt.n	80047ca <_printf_float+0x15e>
 80047c4:	6822      	ldr	r2, [r4, #0]
 80047c6:	07d2      	lsls	r2, r2, #31
 80047c8:	d501      	bpl.n	80047ce <_printf_float+0x162>
 80047ca:	3301      	adds	r3, #1
 80047cc:	6123      	str	r3, [r4, #16]
 80047ce:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d09b      	beq.n	800470e <_printf_float+0xa2>
 80047d6:	232d      	movs	r3, #45	; 0x2d
 80047d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047dc:	e797      	b.n	800470e <_printf_float+0xa2>
 80047de:	2947      	cmp	r1, #71	; 0x47
 80047e0:	d1bc      	bne.n	800475c <_printf_float+0xf0>
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1ba      	bne.n	800475c <_printf_float+0xf0>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e7b7      	b.n	800475a <_printf_float+0xee>
 80047ea:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80047ee:	d118      	bne.n	8004822 <_printf_float+0x1b6>
 80047f0:	2900      	cmp	r1, #0
 80047f2:	6863      	ldr	r3, [r4, #4]
 80047f4:	dd0b      	ble.n	800480e <_printf_float+0x1a2>
 80047f6:	6121      	str	r1, [r4, #16]
 80047f8:	b913      	cbnz	r3, 8004800 <_printf_float+0x194>
 80047fa:	6822      	ldr	r2, [r4, #0]
 80047fc:	07d0      	lsls	r0, r2, #31
 80047fe:	d502      	bpl.n	8004806 <_printf_float+0x19a>
 8004800:	3301      	adds	r3, #1
 8004802:	440b      	add	r3, r1
 8004804:	6123      	str	r3, [r4, #16]
 8004806:	f04f 0a00 	mov.w	sl, #0
 800480a:	65a1      	str	r1, [r4, #88]	; 0x58
 800480c:	e7df      	b.n	80047ce <_printf_float+0x162>
 800480e:	b913      	cbnz	r3, 8004816 <_printf_float+0x1aa>
 8004810:	6822      	ldr	r2, [r4, #0]
 8004812:	07d2      	lsls	r2, r2, #31
 8004814:	d501      	bpl.n	800481a <_printf_float+0x1ae>
 8004816:	3302      	adds	r3, #2
 8004818:	e7f4      	b.n	8004804 <_printf_float+0x198>
 800481a:	2301      	movs	r3, #1
 800481c:	e7f2      	b.n	8004804 <_printf_float+0x198>
 800481e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004824:	4299      	cmp	r1, r3
 8004826:	db05      	blt.n	8004834 <_printf_float+0x1c8>
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	6121      	str	r1, [r4, #16]
 800482c:	07d8      	lsls	r0, r3, #31
 800482e:	d5ea      	bpl.n	8004806 <_printf_float+0x19a>
 8004830:	1c4b      	adds	r3, r1, #1
 8004832:	e7e7      	b.n	8004804 <_printf_float+0x198>
 8004834:	2900      	cmp	r1, #0
 8004836:	bfcc      	ite	gt
 8004838:	2201      	movgt	r2, #1
 800483a:	f1c1 0202 	rsble	r2, r1, #2
 800483e:	4413      	add	r3, r2
 8004840:	e7e0      	b.n	8004804 <_printf_float+0x198>
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	055a      	lsls	r2, r3, #21
 8004846:	d407      	bmi.n	8004858 <_printf_float+0x1ec>
 8004848:	6923      	ldr	r3, [r4, #16]
 800484a:	4642      	mov	r2, r8
 800484c:	4631      	mov	r1, r6
 800484e:	4628      	mov	r0, r5
 8004850:	47b8      	blx	r7
 8004852:	3001      	adds	r0, #1
 8004854:	d12b      	bne.n	80048ae <_printf_float+0x242>
 8004856:	e764      	b.n	8004722 <_printf_float+0xb6>
 8004858:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800485c:	f240 80dd 	bls.w	8004a1a <_printf_float+0x3ae>
 8004860:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004864:	2200      	movs	r2, #0
 8004866:	2300      	movs	r3, #0
 8004868:	f7fc f89e 	bl	80009a8 <__aeabi_dcmpeq>
 800486c:	2800      	cmp	r0, #0
 800486e:	d033      	beq.n	80048d8 <_printf_float+0x26c>
 8004870:	2301      	movs	r3, #1
 8004872:	4631      	mov	r1, r6
 8004874:	4628      	mov	r0, r5
 8004876:	4a35      	ldr	r2, [pc, #212]	; (800494c <_printf_float+0x2e0>)
 8004878:	47b8      	blx	r7
 800487a:	3001      	adds	r0, #1
 800487c:	f43f af51 	beq.w	8004722 <_printf_float+0xb6>
 8004880:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004884:	429a      	cmp	r2, r3
 8004886:	db02      	blt.n	800488e <_printf_float+0x222>
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	07d8      	lsls	r0, r3, #31
 800488c:	d50f      	bpl.n	80048ae <_printf_float+0x242>
 800488e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004892:	4631      	mov	r1, r6
 8004894:	4628      	mov	r0, r5
 8004896:	47b8      	blx	r7
 8004898:	3001      	adds	r0, #1
 800489a:	f43f af42 	beq.w	8004722 <_printf_float+0xb6>
 800489e:	f04f 0800 	mov.w	r8, #0
 80048a2:	f104 091a 	add.w	r9, r4, #26
 80048a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048a8:	3b01      	subs	r3, #1
 80048aa:	4543      	cmp	r3, r8
 80048ac:	dc09      	bgt.n	80048c2 <_printf_float+0x256>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	079b      	lsls	r3, r3, #30
 80048b2:	f100 8102 	bmi.w	8004aba <_printf_float+0x44e>
 80048b6:	68e0      	ldr	r0, [r4, #12]
 80048b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048ba:	4298      	cmp	r0, r3
 80048bc:	bfb8      	it	lt
 80048be:	4618      	movlt	r0, r3
 80048c0:	e731      	b.n	8004726 <_printf_float+0xba>
 80048c2:	2301      	movs	r3, #1
 80048c4:	464a      	mov	r2, r9
 80048c6:	4631      	mov	r1, r6
 80048c8:	4628      	mov	r0, r5
 80048ca:	47b8      	blx	r7
 80048cc:	3001      	adds	r0, #1
 80048ce:	f43f af28 	beq.w	8004722 <_printf_float+0xb6>
 80048d2:	f108 0801 	add.w	r8, r8, #1
 80048d6:	e7e6      	b.n	80048a6 <_printf_float+0x23a>
 80048d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048da:	2b00      	cmp	r3, #0
 80048dc:	dc38      	bgt.n	8004950 <_printf_float+0x2e4>
 80048de:	2301      	movs	r3, #1
 80048e0:	4631      	mov	r1, r6
 80048e2:	4628      	mov	r0, r5
 80048e4:	4a19      	ldr	r2, [pc, #100]	; (800494c <_printf_float+0x2e0>)
 80048e6:	47b8      	blx	r7
 80048e8:	3001      	adds	r0, #1
 80048ea:	f43f af1a 	beq.w	8004722 <_printf_float+0xb6>
 80048ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80048f2:	4313      	orrs	r3, r2
 80048f4:	d102      	bne.n	80048fc <_printf_float+0x290>
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	07d9      	lsls	r1, r3, #31
 80048fa:	d5d8      	bpl.n	80048ae <_printf_float+0x242>
 80048fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004900:	4631      	mov	r1, r6
 8004902:	4628      	mov	r0, r5
 8004904:	47b8      	blx	r7
 8004906:	3001      	adds	r0, #1
 8004908:	f43f af0b 	beq.w	8004722 <_printf_float+0xb6>
 800490c:	f04f 0900 	mov.w	r9, #0
 8004910:	f104 0a1a 	add.w	sl, r4, #26
 8004914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004916:	425b      	negs	r3, r3
 8004918:	454b      	cmp	r3, r9
 800491a:	dc01      	bgt.n	8004920 <_printf_float+0x2b4>
 800491c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800491e:	e794      	b.n	800484a <_printf_float+0x1de>
 8004920:	2301      	movs	r3, #1
 8004922:	4652      	mov	r2, sl
 8004924:	4631      	mov	r1, r6
 8004926:	4628      	mov	r0, r5
 8004928:	47b8      	blx	r7
 800492a:	3001      	adds	r0, #1
 800492c:	f43f aef9 	beq.w	8004722 <_printf_float+0xb6>
 8004930:	f109 0901 	add.w	r9, r9, #1
 8004934:	e7ee      	b.n	8004914 <_printf_float+0x2a8>
 8004936:	bf00      	nop
 8004938:	7fefffff 	.word	0x7fefffff
 800493c:	08009564 	.word	0x08009564
 8004940:	08009568 	.word	0x08009568
 8004944:	08009570 	.word	0x08009570
 8004948:	0800956c 	.word	0x0800956c
 800494c:	08009574 	.word	0x08009574
 8004950:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004952:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004954:	429a      	cmp	r2, r3
 8004956:	bfa8      	it	ge
 8004958:	461a      	movge	r2, r3
 800495a:	2a00      	cmp	r2, #0
 800495c:	4691      	mov	r9, r2
 800495e:	dc37      	bgt.n	80049d0 <_printf_float+0x364>
 8004960:	f04f 0b00 	mov.w	fp, #0
 8004964:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004968:	f104 021a 	add.w	r2, r4, #26
 800496c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004970:	ebaa 0309 	sub.w	r3, sl, r9
 8004974:	455b      	cmp	r3, fp
 8004976:	dc33      	bgt.n	80049e0 <_printf_float+0x374>
 8004978:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800497c:	429a      	cmp	r2, r3
 800497e:	db3b      	blt.n	80049f8 <_printf_float+0x38c>
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	07da      	lsls	r2, r3, #31
 8004984:	d438      	bmi.n	80049f8 <_printf_float+0x38c>
 8004986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004988:	990d      	ldr	r1, [sp, #52]	; 0x34
 800498a:	eba3 020a 	sub.w	r2, r3, sl
 800498e:	eba3 0901 	sub.w	r9, r3, r1
 8004992:	4591      	cmp	r9, r2
 8004994:	bfa8      	it	ge
 8004996:	4691      	movge	r9, r2
 8004998:	f1b9 0f00 	cmp.w	r9, #0
 800499c:	dc34      	bgt.n	8004a08 <_printf_float+0x39c>
 800499e:	f04f 0800 	mov.w	r8, #0
 80049a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049a6:	f104 0a1a 	add.w	sl, r4, #26
 80049aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049ae:	1a9b      	subs	r3, r3, r2
 80049b0:	eba3 0309 	sub.w	r3, r3, r9
 80049b4:	4543      	cmp	r3, r8
 80049b6:	f77f af7a 	ble.w	80048ae <_printf_float+0x242>
 80049ba:	2301      	movs	r3, #1
 80049bc:	4652      	mov	r2, sl
 80049be:	4631      	mov	r1, r6
 80049c0:	4628      	mov	r0, r5
 80049c2:	47b8      	blx	r7
 80049c4:	3001      	adds	r0, #1
 80049c6:	f43f aeac 	beq.w	8004722 <_printf_float+0xb6>
 80049ca:	f108 0801 	add.w	r8, r8, #1
 80049ce:	e7ec      	b.n	80049aa <_printf_float+0x33e>
 80049d0:	4613      	mov	r3, r2
 80049d2:	4631      	mov	r1, r6
 80049d4:	4642      	mov	r2, r8
 80049d6:	4628      	mov	r0, r5
 80049d8:	47b8      	blx	r7
 80049da:	3001      	adds	r0, #1
 80049dc:	d1c0      	bne.n	8004960 <_printf_float+0x2f4>
 80049de:	e6a0      	b.n	8004722 <_printf_float+0xb6>
 80049e0:	2301      	movs	r3, #1
 80049e2:	4631      	mov	r1, r6
 80049e4:	4628      	mov	r0, r5
 80049e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80049e8:	47b8      	blx	r7
 80049ea:	3001      	adds	r0, #1
 80049ec:	f43f ae99 	beq.w	8004722 <_printf_float+0xb6>
 80049f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049f2:	f10b 0b01 	add.w	fp, fp, #1
 80049f6:	e7b9      	b.n	800496c <_printf_float+0x300>
 80049f8:	4631      	mov	r1, r6
 80049fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049fe:	4628      	mov	r0, r5
 8004a00:	47b8      	blx	r7
 8004a02:	3001      	adds	r0, #1
 8004a04:	d1bf      	bne.n	8004986 <_printf_float+0x31a>
 8004a06:	e68c      	b.n	8004722 <_printf_float+0xb6>
 8004a08:	464b      	mov	r3, r9
 8004a0a:	4631      	mov	r1, r6
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	eb08 020a 	add.w	r2, r8, sl
 8004a12:	47b8      	blx	r7
 8004a14:	3001      	adds	r0, #1
 8004a16:	d1c2      	bne.n	800499e <_printf_float+0x332>
 8004a18:	e683      	b.n	8004722 <_printf_float+0xb6>
 8004a1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a1c:	2a01      	cmp	r2, #1
 8004a1e:	dc01      	bgt.n	8004a24 <_printf_float+0x3b8>
 8004a20:	07db      	lsls	r3, r3, #31
 8004a22:	d537      	bpl.n	8004a94 <_printf_float+0x428>
 8004a24:	2301      	movs	r3, #1
 8004a26:	4642      	mov	r2, r8
 8004a28:	4631      	mov	r1, r6
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	47b8      	blx	r7
 8004a2e:	3001      	adds	r0, #1
 8004a30:	f43f ae77 	beq.w	8004722 <_printf_float+0xb6>
 8004a34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a38:	4631      	mov	r1, r6
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	47b8      	blx	r7
 8004a3e:	3001      	adds	r0, #1
 8004a40:	f43f ae6f 	beq.w	8004722 <_printf_float+0xb6>
 8004a44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f7fb ffac 	bl	80009a8 <__aeabi_dcmpeq>
 8004a50:	b9d8      	cbnz	r0, 8004a8a <_printf_float+0x41e>
 8004a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a54:	f108 0201 	add.w	r2, r8, #1
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	4631      	mov	r1, r6
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	47b8      	blx	r7
 8004a60:	3001      	adds	r0, #1
 8004a62:	d10e      	bne.n	8004a82 <_printf_float+0x416>
 8004a64:	e65d      	b.n	8004722 <_printf_float+0xb6>
 8004a66:	2301      	movs	r3, #1
 8004a68:	464a      	mov	r2, r9
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	47b8      	blx	r7
 8004a70:	3001      	adds	r0, #1
 8004a72:	f43f ae56 	beq.w	8004722 <_printf_float+0xb6>
 8004a76:	f108 0801 	add.w	r8, r8, #1
 8004a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	4543      	cmp	r3, r8
 8004a80:	dcf1      	bgt.n	8004a66 <_printf_float+0x3fa>
 8004a82:	4653      	mov	r3, sl
 8004a84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a88:	e6e0      	b.n	800484c <_printf_float+0x1e0>
 8004a8a:	f04f 0800 	mov.w	r8, #0
 8004a8e:	f104 091a 	add.w	r9, r4, #26
 8004a92:	e7f2      	b.n	8004a7a <_printf_float+0x40e>
 8004a94:	2301      	movs	r3, #1
 8004a96:	4642      	mov	r2, r8
 8004a98:	e7df      	b.n	8004a5a <_printf_float+0x3ee>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	464a      	mov	r2, r9
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	47b8      	blx	r7
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	f43f ae3c 	beq.w	8004722 <_printf_float+0xb6>
 8004aaa:	f108 0801 	add.w	r8, r8, #1
 8004aae:	68e3      	ldr	r3, [r4, #12]
 8004ab0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004ab2:	1a5b      	subs	r3, r3, r1
 8004ab4:	4543      	cmp	r3, r8
 8004ab6:	dcf0      	bgt.n	8004a9a <_printf_float+0x42e>
 8004ab8:	e6fd      	b.n	80048b6 <_printf_float+0x24a>
 8004aba:	f04f 0800 	mov.w	r8, #0
 8004abe:	f104 0919 	add.w	r9, r4, #25
 8004ac2:	e7f4      	b.n	8004aae <_printf_float+0x442>

08004ac4 <_printf_common>:
 8004ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac8:	4616      	mov	r6, r2
 8004aca:	4699      	mov	r9, r3
 8004acc:	688a      	ldr	r2, [r1, #8]
 8004ace:	690b      	ldr	r3, [r1, #16]
 8004ad0:	4607      	mov	r7, r0
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	bfb8      	it	lt
 8004ad6:	4613      	movlt	r3, r2
 8004ad8:	6033      	str	r3, [r6, #0]
 8004ada:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ade:	460c      	mov	r4, r1
 8004ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ae4:	b10a      	cbz	r2, 8004aea <_printf_common+0x26>
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	6033      	str	r3, [r6, #0]
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	0699      	lsls	r1, r3, #26
 8004aee:	bf42      	ittt	mi
 8004af0:	6833      	ldrmi	r3, [r6, #0]
 8004af2:	3302      	addmi	r3, #2
 8004af4:	6033      	strmi	r3, [r6, #0]
 8004af6:	6825      	ldr	r5, [r4, #0]
 8004af8:	f015 0506 	ands.w	r5, r5, #6
 8004afc:	d106      	bne.n	8004b0c <_printf_common+0x48>
 8004afe:	f104 0a19 	add.w	sl, r4, #25
 8004b02:	68e3      	ldr	r3, [r4, #12]
 8004b04:	6832      	ldr	r2, [r6, #0]
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	42ab      	cmp	r3, r5
 8004b0a:	dc28      	bgt.n	8004b5e <_printf_common+0x9a>
 8004b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b10:	1e13      	subs	r3, r2, #0
 8004b12:	6822      	ldr	r2, [r4, #0]
 8004b14:	bf18      	it	ne
 8004b16:	2301      	movne	r3, #1
 8004b18:	0692      	lsls	r2, r2, #26
 8004b1a:	d42d      	bmi.n	8004b78 <_printf_common+0xb4>
 8004b1c:	4649      	mov	r1, r9
 8004b1e:	4638      	mov	r0, r7
 8004b20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b24:	47c0      	blx	r8
 8004b26:	3001      	adds	r0, #1
 8004b28:	d020      	beq.n	8004b6c <_printf_common+0xa8>
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	68e5      	ldr	r5, [r4, #12]
 8004b2e:	f003 0306 	and.w	r3, r3, #6
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	bf18      	it	ne
 8004b36:	2500      	movne	r5, #0
 8004b38:	6832      	ldr	r2, [r6, #0]
 8004b3a:	f04f 0600 	mov.w	r6, #0
 8004b3e:	68a3      	ldr	r3, [r4, #8]
 8004b40:	bf08      	it	eq
 8004b42:	1aad      	subeq	r5, r5, r2
 8004b44:	6922      	ldr	r2, [r4, #16]
 8004b46:	bf08      	it	eq
 8004b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	bfc4      	itt	gt
 8004b50:	1a9b      	subgt	r3, r3, r2
 8004b52:	18ed      	addgt	r5, r5, r3
 8004b54:	341a      	adds	r4, #26
 8004b56:	42b5      	cmp	r5, r6
 8004b58:	d11a      	bne.n	8004b90 <_printf_common+0xcc>
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	e008      	b.n	8004b70 <_printf_common+0xac>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	4652      	mov	r2, sl
 8004b62:	4649      	mov	r1, r9
 8004b64:	4638      	mov	r0, r7
 8004b66:	47c0      	blx	r8
 8004b68:	3001      	adds	r0, #1
 8004b6a:	d103      	bne.n	8004b74 <_printf_common+0xb0>
 8004b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b74:	3501      	adds	r5, #1
 8004b76:	e7c4      	b.n	8004b02 <_printf_common+0x3e>
 8004b78:	2030      	movs	r0, #48	; 0x30
 8004b7a:	18e1      	adds	r1, r4, r3
 8004b7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b86:	4422      	add	r2, r4
 8004b88:	3302      	adds	r3, #2
 8004b8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b8e:	e7c5      	b.n	8004b1c <_printf_common+0x58>
 8004b90:	2301      	movs	r3, #1
 8004b92:	4622      	mov	r2, r4
 8004b94:	4649      	mov	r1, r9
 8004b96:	4638      	mov	r0, r7
 8004b98:	47c0      	blx	r8
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	d0e6      	beq.n	8004b6c <_printf_common+0xa8>
 8004b9e:	3601      	adds	r6, #1
 8004ba0:	e7d9      	b.n	8004b56 <_printf_common+0x92>
	...

08004ba4 <_printf_i>:
 8004ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba8:	7e0f      	ldrb	r7, [r1, #24]
 8004baa:	4691      	mov	r9, r2
 8004bac:	2f78      	cmp	r7, #120	; 0x78
 8004bae:	4680      	mov	r8, r0
 8004bb0:	460c      	mov	r4, r1
 8004bb2:	469a      	mov	sl, r3
 8004bb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bba:	d807      	bhi.n	8004bcc <_printf_i+0x28>
 8004bbc:	2f62      	cmp	r7, #98	; 0x62
 8004bbe:	d80a      	bhi.n	8004bd6 <_printf_i+0x32>
 8004bc0:	2f00      	cmp	r7, #0
 8004bc2:	f000 80d9 	beq.w	8004d78 <_printf_i+0x1d4>
 8004bc6:	2f58      	cmp	r7, #88	; 0x58
 8004bc8:	f000 80a4 	beq.w	8004d14 <_printf_i+0x170>
 8004bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bd4:	e03a      	b.n	8004c4c <_printf_i+0xa8>
 8004bd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bda:	2b15      	cmp	r3, #21
 8004bdc:	d8f6      	bhi.n	8004bcc <_printf_i+0x28>
 8004bde:	a101      	add	r1, pc, #4	; (adr r1, 8004be4 <_printf_i+0x40>)
 8004be0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004be4:	08004c3d 	.word	0x08004c3d
 8004be8:	08004c51 	.word	0x08004c51
 8004bec:	08004bcd 	.word	0x08004bcd
 8004bf0:	08004bcd 	.word	0x08004bcd
 8004bf4:	08004bcd 	.word	0x08004bcd
 8004bf8:	08004bcd 	.word	0x08004bcd
 8004bfc:	08004c51 	.word	0x08004c51
 8004c00:	08004bcd 	.word	0x08004bcd
 8004c04:	08004bcd 	.word	0x08004bcd
 8004c08:	08004bcd 	.word	0x08004bcd
 8004c0c:	08004bcd 	.word	0x08004bcd
 8004c10:	08004d5f 	.word	0x08004d5f
 8004c14:	08004c81 	.word	0x08004c81
 8004c18:	08004d41 	.word	0x08004d41
 8004c1c:	08004bcd 	.word	0x08004bcd
 8004c20:	08004bcd 	.word	0x08004bcd
 8004c24:	08004d81 	.word	0x08004d81
 8004c28:	08004bcd 	.word	0x08004bcd
 8004c2c:	08004c81 	.word	0x08004c81
 8004c30:	08004bcd 	.word	0x08004bcd
 8004c34:	08004bcd 	.word	0x08004bcd
 8004c38:	08004d49 	.word	0x08004d49
 8004c3c:	682b      	ldr	r3, [r5, #0]
 8004c3e:	1d1a      	adds	r2, r3, #4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	602a      	str	r2, [r5, #0]
 8004c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e0a4      	b.n	8004d9a <_printf_i+0x1f6>
 8004c50:	6820      	ldr	r0, [r4, #0]
 8004c52:	6829      	ldr	r1, [r5, #0]
 8004c54:	0606      	lsls	r6, r0, #24
 8004c56:	f101 0304 	add.w	r3, r1, #4
 8004c5a:	d50a      	bpl.n	8004c72 <_printf_i+0xce>
 8004c5c:	680e      	ldr	r6, [r1, #0]
 8004c5e:	602b      	str	r3, [r5, #0]
 8004c60:	2e00      	cmp	r6, #0
 8004c62:	da03      	bge.n	8004c6c <_printf_i+0xc8>
 8004c64:	232d      	movs	r3, #45	; 0x2d
 8004c66:	4276      	negs	r6, r6
 8004c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c6c:	230a      	movs	r3, #10
 8004c6e:	485e      	ldr	r0, [pc, #376]	; (8004de8 <_printf_i+0x244>)
 8004c70:	e019      	b.n	8004ca6 <_printf_i+0x102>
 8004c72:	680e      	ldr	r6, [r1, #0]
 8004c74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c78:	602b      	str	r3, [r5, #0]
 8004c7a:	bf18      	it	ne
 8004c7c:	b236      	sxthne	r6, r6
 8004c7e:	e7ef      	b.n	8004c60 <_printf_i+0xbc>
 8004c80:	682b      	ldr	r3, [r5, #0]
 8004c82:	6820      	ldr	r0, [r4, #0]
 8004c84:	1d19      	adds	r1, r3, #4
 8004c86:	6029      	str	r1, [r5, #0]
 8004c88:	0601      	lsls	r1, r0, #24
 8004c8a:	d501      	bpl.n	8004c90 <_printf_i+0xec>
 8004c8c:	681e      	ldr	r6, [r3, #0]
 8004c8e:	e002      	b.n	8004c96 <_printf_i+0xf2>
 8004c90:	0646      	lsls	r6, r0, #25
 8004c92:	d5fb      	bpl.n	8004c8c <_printf_i+0xe8>
 8004c94:	881e      	ldrh	r6, [r3, #0]
 8004c96:	2f6f      	cmp	r7, #111	; 0x6f
 8004c98:	bf0c      	ite	eq
 8004c9a:	2308      	moveq	r3, #8
 8004c9c:	230a      	movne	r3, #10
 8004c9e:	4852      	ldr	r0, [pc, #328]	; (8004de8 <_printf_i+0x244>)
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ca6:	6865      	ldr	r5, [r4, #4]
 8004ca8:	2d00      	cmp	r5, #0
 8004caa:	bfa8      	it	ge
 8004cac:	6821      	ldrge	r1, [r4, #0]
 8004cae:	60a5      	str	r5, [r4, #8]
 8004cb0:	bfa4      	itt	ge
 8004cb2:	f021 0104 	bicge.w	r1, r1, #4
 8004cb6:	6021      	strge	r1, [r4, #0]
 8004cb8:	b90e      	cbnz	r6, 8004cbe <_printf_i+0x11a>
 8004cba:	2d00      	cmp	r5, #0
 8004cbc:	d04d      	beq.n	8004d5a <_printf_i+0x1b6>
 8004cbe:	4615      	mov	r5, r2
 8004cc0:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cc4:	fb03 6711 	mls	r7, r3, r1, r6
 8004cc8:	5dc7      	ldrb	r7, [r0, r7]
 8004cca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cce:	4637      	mov	r7, r6
 8004cd0:	42bb      	cmp	r3, r7
 8004cd2:	460e      	mov	r6, r1
 8004cd4:	d9f4      	bls.n	8004cc0 <_printf_i+0x11c>
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d10b      	bne.n	8004cf2 <_printf_i+0x14e>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	07de      	lsls	r6, r3, #31
 8004cde:	d508      	bpl.n	8004cf2 <_printf_i+0x14e>
 8004ce0:	6923      	ldr	r3, [r4, #16]
 8004ce2:	6861      	ldr	r1, [r4, #4]
 8004ce4:	4299      	cmp	r1, r3
 8004ce6:	bfde      	ittt	le
 8004ce8:	2330      	movle	r3, #48	; 0x30
 8004cea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cf2:	1b52      	subs	r2, r2, r5
 8004cf4:	6122      	str	r2, [r4, #16]
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4640      	mov	r0, r8
 8004cfc:	f8cd a000 	str.w	sl, [sp]
 8004d00:	aa03      	add	r2, sp, #12
 8004d02:	f7ff fedf 	bl	8004ac4 <_printf_common>
 8004d06:	3001      	adds	r0, #1
 8004d08:	d14c      	bne.n	8004da4 <_printf_i+0x200>
 8004d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0e:	b004      	add	sp, #16
 8004d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d14:	4834      	ldr	r0, [pc, #208]	; (8004de8 <_printf_i+0x244>)
 8004d16:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d1a:	6829      	ldr	r1, [r5, #0]
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d22:	6029      	str	r1, [r5, #0]
 8004d24:	061d      	lsls	r5, r3, #24
 8004d26:	d514      	bpl.n	8004d52 <_printf_i+0x1ae>
 8004d28:	07df      	lsls	r7, r3, #31
 8004d2a:	bf44      	itt	mi
 8004d2c:	f043 0320 	orrmi.w	r3, r3, #32
 8004d30:	6023      	strmi	r3, [r4, #0]
 8004d32:	b91e      	cbnz	r6, 8004d3c <_printf_i+0x198>
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	f023 0320 	bic.w	r3, r3, #32
 8004d3a:	6023      	str	r3, [r4, #0]
 8004d3c:	2310      	movs	r3, #16
 8004d3e:	e7af      	b.n	8004ca0 <_printf_i+0xfc>
 8004d40:	6823      	ldr	r3, [r4, #0]
 8004d42:	f043 0320 	orr.w	r3, r3, #32
 8004d46:	6023      	str	r3, [r4, #0]
 8004d48:	2378      	movs	r3, #120	; 0x78
 8004d4a:	4828      	ldr	r0, [pc, #160]	; (8004dec <_printf_i+0x248>)
 8004d4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d50:	e7e3      	b.n	8004d1a <_printf_i+0x176>
 8004d52:	0659      	lsls	r1, r3, #25
 8004d54:	bf48      	it	mi
 8004d56:	b2b6      	uxthmi	r6, r6
 8004d58:	e7e6      	b.n	8004d28 <_printf_i+0x184>
 8004d5a:	4615      	mov	r5, r2
 8004d5c:	e7bb      	b.n	8004cd6 <_printf_i+0x132>
 8004d5e:	682b      	ldr	r3, [r5, #0]
 8004d60:	6826      	ldr	r6, [r4, #0]
 8004d62:	1d18      	adds	r0, r3, #4
 8004d64:	6961      	ldr	r1, [r4, #20]
 8004d66:	6028      	str	r0, [r5, #0]
 8004d68:	0635      	lsls	r5, r6, #24
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	d501      	bpl.n	8004d72 <_printf_i+0x1ce>
 8004d6e:	6019      	str	r1, [r3, #0]
 8004d70:	e002      	b.n	8004d78 <_printf_i+0x1d4>
 8004d72:	0670      	lsls	r0, r6, #25
 8004d74:	d5fb      	bpl.n	8004d6e <_printf_i+0x1ca>
 8004d76:	8019      	strh	r1, [r3, #0]
 8004d78:	2300      	movs	r3, #0
 8004d7a:	4615      	mov	r5, r2
 8004d7c:	6123      	str	r3, [r4, #16]
 8004d7e:	e7ba      	b.n	8004cf6 <_printf_i+0x152>
 8004d80:	682b      	ldr	r3, [r5, #0]
 8004d82:	2100      	movs	r1, #0
 8004d84:	1d1a      	adds	r2, r3, #4
 8004d86:	602a      	str	r2, [r5, #0]
 8004d88:	681d      	ldr	r5, [r3, #0]
 8004d8a:	6862      	ldr	r2, [r4, #4]
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	f002 faed 	bl	800736c <memchr>
 8004d92:	b108      	cbz	r0, 8004d98 <_printf_i+0x1f4>
 8004d94:	1b40      	subs	r0, r0, r5
 8004d96:	6060      	str	r0, [r4, #4]
 8004d98:	6863      	ldr	r3, [r4, #4]
 8004d9a:	6123      	str	r3, [r4, #16]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004da2:	e7a8      	b.n	8004cf6 <_printf_i+0x152>
 8004da4:	462a      	mov	r2, r5
 8004da6:	4649      	mov	r1, r9
 8004da8:	4640      	mov	r0, r8
 8004daa:	6923      	ldr	r3, [r4, #16]
 8004dac:	47d0      	blx	sl
 8004dae:	3001      	adds	r0, #1
 8004db0:	d0ab      	beq.n	8004d0a <_printf_i+0x166>
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	079b      	lsls	r3, r3, #30
 8004db6:	d413      	bmi.n	8004de0 <_printf_i+0x23c>
 8004db8:	68e0      	ldr	r0, [r4, #12]
 8004dba:	9b03      	ldr	r3, [sp, #12]
 8004dbc:	4298      	cmp	r0, r3
 8004dbe:	bfb8      	it	lt
 8004dc0:	4618      	movlt	r0, r3
 8004dc2:	e7a4      	b.n	8004d0e <_printf_i+0x16a>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	4632      	mov	r2, r6
 8004dc8:	4649      	mov	r1, r9
 8004dca:	4640      	mov	r0, r8
 8004dcc:	47d0      	blx	sl
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d09b      	beq.n	8004d0a <_printf_i+0x166>
 8004dd2:	3501      	adds	r5, #1
 8004dd4:	68e3      	ldr	r3, [r4, #12]
 8004dd6:	9903      	ldr	r1, [sp, #12]
 8004dd8:	1a5b      	subs	r3, r3, r1
 8004dda:	42ab      	cmp	r3, r5
 8004ddc:	dcf2      	bgt.n	8004dc4 <_printf_i+0x220>
 8004dde:	e7eb      	b.n	8004db8 <_printf_i+0x214>
 8004de0:	2500      	movs	r5, #0
 8004de2:	f104 0619 	add.w	r6, r4, #25
 8004de6:	e7f5      	b.n	8004dd4 <_printf_i+0x230>
 8004de8:	08009576 	.word	0x08009576
 8004dec:	08009587 	.word	0x08009587

08004df0 <_scanf_float>:
 8004df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df4:	b087      	sub	sp, #28
 8004df6:	9303      	str	r3, [sp, #12]
 8004df8:	688b      	ldr	r3, [r1, #8]
 8004dfa:	4617      	mov	r7, r2
 8004dfc:	1e5a      	subs	r2, r3, #1
 8004dfe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004e02:	bf85      	ittet	hi
 8004e04:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004e08:	195b      	addhi	r3, r3, r5
 8004e0a:	2300      	movls	r3, #0
 8004e0c:	9302      	strhi	r3, [sp, #8]
 8004e0e:	bf88      	it	hi
 8004e10:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004e14:	468b      	mov	fp, r1
 8004e16:	f04f 0500 	mov.w	r5, #0
 8004e1a:	bf8c      	ite	hi
 8004e1c:	608b      	strhi	r3, [r1, #8]
 8004e1e:	9302      	strls	r3, [sp, #8]
 8004e20:	680b      	ldr	r3, [r1, #0]
 8004e22:	4680      	mov	r8, r0
 8004e24:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004e28:	f84b 3b1c 	str.w	r3, [fp], #28
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	465e      	mov	r6, fp
 8004e30:	46aa      	mov	sl, r5
 8004e32:	46a9      	mov	r9, r5
 8004e34:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004e38:	9501      	str	r5, [sp, #4]
 8004e3a:	68a2      	ldr	r2, [r4, #8]
 8004e3c:	b152      	cbz	r2, 8004e54 <_scanf_float+0x64>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b4e      	cmp	r3, #78	; 0x4e
 8004e44:	d864      	bhi.n	8004f10 <_scanf_float+0x120>
 8004e46:	2b40      	cmp	r3, #64	; 0x40
 8004e48:	d83c      	bhi.n	8004ec4 <_scanf_float+0xd4>
 8004e4a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004e4e:	b2c8      	uxtb	r0, r1
 8004e50:	280e      	cmp	r0, #14
 8004e52:	d93a      	bls.n	8004eca <_scanf_float+0xda>
 8004e54:	f1b9 0f00 	cmp.w	r9, #0
 8004e58:	d003      	beq.n	8004e62 <_scanf_float+0x72>
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e66:	f1ba 0f01 	cmp.w	sl, #1
 8004e6a:	f200 8113 	bhi.w	8005094 <_scanf_float+0x2a4>
 8004e6e:	455e      	cmp	r6, fp
 8004e70:	f200 8105 	bhi.w	800507e <_scanf_float+0x28e>
 8004e74:	2501      	movs	r5, #1
 8004e76:	4628      	mov	r0, r5
 8004e78:	b007      	add	sp, #28
 8004e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e7e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004e82:	2a0d      	cmp	r2, #13
 8004e84:	d8e6      	bhi.n	8004e54 <_scanf_float+0x64>
 8004e86:	a101      	add	r1, pc, #4	; (adr r1, 8004e8c <_scanf_float+0x9c>)
 8004e88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004e8c:	08004fcb 	.word	0x08004fcb
 8004e90:	08004e55 	.word	0x08004e55
 8004e94:	08004e55 	.word	0x08004e55
 8004e98:	08004e55 	.word	0x08004e55
 8004e9c:	0800502b 	.word	0x0800502b
 8004ea0:	08005003 	.word	0x08005003
 8004ea4:	08004e55 	.word	0x08004e55
 8004ea8:	08004e55 	.word	0x08004e55
 8004eac:	08004fd9 	.word	0x08004fd9
 8004eb0:	08004e55 	.word	0x08004e55
 8004eb4:	08004e55 	.word	0x08004e55
 8004eb8:	08004e55 	.word	0x08004e55
 8004ebc:	08004e55 	.word	0x08004e55
 8004ec0:	08004f91 	.word	0x08004f91
 8004ec4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004ec8:	e7db      	b.n	8004e82 <_scanf_float+0x92>
 8004eca:	290e      	cmp	r1, #14
 8004ecc:	d8c2      	bhi.n	8004e54 <_scanf_float+0x64>
 8004ece:	a001      	add	r0, pc, #4	; (adr r0, 8004ed4 <_scanf_float+0xe4>)
 8004ed0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004ed4:	08004f83 	.word	0x08004f83
 8004ed8:	08004e55 	.word	0x08004e55
 8004edc:	08004f83 	.word	0x08004f83
 8004ee0:	08005017 	.word	0x08005017
 8004ee4:	08004e55 	.word	0x08004e55
 8004ee8:	08004f31 	.word	0x08004f31
 8004eec:	08004f6d 	.word	0x08004f6d
 8004ef0:	08004f6d 	.word	0x08004f6d
 8004ef4:	08004f6d 	.word	0x08004f6d
 8004ef8:	08004f6d 	.word	0x08004f6d
 8004efc:	08004f6d 	.word	0x08004f6d
 8004f00:	08004f6d 	.word	0x08004f6d
 8004f04:	08004f6d 	.word	0x08004f6d
 8004f08:	08004f6d 	.word	0x08004f6d
 8004f0c:	08004f6d 	.word	0x08004f6d
 8004f10:	2b6e      	cmp	r3, #110	; 0x6e
 8004f12:	d809      	bhi.n	8004f28 <_scanf_float+0x138>
 8004f14:	2b60      	cmp	r3, #96	; 0x60
 8004f16:	d8b2      	bhi.n	8004e7e <_scanf_float+0x8e>
 8004f18:	2b54      	cmp	r3, #84	; 0x54
 8004f1a:	d077      	beq.n	800500c <_scanf_float+0x21c>
 8004f1c:	2b59      	cmp	r3, #89	; 0x59
 8004f1e:	d199      	bne.n	8004e54 <_scanf_float+0x64>
 8004f20:	2d07      	cmp	r5, #7
 8004f22:	d197      	bne.n	8004e54 <_scanf_float+0x64>
 8004f24:	2508      	movs	r5, #8
 8004f26:	e029      	b.n	8004f7c <_scanf_float+0x18c>
 8004f28:	2b74      	cmp	r3, #116	; 0x74
 8004f2a:	d06f      	beq.n	800500c <_scanf_float+0x21c>
 8004f2c:	2b79      	cmp	r3, #121	; 0x79
 8004f2e:	e7f6      	b.n	8004f1e <_scanf_float+0x12e>
 8004f30:	6821      	ldr	r1, [r4, #0]
 8004f32:	05c8      	lsls	r0, r1, #23
 8004f34:	d51a      	bpl.n	8004f6c <_scanf_float+0x17c>
 8004f36:	9b02      	ldr	r3, [sp, #8]
 8004f38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004f3c:	6021      	str	r1, [r4, #0]
 8004f3e:	f109 0901 	add.w	r9, r9, #1
 8004f42:	b11b      	cbz	r3, 8004f4c <_scanf_float+0x15c>
 8004f44:	3b01      	subs	r3, #1
 8004f46:	3201      	adds	r2, #1
 8004f48:	9302      	str	r3, [sp, #8]
 8004f4a:	60a2      	str	r2, [r4, #8]
 8004f4c:	68a3      	ldr	r3, [r4, #8]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	60a3      	str	r3, [r4, #8]
 8004f52:	6923      	ldr	r3, [r4, #16]
 8004f54:	3301      	adds	r3, #1
 8004f56:	6123      	str	r3, [r4, #16]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	607b      	str	r3, [r7, #4]
 8004f60:	f340 8084 	ble.w	800506c <_scanf_float+0x27c>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	3301      	adds	r3, #1
 8004f68:	603b      	str	r3, [r7, #0]
 8004f6a:	e766      	b.n	8004e3a <_scanf_float+0x4a>
 8004f6c:	eb1a 0f05 	cmn.w	sl, r5
 8004f70:	f47f af70 	bne.w	8004e54 <_scanf_float+0x64>
 8004f74:	6822      	ldr	r2, [r4, #0]
 8004f76:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004f7a:	6022      	str	r2, [r4, #0]
 8004f7c:	f806 3b01 	strb.w	r3, [r6], #1
 8004f80:	e7e4      	b.n	8004f4c <_scanf_float+0x15c>
 8004f82:	6822      	ldr	r2, [r4, #0]
 8004f84:	0610      	lsls	r0, r2, #24
 8004f86:	f57f af65 	bpl.w	8004e54 <_scanf_float+0x64>
 8004f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f8e:	e7f4      	b.n	8004f7a <_scanf_float+0x18a>
 8004f90:	f1ba 0f00 	cmp.w	sl, #0
 8004f94:	d10e      	bne.n	8004fb4 <_scanf_float+0x1c4>
 8004f96:	f1b9 0f00 	cmp.w	r9, #0
 8004f9a:	d10e      	bne.n	8004fba <_scanf_float+0x1ca>
 8004f9c:	6822      	ldr	r2, [r4, #0]
 8004f9e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004fa2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004fa6:	d108      	bne.n	8004fba <_scanf_float+0x1ca>
 8004fa8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004fac:	f04f 0a01 	mov.w	sl, #1
 8004fb0:	6022      	str	r2, [r4, #0]
 8004fb2:	e7e3      	b.n	8004f7c <_scanf_float+0x18c>
 8004fb4:	f1ba 0f02 	cmp.w	sl, #2
 8004fb8:	d055      	beq.n	8005066 <_scanf_float+0x276>
 8004fba:	2d01      	cmp	r5, #1
 8004fbc:	d002      	beq.n	8004fc4 <_scanf_float+0x1d4>
 8004fbe:	2d04      	cmp	r5, #4
 8004fc0:	f47f af48 	bne.w	8004e54 <_scanf_float+0x64>
 8004fc4:	3501      	adds	r5, #1
 8004fc6:	b2ed      	uxtb	r5, r5
 8004fc8:	e7d8      	b.n	8004f7c <_scanf_float+0x18c>
 8004fca:	f1ba 0f01 	cmp.w	sl, #1
 8004fce:	f47f af41 	bne.w	8004e54 <_scanf_float+0x64>
 8004fd2:	f04f 0a02 	mov.w	sl, #2
 8004fd6:	e7d1      	b.n	8004f7c <_scanf_float+0x18c>
 8004fd8:	b97d      	cbnz	r5, 8004ffa <_scanf_float+0x20a>
 8004fda:	f1b9 0f00 	cmp.w	r9, #0
 8004fde:	f47f af3c 	bne.w	8004e5a <_scanf_float+0x6a>
 8004fe2:	6822      	ldr	r2, [r4, #0]
 8004fe4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004fe8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004fec:	f47f af39 	bne.w	8004e62 <_scanf_float+0x72>
 8004ff0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004ff4:	2501      	movs	r5, #1
 8004ff6:	6022      	str	r2, [r4, #0]
 8004ff8:	e7c0      	b.n	8004f7c <_scanf_float+0x18c>
 8004ffa:	2d03      	cmp	r5, #3
 8004ffc:	d0e2      	beq.n	8004fc4 <_scanf_float+0x1d4>
 8004ffe:	2d05      	cmp	r5, #5
 8005000:	e7de      	b.n	8004fc0 <_scanf_float+0x1d0>
 8005002:	2d02      	cmp	r5, #2
 8005004:	f47f af26 	bne.w	8004e54 <_scanf_float+0x64>
 8005008:	2503      	movs	r5, #3
 800500a:	e7b7      	b.n	8004f7c <_scanf_float+0x18c>
 800500c:	2d06      	cmp	r5, #6
 800500e:	f47f af21 	bne.w	8004e54 <_scanf_float+0x64>
 8005012:	2507      	movs	r5, #7
 8005014:	e7b2      	b.n	8004f7c <_scanf_float+0x18c>
 8005016:	6822      	ldr	r2, [r4, #0]
 8005018:	0591      	lsls	r1, r2, #22
 800501a:	f57f af1b 	bpl.w	8004e54 <_scanf_float+0x64>
 800501e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005022:	6022      	str	r2, [r4, #0]
 8005024:	f8cd 9004 	str.w	r9, [sp, #4]
 8005028:	e7a8      	b.n	8004f7c <_scanf_float+0x18c>
 800502a:	6822      	ldr	r2, [r4, #0]
 800502c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005030:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005034:	d006      	beq.n	8005044 <_scanf_float+0x254>
 8005036:	0550      	lsls	r0, r2, #21
 8005038:	f57f af0c 	bpl.w	8004e54 <_scanf_float+0x64>
 800503c:	f1b9 0f00 	cmp.w	r9, #0
 8005040:	f43f af0f 	beq.w	8004e62 <_scanf_float+0x72>
 8005044:	0591      	lsls	r1, r2, #22
 8005046:	bf58      	it	pl
 8005048:	9901      	ldrpl	r1, [sp, #4]
 800504a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800504e:	bf58      	it	pl
 8005050:	eba9 0101 	subpl.w	r1, r9, r1
 8005054:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005058:	f04f 0900 	mov.w	r9, #0
 800505c:	bf58      	it	pl
 800505e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005062:	6022      	str	r2, [r4, #0]
 8005064:	e78a      	b.n	8004f7c <_scanf_float+0x18c>
 8005066:	f04f 0a03 	mov.w	sl, #3
 800506a:	e787      	b.n	8004f7c <_scanf_float+0x18c>
 800506c:	4639      	mov	r1, r7
 800506e:	4640      	mov	r0, r8
 8005070:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005074:	4798      	blx	r3
 8005076:	2800      	cmp	r0, #0
 8005078:	f43f aedf 	beq.w	8004e3a <_scanf_float+0x4a>
 800507c:	e6ea      	b.n	8004e54 <_scanf_float+0x64>
 800507e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005082:	463a      	mov	r2, r7
 8005084:	4640      	mov	r0, r8
 8005086:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800508a:	4798      	blx	r3
 800508c:	6923      	ldr	r3, [r4, #16]
 800508e:	3b01      	subs	r3, #1
 8005090:	6123      	str	r3, [r4, #16]
 8005092:	e6ec      	b.n	8004e6e <_scanf_float+0x7e>
 8005094:	1e6b      	subs	r3, r5, #1
 8005096:	2b06      	cmp	r3, #6
 8005098:	d825      	bhi.n	80050e6 <_scanf_float+0x2f6>
 800509a:	2d02      	cmp	r5, #2
 800509c:	d836      	bhi.n	800510c <_scanf_float+0x31c>
 800509e:	455e      	cmp	r6, fp
 80050a0:	f67f aee8 	bls.w	8004e74 <_scanf_float+0x84>
 80050a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050a8:	463a      	mov	r2, r7
 80050aa:	4640      	mov	r0, r8
 80050ac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050b0:	4798      	blx	r3
 80050b2:	6923      	ldr	r3, [r4, #16]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	6123      	str	r3, [r4, #16]
 80050b8:	e7f1      	b.n	800509e <_scanf_float+0x2ae>
 80050ba:	9802      	ldr	r0, [sp, #8]
 80050bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80050c4:	463a      	mov	r2, r7
 80050c6:	9002      	str	r0, [sp, #8]
 80050c8:	4640      	mov	r0, r8
 80050ca:	4798      	blx	r3
 80050cc:	6923      	ldr	r3, [r4, #16]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	6123      	str	r3, [r4, #16]
 80050d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050d6:	fa5f fa8a 	uxtb.w	sl, sl
 80050da:	f1ba 0f02 	cmp.w	sl, #2
 80050de:	d1ec      	bne.n	80050ba <_scanf_float+0x2ca>
 80050e0:	3d03      	subs	r5, #3
 80050e2:	b2ed      	uxtb	r5, r5
 80050e4:	1b76      	subs	r6, r6, r5
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	05da      	lsls	r2, r3, #23
 80050ea:	d52f      	bpl.n	800514c <_scanf_float+0x35c>
 80050ec:	055b      	lsls	r3, r3, #21
 80050ee:	d510      	bpl.n	8005112 <_scanf_float+0x322>
 80050f0:	455e      	cmp	r6, fp
 80050f2:	f67f aebf 	bls.w	8004e74 <_scanf_float+0x84>
 80050f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050fa:	463a      	mov	r2, r7
 80050fc:	4640      	mov	r0, r8
 80050fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005102:	4798      	blx	r3
 8005104:	6923      	ldr	r3, [r4, #16]
 8005106:	3b01      	subs	r3, #1
 8005108:	6123      	str	r3, [r4, #16]
 800510a:	e7f1      	b.n	80050f0 <_scanf_float+0x300>
 800510c:	46aa      	mov	sl, r5
 800510e:	9602      	str	r6, [sp, #8]
 8005110:	e7df      	b.n	80050d2 <_scanf_float+0x2e2>
 8005112:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005116:	6923      	ldr	r3, [r4, #16]
 8005118:	2965      	cmp	r1, #101	; 0x65
 800511a:	f103 33ff 	add.w	r3, r3, #4294967295
 800511e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005122:	6123      	str	r3, [r4, #16]
 8005124:	d00c      	beq.n	8005140 <_scanf_float+0x350>
 8005126:	2945      	cmp	r1, #69	; 0x45
 8005128:	d00a      	beq.n	8005140 <_scanf_float+0x350>
 800512a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800512e:	463a      	mov	r2, r7
 8005130:	4640      	mov	r0, r8
 8005132:	4798      	blx	r3
 8005134:	6923      	ldr	r3, [r4, #16]
 8005136:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800513a:	3b01      	subs	r3, #1
 800513c:	1eb5      	subs	r5, r6, #2
 800513e:	6123      	str	r3, [r4, #16]
 8005140:	463a      	mov	r2, r7
 8005142:	4640      	mov	r0, r8
 8005144:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005148:	4798      	blx	r3
 800514a:	462e      	mov	r6, r5
 800514c:	6825      	ldr	r5, [r4, #0]
 800514e:	f015 0510 	ands.w	r5, r5, #16
 8005152:	d155      	bne.n	8005200 <_scanf_float+0x410>
 8005154:	7035      	strb	r5, [r6, #0]
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800515c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005160:	d11b      	bne.n	800519a <_scanf_float+0x3aa>
 8005162:	9b01      	ldr	r3, [sp, #4]
 8005164:	454b      	cmp	r3, r9
 8005166:	eba3 0209 	sub.w	r2, r3, r9
 800516a:	d123      	bne.n	80051b4 <_scanf_float+0x3c4>
 800516c:	2200      	movs	r2, #0
 800516e:	4659      	mov	r1, fp
 8005170:	4640      	mov	r0, r8
 8005172:	f000 fe79 	bl	8005e68 <_strtod_r>
 8005176:	6822      	ldr	r2, [r4, #0]
 8005178:	9b03      	ldr	r3, [sp, #12]
 800517a:	f012 0f02 	tst.w	r2, #2
 800517e:	4606      	mov	r6, r0
 8005180:	460f      	mov	r7, r1
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	d021      	beq.n	80051ca <_scanf_float+0x3da>
 8005186:	1d1a      	adds	r2, r3, #4
 8005188:	9903      	ldr	r1, [sp, #12]
 800518a:	600a      	str	r2, [r1, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	e9c3 6700 	strd	r6, r7, [r3]
 8005192:	68e3      	ldr	r3, [r4, #12]
 8005194:	3301      	adds	r3, #1
 8005196:	60e3      	str	r3, [r4, #12]
 8005198:	e66d      	b.n	8004e76 <_scanf_float+0x86>
 800519a:	9b04      	ldr	r3, [sp, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0e5      	beq.n	800516c <_scanf_float+0x37c>
 80051a0:	9905      	ldr	r1, [sp, #20]
 80051a2:	230a      	movs	r3, #10
 80051a4:	462a      	mov	r2, r5
 80051a6:	4640      	mov	r0, r8
 80051a8:	3101      	adds	r1, #1
 80051aa:	f000 fedf 	bl	8005f6c <_strtol_r>
 80051ae:	9b04      	ldr	r3, [sp, #16]
 80051b0:	9e05      	ldr	r6, [sp, #20]
 80051b2:	1ac2      	subs	r2, r0, r3
 80051b4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80051b8:	429e      	cmp	r6, r3
 80051ba:	bf28      	it	cs
 80051bc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80051c0:	4630      	mov	r0, r6
 80051c2:	4910      	ldr	r1, [pc, #64]	; (8005204 <_scanf_float+0x414>)
 80051c4:	f000 f826 	bl	8005214 <siprintf>
 80051c8:	e7d0      	b.n	800516c <_scanf_float+0x37c>
 80051ca:	f012 0f04 	tst.w	r2, #4
 80051ce:	f103 0204 	add.w	r2, r3, #4
 80051d2:	d1d9      	bne.n	8005188 <_scanf_float+0x398>
 80051d4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80051d8:	f8cc 2000 	str.w	r2, [ip]
 80051dc:	f8d3 8000 	ldr.w	r8, [r3]
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	f7fb fc12 	bl	8000a0c <__aeabi_dcmpun>
 80051e8:	b128      	cbz	r0, 80051f6 <_scanf_float+0x406>
 80051ea:	4807      	ldr	r0, [pc, #28]	; (8005208 <_scanf_float+0x418>)
 80051ec:	f000 f80e 	bl	800520c <nanf>
 80051f0:	f8c8 0000 	str.w	r0, [r8]
 80051f4:	e7cd      	b.n	8005192 <_scanf_float+0x3a2>
 80051f6:	4630      	mov	r0, r6
 80051f8:	4639      	mov	r1, r7
 80051fa:	f7fb fc65 	bl	8000ac8 <__aeabi_d2f>
 80051fe:	e7f7      	b.n	80051f0 <_scanf_float+0x400>
 8005200:	2500      	movs	r5, #0
 8005202:	e638      	b.n	8004e76 <_scanf_float+0x86>
 8005204:	08009598 	.word	0x08009598
 8005208:	080099a0 	.word	0x080099a0

0800520c <nanf>:
 800520c:	4800      	ldr	r0, [pc, #0]	; (8005210 <nanf+0x4>)
 800520e:	4770      	bx	lr
 8005210:	7fc00000 	.word	0x7fc00000

08005214 <siprintf>:
 8005214:	b40e      	push	{r1, r2, r3}
 8005216:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800521a:	b500      	push	{lr}
 800521c:	b09c      	sub	sp, #112	; 0x70
 800521e:	ab1d      	add	r3, sp, #116	; 0x74
 8005220:	9002      	str	r0, [sp, #8]
 8005222:	9006      	str	r0, [sp, #24]
 8005224:	9107      	str	r1, [sp, #28]
 8005226:	9104      	str	r1, [sp, #16]
 8005228:	4808      	ldr	r0, [pc, #32]	; (800524c <siprintf+0x38>)
 800522a:	4909      	ldr	r1, [pc, #36]	; (8005250 <siprintf+0x3c>)
 800522c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005230:	9105      	str	r1, [sp, #20]
 8005232:	6800      	ldr	r0, [r0, #0]
 8005234:	a902      	add	r1, sp, #8
 8005236:	9301      	str	r3, [sp, #4]
 8005238:	f002 feb8 	bl	8007fac <_svfiprintf_r>
 800523c:	2200      	movs	r2, #0
 800523e:	9b02      	ldr	r3, [sp, #8]
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	b01c      	add	sp, #112	; 0x70
 8005244:	f85d eb04 	ldr.w	lr, [sp], #4
 8005248:	b003      	add	sp, #12
 800524a:	4770      	bx	lr
 800524c:	20000014 	.word	0x20000014
 8005250:	ffff0208 	.word	0xffff0208

08005254 <sulp>:
 8005254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005258:	460f      	mov	r7, r1
 800525a:	4690      	mov	r8, r2
 800525c:	f002 fc12 	bl	8007a84 <__ulp>
 8005260:	4604      	mov	r4, r0
 8005262:	460d      	mov	r5, r1
 8005264:	f1b8 0f00 	cmp.w	r8, #0
 8005268:	d011      	beq.n	800528e <sulp+0x3a>
 800526a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800526e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005272:	2b00      	cmp	r3, #0
 8005274:	dd0b      	ble.n	800528e <sulp+0x3a>
 8005276:	2400      	movs	r4, #0
 8005278:	051b      	lsls	r3, r3, #20
 800527a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800527e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005282:	4622      	mov	r2, r4
 8005284:	462b      	mov	r3, r5
 8005286:	f7fb f927 	bl	80004d8 <__aeabi_dmul>
 800528a:	4604      	mov	r4, r0
 800528c:	460d      	mov	r5, r1
 800528e:	4620      	mov	r0, r4
 8005290:	4629      	mov	r1, r5
 8005292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005298 <_strtod_l>:
 8005298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	469b      	mov	fp, r3
 800529e:	2300      	movs	r3, #0
 80052a0:	b09f      	sub	sp, #124	; 0x7c
 80052a2:	931a      	str	r3, [sp, #104]	; 0x68
 80052a4:	4b9e      	ldr	r3, [pc, #632]	; (8005520 <_strtod_l+0x288>)
 80052a6:	4682      	mov	sl, r0
 80052a8:	681f      	ldr	r7, [r3, #0]
 80052aa:	460e      	mov	r6, r1
 80052ac:	4638      	mov	r0, r7
 80052ae:	9215      	str	r2, [sp, #84]	; 0x54
 80052b0:	f7fa ff4e 	bl	8000150 <strlen>
 80052b4:	f04f 0800 	mov.w	r8, #0
 80052b8:	4604      	mov	r4, r0
 80052ba:	f04f 0900 	mov.w	r9, #0
 80052be:	9619      	str	r6, [sp, #100]	; 0x64
 80052c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052c2:	781a      	ldrb	r2, [r3, #0]
 80052c4:	2a2b      	cmp	r2, #43	; 0x2b
 80052c6:	d04c      	beq.n	8005362 <_strtod_l+0xca>
 80052c8:	d83a      	bhi.n	8005340 <_strtod_l+0xa8>
 80052ca:	2a0d      	cmp	r2, #13
 80052cc:	d833      	bhi.n	8005336 <_strtod_l+0x9e>
 80052ce:	2a08      	cmp	r2, #8
 80052d0:	d833      	bhi.n	800533a <_strtod_l+0xa2>
 80052d2:	2a00      	cmp	r2, #0
 80052d4:	d03d      	beq.n	8005352 <_strtod_l+0xba>
 80052d6:	2300      	movs	r3, #0
 80052d8:	930a      	str	r3, [sp, #40]	; 0x28
 80052da:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80052dc:	782b      	ldrb	r3, [r5, #0]
 80052de:	2b30      	cmp	r3, #48	; 0x30
 80052e0:	f040 80aa 	bne.w	8005438 <_strtod_l+0x1a0>
 80052e4:	786b      	ldrb	r3, [r5, #1]
 80052e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80052ea:	2b58      	cmp	r3, #88	; 0x58
 80052ec:	d166      	bne.n	80053bc <_strtod_l+0x124>
 80052ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052f0:	4650      	mov	r0, sl
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	ab1a      	add	r3, sp, #104	; 0x68
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	4a8a      	ldr	r2, [pc, #552]	; (8005524 <_strtod_l+0x28c>)
 80052fa:	f8cd b008 	str.w	fp, [sp, #8]
 80052fe:	ab1b      	add	r3, sp, #108	; 0x6c
 8005300:	a919      	add	r1, sp, #100	; 0x64
 8005302:	f001 fd17 	bl	8006d34 <__gethex>
 8005306:	f010 0607 	ands.w	r6, r0, #7
 800530a:	4604      	mov	r4, r0
 800530c:	d005      	beq.n	800531a <_strtod_l+0x82>
 800530e:	2e06      	cmp	r6, #6
 8005310:	d129      	bne.n	8005366 <_strtod_l+0xce>
 8005312:	2300      	movs	r3, #0
 8005314:	3501      	adds	r5, #1
 8005316:	9519      	str	r5, [sp, #100]	; 0x64
 8005318:	930a      	str	r3, [sp, #40]	; 0x28
 800531a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800531c:	2b00      	cmp	r3, #0
 800531e:	f040 858a 	bne.w	8005e36 <_strtod_l+0xb9e>
 8005322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005324:	b1d3      	cbz	r3, 800535c <_strtod_l+0xc4>
 8005326:	4642      	mov	r2, r8
 8005328:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800532c:	4610      	mov	r0, r2
 800532e:	4619      	mov	r1, r3
 8005330:	b01f      	add	sp, #124	; 0x7c
 8005332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005336:	2a20      	cmp	r2, #32
 8005338:	d1cd      	bne.n	80052d6 <_strtod_l+0x3e>
 800533a:	3301      	adds	r3, #1
 800533c:	9319      	str	r3, [sp, #100]	; 0x64
 800533e:	e7bf      	b.n	80052c0 <_strtod_l+0x28>
 8005340:	2a2d      	cmp	r2, #45	; 0x2d
 8005342:	d1c8      	bne.n	80052d6 <_strtod_l+0x3e>
 8005344:	2201      	movs	r2, #1
 8005346:	920a      	str	r2, [sp, #40]	; 0x28
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	9219      	str	r2, [sp, #100]	; 0x64
 800534c:	785b      	ldrb	r3, [r3, #1]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1c3      	bne.n	80052da <_strtod_l+0x42>
 8005352:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005354:	9619      	str	r6, [sp, #100]	; 0x64
 8005356:	2b00      	cmp	r3, #0
 8005358:	f040 856b 	bne.w	8005e32 <_strtod_l+0xb9a>
 800535c:	4642      	mov	r2, r8
 800535e:	464b      	mov	r3, r9
 8005360:	e7e4      	b.n	800532c <_strtod_l+0x94>
 8005362:	2200      	movs	r2, #0
 8005364:	e7ef      	b.n	8005346 <_strtod_l+0xae>
 8005366:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005368:	b13a      	cbz	r2, 800537a <_strtod_l+0xe2>
 800536a:	2135      	movs	r1, #53	; 0x35
 800536c:	a81c      	add	r0, sp, #112	; 0x70
 800536e:	f002 fc8d 	bl	8007c8c <__copybits>
 8005372:	4650      	mov	r0, sl
 8005374:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005376:	f002 f855 	bl	8007424 <_Bfree>
 800537a:	3e01      	subs	r6, #1
 800537c:	2e04      	cmp	r6, #4
 800537e:	d806      	bhi.n	800538e <_strtod_l+0xf6>
 8005380:	e8df f006 	tbb	[pc, r6]
 8005384:	1714030a 	.word	0x1714030a
 8005388:	0a          	.byte	0x0a
 8005389:	00          	.byte	0x00
 800538a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800538e:	0721      	lsls	r1, r4, #28
 8005390:	d5c3      	bpl.n	800531a <_strtod_l+0x82>
 8005392:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005396:	e7c0      	b.n	800531a <_strtod_l+0x82>
 8005398:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800539a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800539e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80053a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80053a6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80053aa:	e7f0      	b.n	800538e <_strtod_l+0xf6>
 80053ac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005528 <_strtod_l+0x290>
 80053b0:	e7ed      	b.n	800538e <_strtod_l+0xf6>
 80053b2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80053b6:	f04f 38ff 	mov.w	r8, #4294967295
 80053ba:	e7e8      	b.n	800538e <_strtod_l+0xf6>
 80053bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	9219      	str	r2, [sp, #100]	; 0x64
 80053c2:	785b      	ldrb	r3, [r3, #1]
 80053c4:	2b30      	cmp	r3, #48	; 0x30
 80053c6:	d0f9      	beq.n	80053bc <_strtod_l+0x124>
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0a6      	beq.n	800531a <_strtod_l+0x82>
 80053cc:	2301      	movs	r3, #1
 80053ce:	9307      	str	r3, [sp, #28]
 80053d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80053d2:	220a      	movs	r2, #10
 80053d4:	9308      	str	r3, [sp, #32]
 80053d6:	2300      	movs	r3, #0
 80053d8:	469b      	mov	fp, r3
 80053da:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80053de:	9819      	ldr	r0, [sp, #100]	; 0x64
 80053e0:	7805      	ldrb	r5, [r0, #0]
 80053e2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80053e6:	b2d9      	uxtb	r1, r3
 80053e8:	2909      	cmp	r1, #9
 80053ea:	d927      	bls.n	800543c <_strtod_l+0x1a4>
 80053ec:	4622      	mov	r2, r4
 80053ee:	4639      	mov	r1, r7
 80053f0:	f002 fef2 	bl	80081d8 <strncmp>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	d033      	beq.n	8005460 <_strtod_l+0x1c8>
 80053f8:	2000      	movs	r0, #0
 80053fa:	462a      	mov	r2, r5
 80053fc:	465c      	mov	r4, fp
 80053fe:	4603      	mov	r3, r0
 8005400:	9004      	str	r0, [sp, #16]
 8005402:	2a65      	cmp	r2, #101	; 0x65
 8005404:	d001      	beq.n	800540a <_strtod_l+0x172>
 8005406:	2a45      	cmp	r2, #69	; 0x45
 8005408:	d114      	bne.n	8005434 <_strtod_l+0x19c>
 800540a:	b91c      	cbnz	r4, 8005414 <_strtod_l+0x17c>
 800540c:	9a07      	ldr	r2, [sp, #28]
 800540e:	4302      	orrs	r2, r0
 8005410:	d09f      	beq.n	8005352 <_strtod_l+0xba>
 8005412:	2400      	movs	r4, #0
 8005414:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005416:	1c72      	adds	r2, r6, #1
 8005418:	9219      	str	r2, [sp, #100]	; 0x64
 800541a:	7872      	ldrb	r2, [r6, #1]
 800541c:	2a2b      	cmp	r2, #43	; 0x2b
 800541e:	d079      	beq.n	8005514 <_strtod_l+0x27c>
 8005420:	2a2d      	cmp	r2, #45	; 0x2d
 8005422:	f000 8083 	beq.w	800552c <_strtod_l+0x294>
 8005426:	2700      	movs	r7, #0
 8005428:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800542c:	2909      	cmp	r1, #9
 800542e:	f240 8083 	bls.w	8005538 <_strtod_l+0x2a0>
 8005432:	9619      	str	r6, [sp, #100]	; 0x64
 8005434:	2500      	movs	r5, #0
 8005436:	e09f      	b.n	8005578 <_strtod_l+0x2e0>
 8005438:	2300      	movs	r3, #0
 800543a:	e7c8      	b.n	80053ce <_strtod_l+0x136>
 800543c:	f1bb 0f08 	cmp.w	fp, #8
 8005440:	bfd5      	itete	le
 8005442:	9906      	ldrle	r1, [sp, #24]
 8005444:	9905      	ldrgt	r1, [sp, #20]
 8005446:	fb02 3301 	mlale	r3, r2, r1, r3
 800544a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800544e:	f100 0001 	add.w	r0, r0, #1
 8005452:	bfd4      	ite	le
 8005454:	9306      	strle	r3, [sp, #24]
 8005456:	9305      	strgt	r3, [sp, #20]
 8005458:	f10b 0b01 	add.w	fp, fp, #1
 800545c:	9019      	str	r0, [sp, #100]	; 0x64
 800545e:	e7be      	b.n	80053de <_strtod_l+0x146>
 8005460:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005462:	191a      	adds	r2, r3, r4
 8005464:	9219      	str	r2, [sp, #100]	; 0x64
 8005466:	5d1a      	ldrb	r2, [r3, r4]
 8005468:	f1bb 0f00 	cmp.w	fp, #0
 800546c:	d036      	beq.n	80054dc <_strtod_l+0x244>
 800546e:	465c      	mov	r4, fp
 8005470:	9004      	str	r0, [sp, #16]
 8005472:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005476:	2b09      	cmp	r3, #9
 8005478:	d912      	bls.n	80054a0 <_strtod_l+0x208>
 800547a:	2301      	movs	r3, #1
 800547c:	e7c1      	b.n	8005402 <_strtod_l+0x16a>
 800547e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005480:	3001      	adds	r0, #1
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	9219      	str	r2, [sp, #100]	; 0x64
 8005486:	785a      	ldrb	r2, [r3, #1]
 8005488:	2a30      	cmp	r2, #48	; 0x30
 800548a:	d0f8      	beq.n	800547e <_strtod_l+0x1e6>
 800548c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005490:	2b08      	cmp	r3, #8
 8005492:	f200 84d5 	bhi.w	8005e40 <_strtod_l+0xba8>
 8005496:	9004      	str	r0, [sp, #16]
 8005498:	2000      	movs	r0, #0
 800549a:	4604      	mov	r4, r0
 800549c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800549e:	9308      	str	r3, [sp, #32]
 80054a0:	3a30      	subs	r2, #48	; 0x30
 80054a2:	f100 0301 	add.w	r3, r0, #1
 80054a6:	d013      	beq.n	80054d0 <_strtod_l+0x238>
 80054a8:	9904      	ldr	r1, [sp, #16]
 80054aa:	1905      	adds	r5, r0, r4
 80054ac:	4419      	add	r1, r3
 80054ae:	9104      	str	r1, [sp, #16]
 80054b0:	4623      	mov	r3, r4
 80054b2:	210a      	movs	r1, #10
 80054b4:	42ab      	cmp	r3, r5
 80054b6:	d113      	bne.n	80054e0 <_strtod_l+0x248>
 80054b8:	1823      	adds	r3, r4, r0
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	f104 0401 	add.w	r4, r4, #1
 80054c0:	4404      	add	r4, r0
 80054c2:	dc1b      	bgt.n	80054fc <_strtod_l+0x264>
 80054c4:	230a      	movs	r3, #10
 80054c6:	9906      	ldr	r1, [sp, #24]
 80054c8:	fb03 2301 	mla	r3, r3, r1, r2
 80054cc:	9306      	str	r3, [sp, #24]
 80054ce:	2300      	movs	r3, #0
 80054d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80054d2:	4618      	mov	r0, r3
 80054d4:	1c51      	adds	r1, r2, #1
 80054d6:	9119      	str	r1, [sp, #100]	; 0x64
 80054d8:	7852      	ldrb	r2, [r2, #1]
 80054da:	e7ca      	b.n	8005472 <_strtod_l+0x1da>
 80054dc:	4658      	mov	r0, fp
 80054de:	e7d3      	b.n	8005488 <_strtod_l+0x1f0>
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	dc04      	bgt.n	80054ee <_strtod_l+0x256>
 80054e4:	9f06      	ldr	r7, [sp, #24]
 80054e6:	434f      	muls	r7, r1
 80054e8:	9706      	str	r7, [sp, #24]
 80054ea:	3301      	adds	r3, #1
 80054ec:	e7e2      	b.n	80054b4 <_strtod_l+0x21c>
 80054ee:	1c5f      	adds	r7, r3, #1
 80054f0:	2f10      	cmp	r7, #16
 80054f2:	bfde      	ittt	le
 80054f4:	9f05      	ldrle	r7, [sp, #20]
 80054f6:	434f      	mulle	r7, r1
 80054f8:	9705      	strle	r7, [sp, #20]
 80054fa:	e7f6      	b.n	80054ea <_strtod_l+0x252>
 80054fc:	2c10      	cmp	r4, #16
 80054fe:	bfdf      	itttt	le
 8005500:	230a      	movle	r3, #10
 8005502:	9905      	ldrle	r1, [sp, #20]
 8005504:	fb03 2301 	mlale	r3, r3, r1, r2
 8005508:	9305      	strle	r3, [sp, #20]
 800550a:	e7e0      	b.n	80054ce <_strtod_l+0x236>
 800550c:	2300      	movs	r3, #0
 800550e:	9304      	str	r3, [sp, #16]
 8005510:	2301      	movs	r3, #1
 8005512:	e77b      	b.n	800540c <_strtod_l+0x174>
 8005514:	2700      	movs	r7, #0
 8005516:	1cb2      	adds	r2, r6, #2
 8005518:	9219      	str	r2, [sp, #100]	; 0x64
 800551a:	78b2      	ldrb	r2, [r6, #2]
 800551c:	e784      	b.n	8005428 <_strtod_l+0x190>
 800551e:	bf00      	nop
 8005520:	080097e8 	.word	0x080097e8
 8005524:	080095a0 	.word	0x080095a0
 8005528:	7ff00000 	.word	0x7ff00000
 800552c:	2701      	movs	r7, #1
 800552e:	e7f2      	b.n	8005516 <_strtod_l+0x27e>
 8005530:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005532:	1c51      	adds	r1, r2, #1
 8005534:	9119      	str	r1, [sp, #100]	; 0x64
 8005536:	7852      	ldrb	r2, [r2, #1]
 8005538:	2a30      	cmp	r2, #48	; 0x30
 800553a:	d0f9      	beq.n	8005530 <_strtod_l+0x298>
 800553c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005540:	2908      	cmp	r1, #8
 8005542:	f63f af77 	bhi.w	8005434 <_strtod_l+0x19c>
 8005546:	f04f 0e0a 	mov.w	lr, #10
 800554a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800554e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005550:	9209      	str	r2, [sp, #36]	; 0x24
 8005552:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005554:	1c51      	adds	r1, r2, #1
 8005556:	9119      	str	r1, [sp, #100]	; 0x64
 8005558:	7852      	ldrb	r2, [r2, #1]
 800555a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800555e:	2d09      	cmp	r5, #9
 8005560:	d935      	bls.n	80055ce <_strtod_l+0x336>
 8005562:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005564:	1b49      	subs	r1, r1, r5
 8005566:	2908      	cmp	r1, #8
 8005568:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800556c:	dc02      	bgt.n	8005574 <_strtod_l+0x2dc>
 800556e:	4565      	cmp	r5, ip
 8005570:	bfa8      	it	ge
 8005572:	4665      	movge	r5, ip
 8005574:	b107      	cbz	r7, 8005578 <_strtod_l+0x2e0>
 8005576:	426d      	negs	r5, r5
 8005578:	2c00      	cmp	r4, #0
 800557a:	d14c      	bne.n	8005616 <_strtod_l+0x37e>
 800557c:	9907      	ldr	r1, [sp, #28]
 800557e:	4301      	orrs	r1, r0
 8005580:	f47f aecb 	bne.w	800531a <_strtod_l+0x82>
 8005584:	2b00      	cmp	r3, #0
 8005586:	f47f aee4 	bne.w	8005352 <_strtod_l+0xba>
 800558a:	2a69      	cmp	r2, #105	; 0x69
 800558c:	d026      	beq.n	80055dc <_strtod_l+0x344>
 800558e:	dc23      	bgt.n	80055d8 <_strtod_l+0x340>
 8005590:	2a49      	cmp	r2, #73	; 0x49
 8005592:	d023      	beq.n	80055dc <_strtod_l+0x344>
 8005594:	2a4e      	cmp	r2, #78	; 0x4e
 8005596:	f47f aedc 	bne.w	8005352 <_strtod_l+0xba>
 800559a:	499d      	ldr	r1, [pc, #628]	; (8005810 <_strtod_l+0x578>)
 800559c:	a819      	add	r0, sp, #100	; 0x64
 800559e:	f001 fe17 	bl	80071d0 <__match>
 80055a2:	2800      	cmp	r0, #0
 80055a4:	f43f aed5 	beq.w	8005352 <_strtod_l+0xba>
 80055a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b28      	cmp	r3, #40	; 0x28
 80055ae:	d12c      	bne.n	800560a <_strtod_l+0x372>
 80055b0:	4998      	ldr	r1, [pc, #608]	; (8005814 <_strtod_l+0x57c>)
 80055b2:	aa1c      	add	r2, sp, #112	; 0x70
 80055b4:	a819      	add	r0, sp, #100	; 0x64
 80055b6:	f001 fe1f 	bl	80071f8 <__hexnan>
 80055ba:	2805      	cmp	r0, #5
 80055bc:	d125      	bne.n	800560a <_strtod_l+0x372>
 80055be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80055c0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80055c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80055c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80055cc:	e6a5      	b.n	800531a <_strtod_l+0x82>
 80055ce:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80055d2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80055d6:	e7bc      	b.n	8005552 <_strtod_l+0x2ba>
 80055d8:	2a6e      	cmp	r2, #110	; 0x6e
 80055da:	e7dc      	b.n	8005596 <_strtod_l+0x2fe>
 80055dc:	498e      	ldr	r1, [pc, #568]	; (8005818 <_strtod_l+0x580>)
 80055de:	a819      	add	r0, sp, #100	; 0x64
 80055e0:	f001 fdf6 	bl	80071d0 <__match>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	f43f aeb4 	beq.w	8005352 <_strtod_l+0xba>
 80055ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80055ec:	498b      	ldr	r1, [pc, #556]	; (800581c <_strtod_l+0x584>)
 80055ee:	3b01      	subs	r3, #1
 80055f0:	a819      	add	r0, sp, #100	; 0x64
 80055f2:	9319      	str	r3, [sp, #100]	; 0x64
 80055f4:	f001 fdec 	bl	80071d0 <__match>
 80055f8:	b910      	cbnz	r0, 8005600 <_strtod_l+0x368>
 80055fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80055fc:	3301      	adds	r3, #1
 80055fe:	9319      	str	r3, [sp, #100]	; 0x64
 8005600:	f04f 0800 	mov.w	r8, #0
 8005604:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005820 <_strtod_l+0x588>
 8005608:	e687      	b.n	800531a <_strtod_l+0x82>
 800560a:	4886      	ldr	r0, [pc, #536]	; (8005824 <_strtod_l+0x58c>)
 800560c:	f002 fdce 	bl	80081ac <nan>
 8005610:	4680      	mov	r8, r0
 8005612:	4689      	mov	r9, r1
 8005614:	e681      	b.n	800531a <_strtod_l+0x82>
 8005616:	9b04      	ldr	r3, [sp, #16]
 8005618:	f1bb 0f00 	cmp.w	fp, #0
 800561c:	bf08      	it	eq
 800561e:	46a3      	moveq	fp, r4
 8005620:	1aeb      	subs	r3, r5, r3
 8005622:	2c10      	cmp	r4, #16
 8005624:	9806      	ldr	r0, [sp, #24]
 8005626:	4626      	mov	r6, r4
 8005628:	9307      	str	r3, [sp, #28]
 800562a:	bfa8      	it	ge
 800562c:	2610      	movge	r6, #16
 800562e:	f7fa fed9 	bl	80003e4 <__aeabi_ui2d>
 8005632:	2c09      	cmp	r4, #9
 8005634:	4680      	mov	r8, r0
 8005636:	4689      	mov	r9, r1
 8005638:	dd13      	ble.n	8005662 <_strtod_l+0x3ca>
 800563a:	4b7b      	ldr	r3, [pc, #492]	; (8005828 <_strtod_l+0x590>)
 800563c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005640:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005644:	f7fa ff48 	bl	80004d8 <__aeabi_dmul>
 8005648:	4680      	mov	r8, r0
 800564a:	9805      	ldr	r0, [sp, #20]
 800564c:	4689      	mov	r9, r1
 800564e:	f7fa fec9 	bl	80003e4 <__aeabi_ui2d>
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	4640      	mov	r0, r8
 8005658:	4649      	mov	r1, r9
 800565a:	f7fa fd87 	bl	800016c <__adddf3>
 800565e:	4680      	mov	r8, r0
 8005660:	4689      	mov	r9, r1
 8005662:	2c0f      	cmp	r4, #15
 8005664:	dc36      	bgt.n	80056d4 <_strtod_l+0x43c>
 8005666:	9b07      	ldr	r3, [sp, #28]
 8005668:	2b00      	cmp	r3, #0
 800566a:	f43f ae56 	beq.w	800531a <_strtod_l+0x82>
 800566e:	dd22      	ble.n	80056b6 <_strtod_l+0x41e>
 8005670:	2b16      	cmp	r3, #22
 8005672:	dc09      	bgt.n	8005688 <_strtod_l+0x3f0>
 8005674:	496c      	ldr	r1, [pc, #432]	; (8005828 <_strtod_l+0x590>)
 8005676:	4642      	mov	r2, r8
 8005678:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800567c:	464b      	mov	r3, r9
 800567e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005682:	f7fa ff29 	bl	80004d8 <__aeabi_dmul>
 8005686:	e7c3      	b.n	8005610 <_strtod_l+0x378>
 8005688:	9a07      	ldr	r2, [sp, #28]
 800568a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800568e:	4293      	cmp	r3, r2
 8005690:	db20      	blt.n	80056d4 <_strtod_l+0x43c>
 8005692:	4d65      	ldr	r5, [pc, #404]	; (8005828 <_strtod_l+0x590>)
 8005694:	f1c4 040f 	rsb	r4, r4, #15
 8005698:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800569c:	4642      	mov	r2, r8
 800569e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056a2:	464b      	mov	r3, r9
 80056a4:	f7fa ff18 	bl	80004d8 <__aeabi_dmul>
 80056a8:	9b07      	ldr	r3, [sp, #28]
 80056aa:	1b1c      	subs	r4, r3, r4
 80056ac:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80056b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80056b4:	e7e5      	b.n	8005682 <_strtod_l+0x3ea>
 80056b6:	9b07      	ldr	r3, [sp, #28]
 80056b8:	3316      	adds	r3, #22
 80056ba:	db0b      	blt.n	80056d4 <_strtod_l+0x43c>
 80056bc:	9b04      	ldr	r3, [sp, #16]
 80056be:	4640      	mov	r0, r8
 80056c0:	1b5d      	subs	r5, r3, r5
 80056c2:	4b59      	ldr	r3, [pc, #356]	; (8005828 <_strtod_l+0x590>)
 80056c4:	4649      	mov	r1, r9
 80056c6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80056ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80056ce:	f7fb f82d 	bl	800072c <__aeabi_ddiv>
 80056d2:	e79d      	b.n	8005610 <_strtod_l+0x378>
 80056d4:	9b07      	ldr	r3, [sp, #28]
 80056d6:	1ba6      	subs	r6, r4, r6
 80056d8:	441e      	add	r6, r3
 80056da:	2e00      	cmp	r6, #0
 80056dc:	dd74      	ble.n	80057c8 <_strtod_l+0x530>
 80056de:	f016 030f 	ands.w	r3, r6, #15
 80056e2:	d00a      	beq.n	80056fa <_strtod_l+0x462>
 80056e4:	4950      	ldr	r1, [pc, #320]	; (8005828 <_strtod_l+0x590>)
 80056e6:	4642      	mov	r2, r8
 80056e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80056ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056f0:	464b      	mov	r3, r9
 80056f2:	f7fa fef1 	bl	80004d8 <__aeabi_dmul>
 80056f6:	4680      	mov	r8, r0
 80056f8:	4689      	mov	r9, r1
 80056fa:	f036 060f 	bics.w	r6, r6, #15
 80056fe:	d052      	beq.n	80057a6 <_strtod_l+0x50e>
 8005700:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005704:	dd27      	ble.n	8005756 <_strtod_l+0x4be>
 8005706:	f04f 0b00 	mov.w	fp, #0
 800570a:	f8cd b010 	str.w	fp, [sp, #16]
 800570e:	f8cd b020 	str.w	fp, [sp, #32]
 8005712:	f8cd b018 	str.w	fp, [sp, #24]
 8005716:	2322      	movs	r3, #34	; 0x22
 8005718:	f04f 0800 	mov.w	r8, #0
 800571c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005820 <_strtod_l+0x588>
 8005720:	f8ca 3000 	str.w	r3, [sl]
 8005724:	9b08      	ldr	r3, [sp, #32]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f43f adf7 	beq.w	800531a <_strtod_l+0x82>
 800572c:	4650      	mov	r0, sl
 800572e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005730:	f001 fe78 	bl	8007424 <_Bfree>
 8005734:	4650      	mov	r0, sl
 8005736:	9906      	ldr	r1, [sp, #24]
 8005738:	f001 fe74 	bl	8007424 <_Bfree>
 800573c:	4650      	mov	r0, sl
 800573e:	9904      	ldr	r1, [sp, #16]
 8005740:	f001 fe70 	bl	8007424 <_Bfree>
 8005744:	4650      	mov	r0, sl
 8005746:	9908      	ldr	r1, [sp, #32]
 8005748:	f001 fe6c 	bl	8007424 <_Bfree>
 800574c:	4659      	mov	r1, fp
 800574e:	4650      	mov	r0, sl
 8005750:	f001 fe68 	bl	8007424 <_Bfree>
 8005754:	e5e1      	b.n	800531a <_strtod_l+0x82>
 8005756:	4b35      	ldr	r3, [pc, #212]	; (800582c <_strtod_l+0x594>)
 8005758:	4640      	mov	r0, r8
 800575a:	9305      	str	r3, [sp, #20]
 800575c:	2300      	movs	r3, #0
 800575e:	4649      	mov	r1, r9
 8005760:	461f      	mov	r7, r3
 8005762:	1136      	asrs	r6, r6, #4
 8005764:	2e01      	cmp	r6, #1
 8005766:	dc21      	bgt.n	80057ac <_strtod_l+0x514>
 8005768:	b10b      	cbz	r3, 800576e <_strtod_l+0x4d6>
 800576a:	4680      	mov	r8, r0
 800576c:	4689      	mov	r9, r1
 800576e:	4b2f      	ldr	r3, [pc, #188]	; (800582c <_strtod_l+0x594>)
 8005770:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005774:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005778:	4642      	mov	r2, r8
 800577a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800577e:	464b      	mov	r3, r9
 8005780:	f7fa feaa 	bl	80004d8 <__aeabi_dmul>
 8005784:	4b26      	ldr	r3, [pc, #152]	; (8005820 <_strtod_l+0x588>)
 8005786:	460a      	mov	r2, r1
 8005788:	400b      	ands	r3, r1
 800578a:	4929      	ldr	r1, [pc, #164]	; (8005830 <_strtod_l+0x598>)
 800578c:	4680      	mov	r8, r0
 800578e:	428b      	cmp	r3, r1
 8005790:	d8b9      	bhi.n	8005706 <_strtod_l+0x46e>
 8005792:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005796:	428b      	cmp	r3, r1
 8005798:	bf86      	itte	hi
 800579a:	f04f 38ff 	movhi.w	r8, #4294967295
 800579e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005834 <_strtod_l+0x59c>
 80057a2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80057a6:	2300      	movs	r3, #0
 80057a8:	9305      	str	r3, [sp, #20]
 80057aa:	e07f      	b.n	80058ac <_strtod_l+0x614>
 80057ac:	07f2      	lsls	r2, r6, #31
 80057ae:	d505      	bpl.n	80057bc <_strtod_l+0x524>
 80057b0:	9b05      	ldr	r3, [sp, #20]
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	f7fa fe8f 	bl	80004d8 <__aeabi_dmul>
 80057ba:	2301      	movs	r3, #1
 80057bc:	9a05      	ldr	r2, [sp, #20]
 80057be:	3701      	adds	r7, #1
 80057c0:	3208      	adds	r2, #8
 80057c2:	1076      	asrs	r6, r6, #1
 80057c4:	9205      	str	r2, [sp, #20]
 80057c6:	e7cd      	b.n	8005764 <_strtod_l+0x4cc>
 80057c8:	d0ed      	beq.n	80057a6 <_strtod_l+0x50e>
 80057ca:	4276      	negs	r6, r6
 80057cc:	f016 020f 	ands.w	r2, r6, #15
 80057d0:	d00a      	beq.n	80057e8 <_strtod_l+0x550>
 80057d2:	4b15      	ldr	r3, [pc, #84]	; (8005828 <_strtod_l+0x590>)
 80057d4:	4640      	mov	r0, r8
 80057d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057da:	4649      	mov	r1, r9
 80057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e0:	f7fa ffa4 	bl	800072c <__aeabi_ddiv>
 80057e4:	4680      	mov	r8, r0
 80057e6:	4689      	mov	r9, r1
 80057e8:	1136      	asrs	r6, r6, #4
 80057ea:	d0dc      	beq.n	80057a6 <_strtod_l+0x50e>
 80057ec:	2e1f      	cmp	r6, #31
 80057ee:	dd23      	ble.n	8005838 <_strtod_l+0x5a0>
 80057f0:	f04f 0b00 	mov.w	fp, #0
 80057f4:	f8cd b010 	str.w	fp, [sp, #16]
 80057f8:	f8cd b020 	str.w	fp, [sp, #32]
 80057fc:	f8cd b018 	str.w	fp, [sp, #24]
 8005800:	2322      	movs	r3, #34	; 0x22
 8005802:	f04f 0800 	mov.w	r8, #0
 8005806:	f04f 0900 	mov.w	r9, #0
 800580a:	f8ca 3000 	str.w	r3, [sl]
 800580e:	e789      	b.n	8005724 <_strtod_l+0x48c>
 8005810:	08009571 	.word	0x08009571
 8005814:	080095b4 	.word	0x080095b4
 8005818:	08009569 	.word	0x08009569
 800581c:	080096f4 	.word	0x080096f4
 8005820:	7ff00000 	.word	0x7ff00000
 8005824:	080099a0 	.word	0x080099a0
 8005828:	08009880 	.word	0x08009880
 800582c:	08009858 	.word	0x08009858
 8005830:	7ca00000 	.word	0x7ca00000
 8005834:	7fefffff 	.word	0x7fefffff
 8005838:	f016 0310 	ands.w	r3, r6, #16
 800583c:	bf18      	it	ne
 800583e:	236a      	movne	r3, #106	; 0x6a
 8005840:	4640      	mov	r0, r8
 8005842:	9305      	str	r3, [sp, #20]
 8005844:	4649      	mov	r1, r9
 8005846:	2300      	movs	r3, #0
 8005848:	4fb0      	ldr	r7, [pc, #704]	; (8005b0c <_strtod_l+0x874>)
 800584a:	07f2      	lsls	r2, r6, #31
 800584c:	d504      	bpl.n	8005858 <_strtod_l+0x5c0>
 800584e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005852:	f7fa fe41 	bl	80004d8 <__aeabi_dmul>
 8005856:	2301      	movs	r3, #1
 8005858:	1076      	asrs	r6, r6, #1
 800585a:	f107 0708 	add.w	r7, r7, #8
 800585e:	d1f4      	bne.n	800584a <_strtod_l+0x5b2>
 8005860:	b10b      	cbz	r3, 8005866 <_strtod_l+0x5ce>
 8005862:	4680      	mov	r8, r0
 8005864:	4689      	mov	r9, r1
 8005866:	9b05      	ldr	r3, [sp, #20]
 8005868:	b1c3      	cbz	r3, 800589c <_strtod_l+0x604>
 800586a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800586e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005872:	2b00      	cmp	r3, #0
 8005874:	4649      	mov	r1, r9
 8005876:	dd11      	ble.n	800589c <_strtod_l+0x604>
 8005878:	2b1f      	cmp	r3, #31
 800587a:	f340 8127 	ble.w	8005acc <_strtod_l+0x834>
 800587e:	2b34      	cmp	r3, #52	; 0x34
 8005880:	bfd8      	it	le
 8005882:	f04f 33ff 	movle.w	r3, #4294967295
 8005886:	f04f 0800 	mov.w	r8, #0
 800588a:	bfcf      	iteee	gt
 800588c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005890:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005894:	fa03 f202 	lslle.w	r2, r3, r2
 8005898:	ea02 0901 	andle.w	r9, r2, r1
 800589c:	2200      	movs	r2, #0
 800589e:	2300      	movs	r3, #0
 80058a0:	4640      	mov	r0, r8
 80058a2:	4649      	mov	r1, r9
 80058a4:	f7fb f880 	bl	80009a8 <__aeabi_dcmpeq>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d1a1      	bne.n	80057f0 <_strtod_l+0x558>
 80058ac:	9b06      	ldr	r3, [sp, #24]
 80058ae:	465a      	mov	r2, fp
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	4650      	mov	r0, sl
 80058b4:	4623      	mov	r3, r4
 80058b6:	9908      	ldr	r1, [sp, #32]
 80058b8:	f001 fe1c 	bl	80074f4 <__s2b>
 80058bc:	9008      	str	r0, [sp, #32]
 80058be:	2800      	cmp	r0, #0
 80058c0:	f43f af21 	beq.w	8005706 <_strtod_l+0x46e>
 80058c4:	9b04      	ldr	r3, [sp, #16]
 80058c6:	f04f 0b00 	mov.w	fp, #0
 80058ca:	1b5d      	subs	r5, r3, r5
 80058cc:	9b07      	ldr	r3, [sp, #28]
 80058ce:	f8cd b010 	str.w	fp, [sp, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	bfb4      	ite	lt
 80058d6:	462b      	movlt	r3, r5
 80058d8:	2300      	movge	r3, #0
 80058da:	930e      	str	r3, [sp, #56]	; 0x38
 80058dc:	9b07      	ldr	r3, [sp, #28]
 80058de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80058e2:	9314      	str	r3, [sp, #80]	; 0x50
 80058e4:	9b08      	ldr	r3, [sp, #32]
 80058e6:	4650      	mov	r0, sl
 80058e8:	6859      	ldr	r1, [r3, #4]
 80058ea:	f001 fd5b 	bl	80073a4 <_Balloc>
 80058ee:	9006      	str	r0, [sp, #24]
 80058f0:	2800      	cmp	r0, #0
 80058f2:	f43f af10 	beq.w	8005716 <_strtod_l+0x47e>
 80058f6:	9b08      	ldr	r3, [sp, #32]
 80058f8:	300c      	adds	r0, #12
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	f103 010c 	add.w	r1, r3, #12
 8005900:	3202      	adds	r2, #2
 8005902:	0092      	lsls	r2, r2, #2
 8005904:	f001 fd40 	bl	8007388 <memcpy>
 8005908:	ab1c      	add	r3, sp, #112	; 0x70
 800590a:	9301      	str	r3, [sp, #4]
 800590c:	ab1b      	add	r3, sp, #108	; 0x6c
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	4642      	mov	r2, r8
 8005912:	464b      	mov	r3, r9
 8005914:	4650      	mov	r0, sl
 8005916:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800591a:	f002 f92d 	bl	8007b78 <__d2b>
 800591e:	901a      	str	r0, [sp, #104]	; 0x68
 8005920:	2800      	cmp	r0, #0
 8005922:	f43f aef8 	beq.w	8005716 <_strtod_l+0x47e>
 8005926:	2101      	movs	r1, #1
 8005928:	4650      	mov	r0, sl
 800592a:	f001 fe7b 	bl	8007624 <__i2b>
 800592e:	4603      	mov	r3, r0
 8005930:	9004      	str	r0, [sp, #16]
 8005932:	2800      	cmp	r0, #0
 8005934:	f43f aeef 	beq.w	8005716 <_strtod_l+0x47e>
 8005938:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800593a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800593c:	2d00      	cmp	r5, #0
 800593e:	bfab      	itete	ge
 8005940:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005942:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8005944:	18ee      	addge	r6, r5, r3
 8005946:	1b5c      	sublt	r4, r3, r5
 8005948:	9b05      	ldr	r3, [sp, #20]
 800594a:	bfa8      	it	ge
 800594c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800594e:	eba5 0503 	sub.w	r5, r5, r3
 8005952:	4415      	add	r5, r2
 8005954:	4b6e      	ldr	r3, [pc, #440]	; (8005b10 <_strtod_l+0x878>)
 8005956:	f105 35ff 	add.w	r5, r5, #4294967295
 800595a:	bfb8      	it	lt
 800595c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800595e:	429d      	cmp	r5, r3
 8005960:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005964:	f280 80c4 	bge.w	8005af0 <_strtod_l+0x858>
 8005968:	1b5b      	subs	r3, r3, r5
 800596a:	2b1f      	cmp	r3, #31
 800596c:	f04f 0701 	mov.w	r7, #1
 8005970:	eba2 0203 	sub.w	r2, r2, r3
 8005974:	f300 80b1 	bgt.w	8005ada <_strtod_l+0x842>
 8005978:	2500      	movs	r5, #0
 800597a:	fa07 f303 	lsl.w	r3, r7, r3
 800597e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005980:	18b7      	adds	r7, r6, r2
 8005982:	9b05      	ldr	r3, [sp, #20]
 8005984:	42be      	cmp	r6, r7
 8005986:	4414      	add	r4, r2
 8005988:	441c      	add	r4, r3
 800598a:	4633      	mov	r3, r6
 800598c:	bfa8      	it	ge
 800598e:	463b      	movge	r3, r7
 8005990:	42a3      	cmp	r3, r4
 8005992:	bfa8      	it	ge
 8005994:	4623      	movge	r3, r4
 8005996:	2b00      	cmp	r3, #0
 8005998:	bfc2      	ittt	gt
 800599a:	1aff      	subgt	r7, r7, r3
 800599c:	1ae4      	subgt	r4, r4, r3
 800599e:	1af6      	subgt	r6, r6, r3
 80059a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	dd17      	ble.n	80059d6 <_strtod_l+0x73e>
 80059a6:	461a      	mov	r2, r3
 80059a8:	4650      	mov	r0, sl
 80059aa:	9904      	ldr	r1, [sp, #16]
 80059ac:	f001 fef8 	bl	80077a0 <__pow5mult>
 80059b0:	9004      	str	r0, [sp, #16]
 80059b2:	2800      	cmp	r0, #0
 80059b4:	f43f aeaf 	beq.w	8005716 <_strtod_l+0x47e>
 80059b8:	4601      	mov	r1, r0
 80059ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80059bc:	4650      	mov	r0, sl
 80059be:	f001 fe47 	bl	8007650 <__multiply>
 80059c2:	9009      	str	r0, [sp, #36]	; 0x24
 80059c4:	2800      	cmp	r0, #0
 80059c6:	f43f aea6 	beq.w	8005716 <_strtod_l+0x47e>
 80059ca:	4650      	mov	r0, sl
 80059cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80059ce:	f001 fd29 	bl	8007424 <_Bfree>
 80059d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059d4:	931a      	str	r3, [sp, #104]	; 0x68
 80059d6:	2f00      	cmp	r7, #0
 80059d8:	f300 808e 	bgt.w	8005af8 <_strtod_l+0x860>
 80059dc:	9b07      	ldr	r3, [sp, #28]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	dd08      	ble.n	80059f4 <_strtod_l+0x75c>
 80059e2:	4650      	mov	r0, sl
 80059e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80059e6:	9906      	ldr	r1, [sp, #24]
 80059e8:	f001 feda 	bl	80077a0 <__pow5mult>
 80059ec:	9006      	str	r0, [sp, #24]
 80059ee:	2800      	cmp	r0, #0
 80059f0:	f43f ae91 	beq.w	8005716 <_strtod_l+0x47e>
 80059f4:	2c00      	cmp	r4, #0
 80059f6:	dd08      	ble.n	8005a0a <_strtod_l+0x772>
 80059f8:	4622      	mov	r2, r4
 80059fa:	4650      	mov	r0, sl
 80059fc:	9906      	ldr	r1, [sp, #24]
 80059fe:	f001 ff29 	bl	8007854 <__lshift>
 8005a02:	9006      	str	r0, [sp, #24]
 8005a04:	2800      	cmp	r0, #0
 8005a06:	f43f ae86 	beq.w	8005716 <_strtod_l+0x47e>
 8005a0a:	2e00      	cmp	r6, #0
 8005a0c:	dd08      	ble.n	8005a20 <_strtod_l+0x788>
 8005a0e:	4632      	mov	r2, r6
 8005a10:	4650      	mov	r0, sl
 8005a12:	9904      	ldr	r1, [sp, #16]
 8005a14:	f001 ff1e 	bl	8007854 <__lshift>
 8005a18:	9004      	str	r0, [sp, #16]
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	f43f ae7b 	beq.w	8005716 <_strtod_l+0x47e>
 8005a20:	4650      	mov	r0, sl
 8005a22:	9a06      	ldr	r2, [sp, #24]
 8005a24:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005a26:	f001 ffa1 	bl	800796c <__mdiff>
 8005a2a:	4683      	mov	fp, r0
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	f43f ae72 	beq.w	8005716 <_strtod_l+0x47e>
 8005a32:	2400      	movs	r4, #0
 8005a34:	68c3      	ldr	r3, [r0, #12]
 8005a36:	9904      	ldr	r1, [sp, #16]
 8005a38:	60c4      	str	r4, [r0, #12]
 8005a3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a3c:	f001 ff7a 	bl	8007934 <__mcmp>
 8005a40:	42a0      	cmp	r0, r4
 8005a42:	da6b      	bge.n	8005b1c <_strtod_l+0x884>
 8005a44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a46:	ea53 0308 	orrs.w	r3, r3, r8
 8005a4a:	f040 8091 	bne.w	8005b70 <_strtod_l+0x8d8>
 8005a4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f040 808c 	bne.w	8005b70 <_strtod_l+0x8d8>
 8005a58:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a5c:	0d1b      	lsrs	r3, r3, #20
 8005a5e:	051b      	lsls	r3, r3, #20
 8005a60:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005a64:	f240 8084 	bls.w	8005b70 <_strtod_l+0x8d8>
 8005a68:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005a6c:	b91b      	cbnz	r3, 8005a76 <_strtod_l+0x7de>
 8005a6e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	dd7c      	ble.n	8005b70 <_strtod_l+0x8d8>
 8005a76:	4659      	mov	r1, fp
 8005a78:	2201      	movs	r2, #1
 8005a7a:	4650      	mov	r0, sl
 8005a7c:	f001 feea 	bl	8007854 <__lshift>
 8005a80:	9904      	ldr	r1, [sp, #16]
 8005a82:	4683      	mov	fp, r0
 8005a84:	f001 ff56 	bl	8007934 <__mcmp>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	dd71      	ble.n	8005b70 <_strtod_l+0x8d8>
 8005a8c:	9905      	ldr	r1, [sp, #20]
 8005a8e:	464b      	mov	r3, r9
 8005a90:	4a20      	ldr	r2, [pc, #128]	; (8005b14 <_strtod_l+0x87c>)
 8005a92:	2900      	cmp	r1, #0
 8005a94:	f000 808c 	beq.w	8005bb0 <_strtod_l+0x918>
 8005a98:	ea02 0109 	and.w	r1, r2, r9
 8005a9c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005aa0:	f300 8086 	bgt.w	8005bb0 <_strtod_l+0x918>
 8005aa4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005aa8:	f77f aeaa 	ble.w	8005800 <_strtod_l+0x568>
 8005aac:	4640      	mov	r0, r8
 8005aae:	4649      	mov	r1, r9
 8005ab0:	4b19      	ldr	r3, [pc, #100]	; (8005b18 <_strtod_l+0x880>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f7fa fd10 	bl	80004d8 <__aeabi_dmul>
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4303      	orrs	r3, r0
 8005abc:	bf08      	it	eq
 8005abe:	2322      	moveq	r3, #34	; 0x22
 8005ac0:	4680      	mov	r8, r0
 8005ac2:	4689      	mov	r9, r1
 8005ac4:	bf08      	it	eq
 8005ac6:	f8ca 3000 	streq.w	r3, [sl]
 8005aca:	e62f      	b.n	800572c <_strtod_l+0x494>
 8005acc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad4:	ea03 0808 	and.w	r8, r3, r8
 8005ad8:	e6e0      	b.n	800589c <_strtod_l+0x604>
 8005ada:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005ade:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005ae2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005ae6:	35e2      	adds	r5, #226	; 0xe2
 8005ae8:	fa07 f505 	lsl.w	r5, r7, r5
 8005aec:	970f      	str	r7, [sp, #60]	; 0x3c
 8005aee:	e747      	b.n	8005980 <_strtod_l+0x6e8>
 8005af0:	2301      	movs	r3, #1
 8005af2:	2500      	movs	r5, #0
 8005af4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005af6:	e743      	b.n	8005980 <_strtod_l+0x6e8>
 8005af8:	463a      	mov	r2, r7
 8005afa:	4650      	mov	r0, sl
 8005afc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005afe:	f001 fea9 	bl	8007854 <__lshift>
 8005b02:	901a      	str	r0, [sp, #104]	; 0x68
 8005b04:	2800      	cmp	r0, #0
 8005b06:	f47f af69 	bne.w	80059dc <_strtod_l+0x744>
 8005b0a:	e604      	b.n	8005716 <_strtod_l+0x47e>
 8005b0c:	080095c8 	.word	0x080095c8
 8005b10:	fffffc02 	.word	0xfffffc02
 8005b14:	7ff00000 	.word	0x7ff00000
 8005b18:	39500000 	.word	0x39500000
 8005b1c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005b20:	d165      	bne.n	8005bee <_strtod_l+0x956>
 8005b22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b28:	b35a      	cbz	r2, 8005b82 <_strtod_l+0x8ea>
 8005b2a:	4a99      	ldr	r2, [pc, #612]	; (8005d90 <_strtod_l+0xaf8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d12b      	bne.n	8005b88 <_strtod_l+0x8f0>
 8005b30:	9b05      	ldr	r3, [sp, #20]
 8005b32:	4641      	mov	r1, r8
 8005b34:	b303      	cbz	r3, 8005b78 <_strtod_l+0x8e0>
 8005b36:	464a      	mov	r2, r9
 8005b38:	4b96      	ldr	r3, [pc, #600]	; (8005d94 <_strtod_l+0xafc>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005b40:	f04f 32ff 	mov.w	r2, #4294967295
 8005b44:	d81b      	bhi.n	8005b7e <_strtod_l+0x8e6>
 8005b46:	0d1b      	lsrs	r3, r3, #20
 8005b48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b50:	4299      	cmp	r1, r3
 8005b52:	d119      	bne.n	8005b88 <_strtod_l+0x8f0>
 8005b54:	4b90      	ldr	r3, [pc, #576]	; (8005d98 <_strtod_l+0xb00>)
 8005b56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d102      	bne.n	8005b62 <_strtod_l+0x8ca>
 8005b5c:	3101      	adds	r1, #1
 8005b5e:	f43f adda 	beq.w	8005716 <_strtod_l+0x47e>
 8005b62:	f04f 0800 	mov.w	r8, #0
 8005b66:	4b8b      	ldr	r3, [pc, #556]	; (8005d94 <_strtod_l+0xafc>)
 8005b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b6a:	401a      	ands	r2, r3
 8005b6c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005b70:	9b05      	ldr	r3, [sp, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d19a      	bne.n	8005aac <_strtod_l+0x814>
 8005b76:	e5d9      	b.n	800572c <_strtod_l+0x494>
 8005b78:	f04f 33ff 	mov.w	r3, #4294967295
 8005b7c:	e7e8      	b.n	8005b50 <_strtod_l+0x8b8>
 8005b7e:	4613      	mov	r3, r2
 8005b80:	e7e6      	b.n	8005b50 <_strtod_l+0x8b8>
 8005b82:	ea53 0308 	orrs.w	r3, r3, r8
 8005b86:	d081      	beq.n	8005a8c <_strtod_l+0x7f4>
 8005b88:	b1e5      	cbz	r5, 8005bc4 <_strtod_l+0x92c>
 8005b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b8c:	421d      	tst	r5, r3
 8005b8e:	d0ef      	beq.n	8005b70 <_strtod_l+0x8d8>
 8005b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b92:	4640      	mov	r0, r8
 8005b94:	4649      	mov	r1, r9
 8005b96:	9a05      	ldr	r2, [sp, #20]
 8005b98:	b1c3      	cbz	r3, 8005bcc <_strtod_l+0x934>
 8005b9a:	f7ff fb5b 	bl	8005254 <sulp>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ba6:	f7fa fae1 	bl	800016c <__adddf3>
 8005baa:	4680      	mov	r8, r0
 8005bac:	4689      	mov	r9, r1
 8005bae:	e7df      	b.n	8005b70 <_strtod_l+0x8d8>
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005bb6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005bba:	f04f 38ff 	mov.w	r8, #4294967295
 8005bbe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005bc2:	e7d5      	b.n	8005b70 <_strtod_l+0x8d8>
 8005bc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bc6:	ea13 0f08 	tst.w	r3, r8
 8005bca:	e7e0      	b.n	8005b8e <_strtod_l+0x8f6>
 8005bcc:	f7ff fb42 	bl	8005254 <sulp>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005bd8:	f7fa fac6 	bl	8000168 <__aeabi_dsub>
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2300      	movs	r3, #0
 8005be0:	4680      	mov	r8, r0
 8005be2:	4689      	mov	r9, r1
 8005be4:	f7fa fee0 	bl	80009a8 <__aeabi_dcmpeq>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d0c1      	beq.n	8005b70 <_strtod_l+0x8d8>
 8005bec:	e608      	b.n	8005800 <_strtod_l+0x568>
 8005bee:	4658      	mov	r0, fp
 8005bf0:	9904      	ldr	r1, [sp, #16]
 8005bf2:	f002 f81d 	bl	8007c30 <__ratio>
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005bfc:	4606      	mov	r6, r0
 8005bfe:	460f      	mov	r7, r1
 8005c00:	f7fa fee6 	bl	80009d0 <__aeabi_dcmple>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d070      	beq.n	8005cea <_strtod_l+0xa52>
 8005c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d042      	beq.n	8005c94 <_strtod_l+0x9fc>
 8005c0e:	2600      	movs	r6, #0
 8005c10:	4f62      	ldr	r7, [pc, #392]	; (8005d9c <_strtod_l+0xb04>)
 8005c12:	4d62      	ldr	r5, [pc, #392]	; (8005d9c <_strtod_l+0xb04>)
 8005c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c1a:	0d1b      	lsrs	r3, r3, #20
 8005c1c:	051b      	lsls	r3, r3, #20
 8005c1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c22:	4b5f      	ldr	r3, [pc, #380]	; (8005da0 <_strtod_l+0xb08>)
 8005c24:	429a      	cmp	r2, r3
 8005c26:	f040 80c3 	bne.w	8005db0 <_strtod_l+0xb18>
 8005c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c2c:	4640      	mov	r0, r8
 8005c2e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005c32:	4649      	mov	r1, r9
 8005c34:	f001 ff26 	bl	8007a84 <__ulp>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	4639      	mov	r1, r7
 8005c40:	f7fa fc4a 	bl	80004d8 <__aeabi_dmul>
 8005c44:	4642      	mov	r2, r8
 8005c46:	464b      	mov	r3, r9
 8005c48:	f7fa fa90 	bl	800016c <__adddf3>
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4951      	ldr	r1, [pc, #324]	; (8005d94 <_strtod_l+0xafc>)
 8005c50:	4a54      	ldr	r2, [pc, #336]	; (8005da4 <_strtod_l+0xb0c>)
 8005c52:	4019      	ands	r1, r3
 8005c54:	4291      	cmp	r1, r2
 8005c56:	4680      	mov	r8, r0
 8005c58:	d95d      	bls.n	8005d16 <_strtod_l+0xa7e>
 8005c5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c5c:	4b4e      	ldr	r3, [pc, #312]	; (8005d98 <_strtod_l+0xb00>)
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d103      	bne.n	8005c6a <_strtod_l+0x9d2>
 8005c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c64:	3301      	adds	r3, #1
 8005c66:	f43f ad56 	beq.w	8005716 <_strtod_l+0x47e>
 8005c6a:	f04f 38ff 	mov.w	r8, #4294967295
 8005c6e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005d98 <_strtod_l+0xb00>
 8005c72:	4650      	mov	r0, sl
 8005c74:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005c76:	f001 fbd5 	bl	8007424 <_Bfree>
 8005c7a:	4650      	mov	r0, sl
 8005c7c:	9906      	ldr	r1, [sp, #24]
 8005c7e:	f001 fbd1 	bl	8007424 <_Bfree>
 8005c82:	4650      	mov	r0, sl
 8005c84:	9904      	ldr	r1, [sp, #16]
 8005c86:	f001 fbcd 	bl	8007424 <_Bfree>
 8005c8a:	4659      	mov	r1, fp
 8005c8c:	4650      	mov	r0, sl
 8005c8e:	f001 fbc9 	bl	8007424 <_Bfree>
 8005c92:	e627      	b.n	80058e4 <_strtod_l+0x64c>
 8005c94:	f1b8 0f00 	cmp.w	r8, #0
 8005c98:	d119      	bne.n	8005cce <_strtod_l+0xa36>
 8005c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ca0:	b9e3      	cbnz	r3, 8005cdc <_strtod_l+0xa44>
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	4b3c      	ldr	r3, [pc, #240]	; (8005d9c <_strtod_l+0xb04>)
 8005caa:	f7fa fe87 	bl	80009bc <__aeabi_dcmplt>
 8005cae:	b9c8      	cbnz	r0, 8005ce4 <_strtod_l+0xa4c>
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	4639      	mov	r1, r7
 8005cb6:	4b3c      	ldr	r3, [pc, #240]	; (8005da8 <_strtod_l+0xb10>)
 8005cb8:	f7fa fc0e 	bl	80004d8 <__aeabi_dmul>
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	460d      	mov	r5, r1
 8005cc0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005cc4:	9416      	str	r4, [sp, #88]	; 0x58
 8005cc6:	9317      	str	r3, [sp, #92]	; 0x5c
 8005cc8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005ccc:	e7a2      	b.n	8005c14 <_strtod_l+0x97c>
 8005cce:	f1b8 0f01 	cmp.w	r8, #1
 8005cd2:	d103      	bne.n	8005cdc <_strtod_l+0xa44>
 8005cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f43f ad92 	beq.w	8005800 <_strtod_l+0x568>
 8005cdc:	2600      	movs	r6, #0
 8005cde:	2400      	movs	r4, #0
 8005ce0:	4f32      	ldr	r7, [pc, #200]	; (8005dac <_strtod_l+0xb14>)
 8005ce2:	e796      	b.n	8005c12 <_strtod_l+0x97a>
 8005ce4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005ce6:	4d30      	ldr	r5, [pc, #192]	; (8005da8 <_strtod_l+0xb10>)
 8005ce8:	e7ea      	b.n	8005cc0 <_strtod_l+0xa28>
 8005cea:	4b2f      	ldr	r3, [pc, #188]	; (8005da8 <_strtod_l+0xb10>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	4630      	mov	r0, r6
 8005cf0:	4639      	mov	r1, r7
 8005cf2:	f7fa fbf1 	bl	80004d8 <__aeabi_dmul>
 8005cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	460d      	mov	r5, r1
 8005cfc:	b933      	cbnz	r3, 8005d0c <_strtod_l+0xa74>
 8005cfe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d02:	9010      	str	r0, [sp, #64]	; 0x40
 8005d04:	9311      	str	r3, [sp, #68]	; 0x44
 8005d06:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005d0a:	e783      	b.n	8005c14 <_strtod_l+0x97c>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005d14:	e7f7      	b.n	8005d06 <_strtod_l+0xa6e>
 8005d16:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005d1a:	9b05      	ldr	r3, [sp, #20]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1a8      	bne.n	8005c72 <_strtod_l+0x9da>
 8005d20:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d26:	0d1b      	lsrs	r3, r3, #20
 8005d28:	051b      	lsls	r3, r3, #20
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d1a1      	bne.n	8005c72 <_strtod_l+0x9da>
 8005d2e:	4620      	mov	r0, r4
 8005d30:	4629      	mov	r1, r5
 8005d32:	f7fa ff19 	bl	8000b68 <__aeabi_d2lz>
 8005d36:	f7fa fba1 	bl	800047c <__aeabi_l2d>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4620      	mov	r0, r4
 8005d40:	4629      	mov	r1, r5
 8005d42:	f7fa fa11 	bl	8000168 <__aeabi_dsub>
 8005d46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d4c:	ea43 0308 	orr.w	r3, r3, r8
 8005d50:	4313      	orrs	r3, r2
 8005d52:	4604      	mov	r4, r0
 8005d54:	460d      	mov	r5, r1
 8005d56:	d066      	beq.n	8005e26 <_strtod_l+0xb8e>
 8005d58:	a309      	add	r3, pc, #36	; (adr r3, 8005d80 <_strtod_l+0xae8>)
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	f7fa fe2d 	bl	80009bc <__aeabi_dcmplt>
 8005d62:	2800      	cmp	r0, #0
 8005d64:	f47f ace2 	bne.w	800572c <_strtod_l+0x494>
 8005d68:	a307      	add	r3, pc, #28	; (adr r3, 8005d88 <_strtod_l+0xaf0>)
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	4620      	mov	r0, r4
 8005d70:	4629      	mov	r1, r5
 8005d72:	f7fa fe41 	bl	80009f8 <__aeabi_dcmpgt>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	f43f af7b 	beq.w	8005c72 <_strtod_l+0x9da>
 8005d7c:	e4d6      	b.n	800572c <_strtod_l+0x494>
 8005d7e:	bf00      	nop
 8005d80:	94a03595 	.word	0x94a03595
 8005d84:	3fdfffff 	.word	0x3fdfffff
 8005d88:	35afe535 	.word	0x35afe535
 8005d8c:	3fe00000 	.word	0x3fe00000
 8005d90:	000fffff 	.word	0x000fffff
 8005d94:	7ff00000 	.word	0x7ff00000
 8005d98:	7fefffff 	.word	0x7fefffff
 8005d9c:	3ff00000 	.word	0x3ff00000
 8005da0:	7fe00000 	.word	0x7fe00000
 8005da4:	7c9fffff 	.word	0x7c9fffff
 8005da8:	3fe00000 	.word	0x3fe00000
 8005dac:	bff00000 	.word	0xbff00000
 8005db0:	9b05      	ldr	r3, [sp, #20]
 8005db2:	b313      	cbz	r3, 8005dfa <_strtod_l+0xb62>
 8005db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005db6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005dba:	d81e      	bhi.n	8005dfa <_strtod_l+0xb62>
 8005dbc:	a326      	add	r3, pc, #152	; (adr r3, 8005e58 <_strtod_l+0xbc0>)
 8005dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	f7fa fe03 	bl	80009d0 <__aeabi_dcmple>
 8005dca:	b190      	cbz	r0, 8005df2 <_strtod_l+0xb5a>
 8005dcc:	4629      	mov	r1, r5
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f7fa fe5a 	bl	8000a88 <__aeabi_d2uiz>
 8005dd4:	2801      	cmp	r0, #1
 8005dd6:	bf38      	it	cc
 8005dd8:	2001      	movcc	r0, #1
 8005dda:	f7fa fb03 	bl	80003e4 <__aeabi_ui2d>
 8005dde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005de0:	4604      	mov	r4, r0
 8005de2:	460d      	mov	r5, r1
 8005de4:	b9d3      	cbnz	r3, 8005e1c <_strtod_l+0xb84>
 8005de6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dea:	9012      	str	r0, [sp, #72]	; 0x48
 8005dec:	9313      	str	r3, [sp, #76]	; 0x4c
 8005dee:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005df2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005df4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005df8:	1a9f      	subs	r7, r3, r2
 8005dfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005dfe:	f001 fe41 	bl	8007a84 <__ulp>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4630      	mov	r0, r6
 8005e08:	4639      	mov	r1, r7
 8005e0a:	f7fa fb65 	bl	80004d8 <__aeabi_dmul>
 8005e0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005e12:	f7fa f9ab 	bl	800016c <__adddf3>
 8005e16:	4680      	mov	r8, r0
 8005e18:	4689      	mov	r9, r1
 8005e1a:	e77e      	b.n	8005d1a <_strtod_l+0xa82>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005e24:	e7e3      	b.n	8005dee <_strtod_l+0xb56>
 8005e26:	a30e      	add	r3, pc, #56	; (adr r3, 8005e60 <_strtod_l+0xbc8>)
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	f7fa fdc6 	bl	80009bc <__aeabi_dcmplt>
 8005e30:	e7a1      	b.n	8005d76 <_strtod_l+0xade>
 8005e32:	2300      	movs	r3, #0
 8005e34:	930a      	str	r3, [sp, #40]	; 0x28
 8005e36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e38:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	f7ff ba71 	b.w	8005322 <_strtod_l+0x8a>
 8005e40:	2a65      	cmp	r2, #101	; 0x65
 8005e42:	f43f ab63 	beq.w	800550c <_strtod_l+0x274>
 8005e46:	2a45      	cmp	r2, #69	; 0x45
 8005e48:	f43f ab60 	beq.w	800550c <_strtod_l+0x274>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	f7ff bb95 	b.w	800557c <_strtod_l+0x2e4>
 8005e52:	bf00      	nop
 8005e54:	f3af 8000 	nop.w
 8005e58:	ffc00000 	.word	0xffc00000
 8005e5c:	41dfffff 	.word	0x41dfffff
 8005e60:	94a03595 	.word	0x94a03595
 8005e64:	3fcfffff 	.word	0x3fcfffff

08005e68 <_strtod_r>:
 8005e68:	4b01      	ldr	r3, [pc, #4]	; (8005e70 <_strtod_r+0x8>)
 8005e6a:	f7ff ba15 	b.w	8005298 <_strtod_l>
 8005e6e:	bf00      	nop
 8005e70:	2000007c 	.word	0x2000007c

08005e74 <_strtol_l.constprop.0>:
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e7a:	4680      	mov	r8, r0
 8005e7c:	d001      	beq.n	8005e82 <_strtol_l.constprop.0+0xe>
 8005e7e:	2b24      	cmp	r3, #36	; 0x24
 8005e80:	d906      	bls.n	8005e90 <_strtol_l.constprop.0+0x1c>
 8005e82:	f7fe fb23 	bl	80044cc <__errno>
 8005e86:	2316      	movs	r3, #22
 8005e88:	6003      	str	r3, [r0, #0]
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e90:	460d      	mov	r5, r1
 8005e92:	4f35      	ldr	r7, [pc, #212]	; (8005f68 <_strtol_l.constprop.0+0xf4>)
 8005e94:	4628      	mov	r0, r5
 8005e96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e9a:	5de6      	ldrb	r6, [r4, r7]
 8005e9c:	f016 0608 	ands.w	r6, r6, #8
 8005ea0:	d1f8      	bne.n	8005e94 <_strtol_l.constprop.0+0x20>
 8005ea2:	2c2d      	cmp	r4, #45	; 0x2d
 8005ea4:	d12f      	bne.n	8005f06 <_strtol_l.constprop.0+0x92>
 8005ea6:	2601      	movs	r6, #1
 8005ea8:	782c      	ldrb	r4, [r5, #0]
 8005eaa:	1c85      	adds	r5, r0, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d057      	beq.n	8005f60 <_strtol_l.constprop.0+0xec>
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	d109      	bne.n	8005ec8 <_strtol_l.constprop.0+0x54>
 8005eb4:	2c30      	cmp	r4, #48	; 0x30
 8005eb6:	d107      	bne.n	8005ec8 <_strtol_l.constprop.0+0x54>
 8005eb8:	7828      	ldrb	r0, [r5, #0]
 8005eba:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005ebe:	2858      	cmp	r0, #88	; 0x58
 8005ec0:	d149      	bne.n	8005f56 <_strtol_l.constprop.0+0xe2>
 8005ec2:	2310      	movs	r3, #16
 8005ec4:	786c      	ldrb	r4, [r5, #1]
 8005ec6:	3502      	adds	r5, #2
 8005ec8:	2700      	movs	r7, #0
 8005eca:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005ece:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005ed2:	fbbe f9f3 	udiv	r9, lr, r3
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	fb03 ea19 	mls	sl, r3, r9, lr
 8005edc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005ee0:	f1bc 0f09 	cmp.w	ip, #9
 8005ee4:	d814      	bhi.n	8005f10 <_strtol_l.constprop.0+0x9c>
 8005ee6:	4664      	mov	r4, ip
 8005ee8:	42a3      	cmp	r3, r4
 8005eea:	dd22      	ble.n	8005f32 <_strtol_l.constprop.0+0xbe>
 8005eec:	2f00      	cmp	r7, #0
 8005eee:	db1d      	blt.n	8005f2c <_strtol_l.constprop.0+0xb8>
 8005ef0:	4581      	cmp	r9, r0
 8005ef2:	d31b      	bcc.n	8005f2c <_strtol_l.constprop.0+0xb8>
 8005ef4:	d101      	bne.n	8005efa <_strtol_l.constprop.0+0x86>
 8005ef6:	45a2      	cmp	sl, r4
 8005ef8:	db18      	blt.n	8005f2c <_strtol_l.constprop.0+0xb8>
 8005efa:	2701      	movs	r7, #1
 8005efc:	fb00 4003 	mla	r0, r0, r3, r4
 8005f00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f04:	e7ea      	b.n	8005edc <_strtol_l.constprop.0+0x68>
 8005f06:	2c2b      	cmp	r4, #43	; 0x2b
 8005f08:	bf04      	itt	eq
 8005f0a:	782c      	ldrbeq	r4, [r5, #0]
 8005f0c:	1c85      	addeq	r5, r0, #2
 8005f0e:	e7cd      	b.n	8005eac <_strtol_l.constprop.0+0x38>
 8005f10:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005f14:	f1bc 0f19 	cmp.w	ip, #25
 8005f18:	d801      	bhi.n	8005f1e <_strtol_l.constprop.0+0xaa>
 8005f1a:	3c37      	subs	r4, #55	; 0x37
 8005f1c:	e7e4      	b.n	8005ee8 <_strtol_l.constprop.0+0x74>
 8005f1e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005f22:	f1bc 0f19 	cmp.w	ip, #25
 8005f26:	d804      	bhi.n	8005f32 <_strtol_l.constprop.0+0xbe>
 8005f28:	3c57      	subs	r4, #87	; 0x57
 8005f2a:	e7dd      	b.n	8005ee8 <_strtol_l.constprop.0+0x74>
 8005f2c:	f04f 37ff 	mov.w	r7, #4294967295
 8005f30:	e7e6      	b.n	8005f00 <_strtol_l.constprop.0+0x8c>
 8005f32:	2f00      	cmp	r7, #0
 8005f34:	da07      	bge.n	8005f46 <_strtol_l.constprop.0+0xd2>
 8005f36:	2322      	movs	r3, #34	; 0x22
 8005f38:	4670      	mov	r0, lr
 8005f3a:	f8c8 3000 	str.w	r3, [r8]
 8005f3e:	2a00      	cmp	r2, #0
 8005f40:	d0a4      	beq.n	8005e8c <_strtol_l.constprop.0+0x18>
 8005f42:	1e69      	subs	r1, r5, #1
 8005f44:	e005      	b.n	8005f52 <_strtol_l.constprop.0+0xde>
 8005f46:	b106      	cbz	r6, 8005f4a <_strtol_l.constprop.0+0xd6>
 8005f48:	4240      	negs	r0, r0
 8005f4a:	2a00      	cmp	r2, #0
 8005f4c:	d09e      	beq.n	8005e8c <_strtol_l.constprop.0+0x18>
 8005f4e:	2f00      	cmp	r7, #0
 8005f50:	d1f7      	bne.n	8005f42 <_strtol_l.constprop.0+0xce>
 8005f52:	6011      	str	r1, [r2, #0]
 8005f54:	e79a      	b.n	8005e8c <_strtol_l.constprop.0+0x18>
 8005f56:	2430      	movs	r4, #48	; 0x30
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1b5      	bne.n	8005ec8 <_strtol_l.constprop.0+0x54>
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	e7b3      	b.n	8005ec8 <_strtol_l.constprop.0+0x54>
 8005f60:	2c30      	cmp	r4, #48	; 0x30
 8005f62:	d0a9      	beq.n	8005eb8 <_strtol_l.constprop.0+0x44>
 8005f64:	230a      	movs	r3, #10
 8005f66:	e7af      	b.n	8005ec8 <_strtol_l.constprop.0+0x54>
 8005f68:	080095f1 	.word	0x080095f1

08005f6c <_strtol_r>:
 8005f6c:	f7ff bf82 	b.w	8005e74 <_strtol_l.constprop.0>

08005f70 <quorem>:
 8005f70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f74:	6903      	ldr	r3, [r0, #16]
 8005f76:	690c      	ldr	r4, [r1, #16]
 8005f78:	4607      	mov	r7, r0
 8005f7a:	42a3      	cmp	r3, r4
 8005f7c:	f2c0 8082 	blt.w	8006084 <quorem+0x114>
 8005f80:	3c01      	subs	r4, #1
 8005f82:	f100 0514 	add.w	r5, r0, #20
 8005f86:	f101 0814 	add.w	r8, r1, #20
 8005f8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f8e:	9301      	str	r3, [sp, #4]
 8005f90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005fa0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005fa4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005fa8:	d331      	bcc.n	800600e <quorem+0x9e>
 8005faa:	f04f 0e00 	mov.w	lr, #0
 8005fae:	4640      	mov	r0, r8
 8005fb0:	46ac      	mov	ip, r5
 8005fb2:	46f2      	mov	sl, lr
 8005fb4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005fb8:	b293      	uxth	r3, r2
 8005fba:	fb06 e303 	mla	r3, r6, r3, lr
 8005fbe:	0c12      	lsrs	r2, r2, #16
 8005fc0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	fb06 e202 	mla	r2, r6, r2, lr
 8005fca:	ebaa 0303 	sub.w	r3, sl, r3
 8005fce:	f8dc a000 	ldr.w	sl, [ip]
 8005fd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005fd6:	fa1f fa8a 	uxth.w	sl, sl
 8005fda:	4453      	add	r3, sl
 8005fdc:	f8dc a000 	ldr.w	sl, [ip]
 8005fe0:	b292      	uxth	r2, r2
 8005fe2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005fe6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ff0:	4581      	cmp	r9, r0
 8005ff2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005ff6:	f84c 3b04 	str.w	r3, [ip], #4
 8005ffa:	d2db      	bcs.n	8005fb4 <quorem+0x44>
 8005ffc:	f855 300b 	ldr.w	r3, [r5, fp]
 8006000:	b92b      	cbnz	r3, 800600e <quorem+0x9e>
 8006002:	9b01      	ldr	r3, [sp, #4]
 8006004:	3b04      	subs	r3, #4
 8006006:	429d      	cmp	r5, r3
 8006008:	461a      	mov	r2, r3
 800600a:	d32f      	bcc.n	800606c <quorem+0xfc>
 800600c:	613c      	str	r4, [r7, #16]
 800600e:	4638      	mov	r0, r7
 8006010:	f001 fc90 	bl	8007934 <__mcmp>
 8006014:	2800      	cmp	r0, #0
 8006016:	db25      	blt.n	8006064 <quorem+0xf4>
 8006018:	4628      	mov	r0, r5
 800601a:	f04f 0c00 	mov.w	ip, #0
 800601e:	3601      	adds	r6, #1
 8006020:	f858 1b04 	ldr.w	r1, [r8], #4
 8006024:	f8d0 e000 	ldr.w	lr, [r0]
 8006028:	b28b      	uxth	r3, r1
 800602a:	ebac 0303 	sub.w	r3, ip, r3
 800602e:	fa1f f28e 	uxth.w	r2, lr
 8006032:	4413      	add	r3, r2
 8006034:	0c0a      	lsrs	r2, r1, #16
 8006036:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800603a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800603e:	b29b      	uxth	r3, r3
 8006040:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006044:	45c1      	cmp	r9, r8
 8006046:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800604a:	f840 3b04 	str.w	r3, [r0], #4
 800604e:	d2e7      	bcs.n	8006020 <quorem+0xb0>
 8006050:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006054:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006058:	b922      	cbnz	r2, 8006064 <quorem+0xf4>
 800605a:	3b04      	subs	r3, #4
 800605c:	429d      	cmp	r5, r3
 800605e:	461a      	mov	r2, r3
 8006060:	d30a      	bcc.n	8006078 <quorem+0x108>
 8006062:	613c      	str	r4, [r7, #16]
 8006064:	4630      	mov	r0, r6
 8006066:	b003      	add	sp, #12
 8006068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800606c:	6812      	ldr	r2, [r2, #0]
 800606e:	3b04      	subs	r3, #4
 8006070:	2a00      	cmp	r2, #0
 8006072:	d1cb      	bne.n	800600c <quorem+0x9c>
 8006074:	3c01      	subs	r4, #1
 8006076:	e7c6      	b.n	8006006 <quorem+0x96>
 8006078:	6812      	ldr	r2, [r2, #0]
 800607a:	3b04      	subs	r3, #4
 800607c:	2a00      	cmp	r2, #0
 800607e:	d1f0      	bne.n	8006062 <quorem+0xf2>
 8006080:	3c01      	subs	r4, #1
 8006082:	e7eb      	b.n	800605c <quorem+0xec>
 8006084:	2000      	movs	r0, #0
 8006086:	e7ee      	b.n	8006066 <quorem+0xf6>

08006088 <_dtoa_r>:
 8006088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608c:	4616      	mov	r6, r2
 800608e:	461f      	mov	r7, r3
 8006090:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006092:	b099      	sub	sp, #100	; 0x64
 8006094:	4605      	mov	r5, r0
 8006096:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800609a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800609e:	b974      	cbnz	r4, 80060be <_dtoa_r+0x36>
 80060a0:	2010      	movs	r0, #16
 80060a2:	f001 f949 	bl	8007338 <malloc>
 80060a6:	4602      	mov	r2, r0
 80060a8:	6268      	str	r0, [r5, #36]	; 0x24
 80060aa:	b920      	cbnz	r0, 80060b6 <_dtoa_r+0x2e>
 80060ac:	21ea      	movs	r1, #234	; 0xea
 80060ae:	4ba8      	ldr	r3, [pc, #672]	; (8006350 <_dtoa_r+0x2c8>)
 80060b0:	48a8      	ldr	r0, [pc, #672]	; (8006354 <_dtoa_r+0x2cc>)
 80060b2:	f002 f8b3 	bl	800821c <__assert_func>
 80060b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060ba:	6004      	str	r4, [r0, #0]
 80060bc:	60c4      	str	r4, [r0, #12]
 80060be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80060c0:	6819      	ldr	r1, [r3, #0]
 80060c2:	b151      	cbz	r1, 80060da <_dtoa_r+0x52>
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	2301      	movs	r3, #1
 80060c8:	4093      	lsls	r3, r2
 80060ca:	604a      	str	r2, [r1, #4]
 80060cc:	608b      	str	r3, [r1, #8]
 80060ce:	4628      	mov	r0, r5
 80060d0:	f001 f9a8 	bl	8007424 <_Bfree>
 80060d4:	2200      	movs	r2, #0
 80060d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	1e3b      	subs	r3, r7, #0
 80060dc:	bfaf      	iteee	ge
 80060de:	2300      	movge	r3, #0
 80060e0:	2201      	movlt	r2, #1
 80060e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80060e6:	9305      	strlt	r3, [sp, #20]
 80060e8:	bfa8      	it	ge
 80060ea:	f8c8 3000 	strge.w	r3, [r8]
 80060ee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80060f2:	4b99      	ldr	r3, [pc, #612]	; (8006358 <_dtoa_r+0x2d0>)
 80060f4:	bfb8      	it	lt
 80060f6:	f8c8 2000 	strlt.w	r2, [r8]
 80060fa:	ea33 0309 	bics.w	r3, r3, r9
 80060fe:	d119      	bne.n	8006134 <_dtoa_r+0xac>
 8006100:	f242 730f 	movw	r3, #9999	; 0x270f
 8006104:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800610c:	4333      	orrs	r3, r6
 800610e:	f000 857f 	beq.w	8006c10 <_dtoa_r+0xb88>
 8006112:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006114:	b953      	cbnz	r3, 800612c <_dtoa_r+0xa4>
 8006116:	4b91      	ldr	r3, [pc, #580]	; (800635c <_dtoa_r+0x2d4>)
 8006118:	e022      	b.n	8006160 <_dtoa_r+0xd8>
 800611a:	4b91      	ldr	r3, [pc, #580]	; (8006360 <_dtoa_r+0x2d8>)
 800611c:	9303      	str	r3, [sp, #12]
 800611e:	3308      	adds	r3, #8
 8006120:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	9803      	ldr	r0, [sp, #12]
 8006126:	b019      	add	sp, #100	; 0x64
 8006128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612c:	4b8b      	ldr	r3, [pc, #556]	; (800635c <_dtoa_r+0x2d4>)
 800612e:	9303      	str	r3, [sp, #12]
 8006130:	3303      	adds	r3, #3
 8006132:	e7f5      	b.n	8006120 <_dtoa_r+0x98>
 8006134:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006138:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800613c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006140:	2200      	movs	r2, #0
 8006142:	2300      	movs	r3, #0
 8006144:	f7fa fc30 	bl	80009a8 <__aeabi_dcmpeq>
 8006148:	4680      	mov	r8, r0
 800614a:	b158      	cbz	r0, 8006164 <_dtoa_r+0xdc>
 800614c:	2301      	movs	r3, #1
 800614e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006150:	6013      	str	r3, [r2, #0]
 8006152:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 8558 	beq.w	8006c0a <_dtoa_r+0xb82>
 800615a:	4882      	ldr	r0, [pc, #520]	; (8006364 <_dtoa_r+0x2dc>)
 800615c:	6018      	str	r0, [r3, #0]
 800615e:	1e43      	subs	r3, r0, #1
 8006160:	9303      	str	r3, [sp, #12]
 8006162:	e7df      	b.n	8006124 <_dtoa_r+0x9c>
 8006164:	ab16      	add	r3, sp, #88	; 0x58
 8006166:	9301      	str	r3, [sp, #4]
 8006168:	ab17      	add	r3, sp, #92	; 0x5c
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	4628      	mov	r0, r5
 800616e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006172:	f001 fd01 	bl	8007b78 <__d2b>
 8006176:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800617a:	4683      	mov	fp, r0
 800617c:	2c00      	cmp	r4, #0
 800617e:	d07f      	beq.n	8006280 <_dtoa_r+0x1f8>
 8006180:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006186:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800618a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800618e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006192:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006196:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800619a:	2200      	movs	r2, #0
 800619c:	4b72      	ldr	r3, [pc, #456]	; (8006368 <_dtoa_r+0x2e0>)
 800619e:	f7f9 ffe3 	bl	8000168 <__aeabi_dsub>
 80061a2:	a365      	add	r3, pc, #404	; (adr r3, 8006338 <_dtoa_r+0x2b0>)
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	f7fa f996 	bl	80004d8 <__aeabi_dmul>
 80061ac:	a364      	add	r3, pc, #400	; (adr r3, 8006340 <_dtoa_r+0x2b8>)
 80061ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b2:	f7f9 ffdb 	bl	800016c <__adddf3>
 80061b6:	4606      	mov	r6, r0
 80061b8:	4620      	mov	r0, r4
 80061ba:	460f      	mov	r7, r1
 80061bc:	f7fa f922 	bl	8000404 <__aeabi_i2d>
 80061c0:	a361      	add	r3, pc, #388	; (adr r3, 8006348 <_dtoa_r+0x2c0>)
 80061c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c6:	f7fa f987 	bl	80004d8 <__aeabi_dmul>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4630      	mov	r0, r6
 80061d0:	4639      	mov	r1, r7
 80061d2:	f7f9 ffcb 	bl	800016c <__adddf3>
 80061d6:	4606      	mov	r6, r0
 80061d8:	460f      	mov	r7, r1
 80061da:	f7fa fc2d 	bl	8000a38 <__aeabi_d2iz>
 80061de:	2200      	movs	r2, #0
 80061e0:	4682      	mov	sl, r0
 80061e2:	2300      	movs	r3, #0
 80061e4:	4630      	mov	r0, r6
 80061e6:	4639      	mov	r1, r7
 80061e8:	f7fa fbe8 	bl	80009bc <__aeabi_dcmplt>
 80061ec:	b148      	cbz	r0, 8006202 <_dtoa_r+0x17a>
 80061ee:	4650      	mov	r0, sl
 80061f0:	f7fa f908 	bl	8000404 <__aeabi_i2d>
 80061f4:	4632      	mov	r2, r6
 80061f6:	463b      	mov	r3, r7
 80061f8:	f7fa fbd6 	bl	80009a8 <__aeabi_dcmpeq>
 80061fc:	b908      	cbnz	r0, 8006202 <_dtoa_r+0x17a>
 80061fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006202:	f1ba 0f16 	cmp.w	sl, #22
 8006206:	d858      	bhi.n	80062ba <_dtoa_r+0x232>
 8006208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800620c:	4b57      	ldr	r3, [pc, #348]	; (800636c <_dtoa_r+0x2e4>)
 800620e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006216:	f7fa fbd1 	bl	80009bc <__aeabi_dcmplt>
 800621a:	2800      	cmp	r0, #0
 800621c:	d04f      	beq.n	80062be <_dtoa_r+0x236>
 800621e:	2300      	movs	r3, #0
 8006220:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006224:	930f      	str	r3, [sp, #60]	; 0x3c
 8006226:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006228:	1b1c      	subs	r4, r3, r4
 800622a:	1e63      	subs	r3, r4, #1
 800622c:	9309      	str	r3, [sp, #36]	; 0x24
 800622e:	bf49      	itett	mi
 8006230:	f1c4 0301 	rsbmi	r3, r4, #1
 8006234:	2300      	movpl	r3, #0
 8006236:	9306      	strmi	r3, [sp, #24]
 8006238:	2300      	movmi	r3, #0
 800623a:	bf54      	ite	pl
 800623c:	9306      	strpl	r3, [sp, #24]
 800623e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006240:	f1ba 0f00 	cmp.w	sl, #0
 8006244:	db3d      	blt.n	80062c2 <_dtoa_r+0x23a>
 8006246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006248:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800624c:	4453      	add	r3, sl
 800624e:	9309      	str	r3, [sp, #36]	; 0x24
 8006250:	2300      	movs	r3, #0
 8006252:	930a      	str	r3, [sp, #40]	; 0x28
 8006254:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006256:	2b09      	cmp	r3, #9
 8006258:	f200 808c 	bhi.w	8006374 <_dtoa_r+0x2ec>
 800625c:	2b05      	cmp	r3, #5
 800625e:	bfc4      	itt	gt
 8006260:	3b04      	subgt	r3, #4
 8006262:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006264:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006266:	bfc8      	it	gt
 8006268:	2400      	movgt	r4, #0
 800626a:	f1a3 0302 	sub.w	r3, r3, #2
 800626e:	bfd8      	it	le
 8006270:	2401      	movle	r4, #1
 8006272:	2b03      	cmp	r3, #3
 8006274:	f200 808a 	bhi.w	800638c <_dtoa_r+0x304>
 8006278:	e8df f003 	tbb	[pc, r3]
 800627c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006280:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006284:	441c      	add	r4, r3
 8006286:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800628a:	2b20      	cmp	r3, #32
 800628c:	bfc3      	ittte	gt
 800628e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006292:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006296:	fa09 f303 	lslgt.w	r3, r9, r3
 800629a:	f1c3 0320 	rsble	r3, r3, #32
 800629e:	bfc6      	itte	gt
 80062a0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80062a4:	4318      	orrgt	r0, r3
 80062a6:	fa06 f003 	lslle.w	r0, r6, r3
 80062aa:	f7fa f89b 	bl	80003e4 <__aeabi_ui2d>
 80062ae:	2301      	movs	r3, #1
 80062b0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80062b4:	3c01      	subs	r4, #1
 80062b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80062b8:	e76f      	b.n	800619a <_dtoa_r+0x112>
 80062ba:	2301      	movs	r3, #1
 80062bc:	e7b2      	b.n	8006224 <_dtoa_r+0x19c>
 80062be:	900f      	str	r0, [sp, #60]	; 0x3c
 80062c0:	e7b1      	b.n	8006226 <_dtoa_r+0x19e>
 80062c2:	9b06      	ldr	r3, [sp, #24]
 80062c4:	eba3 030a 	sub.w	r3, r3, sl
 80062c8:	9306      	str	r3, [sp, #24]
 80062ca:	f1ca 0300 	rsb	r3, sl, #0
 80062ce:	930a      	str	r3, [sp, #40]	; 0x28
 80062d0:	2300      	movs	r3, #0
 80062d2:	930e      	str	r3, [sp, #56]	; 0x38
 80062d4:	e7be      	b.n	8006254 <_dtoa_r+0x1cc>
 80062d6:	2300      	movs	r3, #0
 80062d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80062da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	dc58      	bgt.n	8006392 <_dtoa_r+0x30a>
 80062e0:	f04f 0901 	mov.w	r9, #1
 80062e4:	464b      	mov	r3, r9
 80062e6:	f8cd 9020 	str.w	r9, [sp, #32]
 80062ea:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80062ee:	2200      	movs	r2, #0
 80062f0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80062f2:	6042      	str	r2, [r0, #4]
 80062f4:	2204      	movs	r2, #4
 80062f6:	f102 0614 	add.w	r6, r2, #20
 80062fa:	429e      	cmp	r6, r3
 80062fc:	6841      	ldr	r1, [r0, #4]
 80062fe:	d94e      	bls.n	800639e <_dtoa_r+0x316>
 8006300:	4628      	mov	r0, r5
 8006302:	f001 f84f 	bl	80073a4 <_Balloc>
 8006306:	9003      	str	r0, [sp, #12]
 8006308:	2800      	cmp	r0, #0
 800630a:	d14c      	bne.n	80063a6 <_dtoa_r+0x31e>
 800630c:	4602      	mov	r2, r0
 800630e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006312:	4b17      	ldr	r3, [pc, #92]	; (8006370 <_dtoa_r+0x2e8>)
 8006314:	e6cc      	b.n	80060b0 <_dtoa_r+0x28>
 8006316:	2301      	movs	r3, #1
 8006318:	e7de      	b.n	80062d8 <_dtoa_r+0x250>
 800631a:	2300      	movs	r3, #0
 800631c:	930b      	str	r3, [sp, #44]	; 0x2c
 800631e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006320:	eb0a 0903 	add.w	r9, sl, r3
 8006324:	f109 0301 	add.w	r3, r9, #1
 8006328:	2b01      	cmp	r3, #1
 800632a:	9308      	str	r3, [sp, #32]
 800632c:	bfb8      	it	lt
 800632e:	2301      	movlt	r3, #1
 8006330:	e7dd      	b.n	80062ee <_dtoa_r+0x266>
 8006332:	2301      	movs	r3, #1
 8006334:	e7f2      	b.n	800631c <_dtoa_r+0x294>
 8006336:	bf00      	nop
 8006338:	636f4361 	.word	0x636f4361
 800633c:	3fd287a7 	.word	0x3fd287a7
 8006340:	8b60c8b3 	.word	0x8b60c8b3
 8006344:	3fc68a28 	.word	0x3fc68a28
 8006348:	509f79fb 	.word	0x509f79fb
 800634c:	3fd34413 	.word	0x3fd34413
 8006350:	080096fe 	.word	0x080096fe
 8006354:	08009715 	.word	0x08009715
 8006358:	7ff00000 	.word	0x7ff00000
 800635c:	080096fa 	.word	0x080096fa
 8006360:	080096f1 	.word	0x080096f1
 8006364:	08009575 	.word	0x08009575
 8006368:	3ff80000 	.word	0x3ff80000
 800636c:	08009880 	.word	0x08009880
 8006370:	08009770 	.word	0x08009770
 8006374:	2401      	movs	r4, #1
 8006376:	2300      	movs	r3, #0
 8006378:	940b      	str	r4, [sp, #44]	; 0x2c
 800637a:	9322      	str	r3, [sp, #136]	; 0x88
 800637c:	f04f 39ff 	mov.w	r9, #4294967295
 8006380:	2200      	movs	r2, #0
 8006382:	2312      	movs	r3, #18
 8006384:	f8cd 9020 	str.w	r9, [sp, #32]
 8006388:	9223      	str	r2, [sp, #140]	; 0x8c
 800638a:	e7b0      	b.n	80062ee <_dtoa_r+0x266>
 800638c:	2301      	movs	r3, #1
 800638e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006390:	e7f4      	b.n	800637c <_dtoa_r+0x2f4>
 8006392:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006396:	464b      	mov	r3, r9
 8006398:	f8cd 9020 	str.w	r9, [sp, #32]
 800639c:	e7a7      	b.n	80062ee <_dtoa_r+0x266>
 800639e:	3101      	adds	r1, #1
 80063a0:	6041      	str	r1, [r0, #4]
 80063a2:	0052      	lsls	r2, r2, #1
 80063a4:	e7a7      	b.n	80062f6 <_dtoa_r+0x26e>
 80063a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063a8:	9a03      	ldr	r2, [sp, #12]
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	9b08      	ldr	r3, [sp, #32]
 80063ae:	2b0e      	cmp	r3, #14
 80063b0:	f200 80a8 	bhi.w	8006504 <_dtoa_r+0x47c>
 80063b4:	2c00      	cmp	r4, #0
 80063b6:	f000 80a5 	beq.w	8006504 <_dtoa_r+0x47c>
 80063ba:	f1ba 0f00 	cmp.w	sl, #0
 80063be:	dd34      	ble.n	800642a <_dtoa_r+0x3a2>
 80063c0:	4a9a      	ldr	r2, [pc, #616]	; (800662c <_dtoa_r+0x5a4>)
 80063c2:	f00a 030f 	and.w	r3, sl, #15
 80063c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80063ca:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80063ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80063d6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80063da:	d016      	beq.n	800640a <_dtoa_r+0x382>
 80063dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063e0:	4b93      	ldr	r3, [pc, #588]	; (8006630 <_dtoa_r+0x5a8>)
 80063e2:	2703      	movs	r7, #3
 80063e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063e8:	f7fa f9a0 	bl	800072c <__aeabi_ddiv>
 80063ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063f0:	f004 040f 	and.w	r4, r4, #15
 80063f4:	4e8e      	ldr	r6, [pc, #568]	; (8006630 <_dtoa_r+0x5a8>)
 80063f6:	b954      	cbnz	r4, 800640e <_dtoa_r+0x386>
 80063f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006400:	f7fa f994 	bl	800072c <__aeabi_ddiv>
 8006404:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006408:	e029      	b.n	800645e <_dtoa_r+0x3d6>
 800640a:	2702      	movs	r7, #2
 800640c:	e7f2      	b.n	80063f4 <_dtoa_r+0x36c>
 800640e:	07e1      	lsls	r1, r4, #31
 8006410:	d508      	bpl.n	8006424 <_dtoa_r+0x39c>
 8006412:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006416:	e9d6 2300 	ldrd	r2, r3, [r6]
 800641a:	f7fa f85d 	bl	80004d8 <__aeabi_dmul>
 800641e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006422:	3701      	adds	r7, #1
 8006424:	1064      	asrs	r4, r4, #1
 8006426:	3608      	adds	r6, #8
 8006428:	e7e5      	b.n	80063f6 <_dtoa_r+0x36e>
 800642a:	f000 80a5 	beq.w	8006578 <_dtoa_r+0x4f0>
 800642e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006432:	f1ca 0400 	rsb	r4, sl, #0
 8006436:	4b7d      	ldr	r3, [pc, #500]	; (800662c <_dtoa_r+0x5a4>)
 8006438:	f004 020f 	and.w	r2, r4, #15
 800643c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	f7fa f848 	bl	80004d8 <__aeabi_dmul>
 8006448:	2702      	movs	r7, #2
 800644a:	2300      	movs	r3, #0
 800644c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006450:	4e77      	ldr	r6, [pc, #476]	; (8006630 <_dtoa_r+0x5a8>)
 8006452:	1124      	asrs	r4, r4, #4
 8006454:	2c00      	cmp	r4, #0
 8006456:	f040 8084 	bne.w	8006562 <_dtoa_r+0x4da>
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1d2      	bne.n	8006404 <_dtoa_r+0x37c>
 800645e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 808b 	beq.w	800657c <_dtoa_r+0x4f4>
 8006466:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800646a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800646e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006472:	2200      	movs	r2, #0
 8006474:	4b6f      	ldr	r3, [pc, #444]	; (8006634 <_dtoa_r+0x5ac>)
 8006476:	f7fa faa1 	bl	80009bc <__aeabi_dcmplt>
 800647a:	2800      	cmp	r0, #0
 800647c:	d07e      	beq.n	800657c <_dtoa_r+0x4f4>
 800647e:	9b08      	ldr	r3, [sp, #32]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d07b      	beq.n	800657c <_dtoa_r+0x4f4>
 8006484:	f1b9 0f00 	cmp.w	r9, #0
 8006488:	dd38      	ble.n	80064fc <_dtoa_r+0x474>
 800648a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800648e:	2200      	movs	r2, #0
 8006490:	4b69      	ldr	r3, [pc, #420]	; (8006638 <_dtoa_r+0x5b0>)
 8006492:	f7fa f821 	bl	80004d8 <__aeabi_dmul>
 8006496:	464c      	mov	r4, r9
 8006498:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800649c:	f10a 38ff 	add.w	r8, sl, #4294967295
 80064a0:	3701      	adds	r7, #1
 80064a2:	4638      	mov	r0, r7
 80064a4:	f7f9 ffae 	bl	8000404 <__aeabi_i2d>
 80064a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064ac:	f7fa f814 	bl	80004d8 <__aeabi_dmul>
 80064b0:	2200      	movs	r2, #0
 80064b2:	4b62      	ldr	r3, [pc, #392]	; (800663c <_dtoa_r+0x5b4>)
 80064b4:	f7f9 fe5a 	bl	800016c <__adddf3>
 80064b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80064bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064c0:	9611      	str	r6, [sp, #68]	; 0x44
 80064c2:	2c00      	cmp	r4, #0
 80064c4:	d15d      	bne.n	8006582 <_dtoa_r+0x4fa>
 80064c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064ca:	2200      	movs	r2, #0
 80064cc:	4b5c      	ldr	r3, [pc, #368]	; (8006640 <_dtoa_r+0x5b8>)
 80064ce:	f7f9 fe4b 	bl	8000168 <__aeabi_dsub>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064da:	4633      	mov	r3, r6
 80064dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064de:	f7fa fa8b 	bl	80009f8 <__aeabi_dcmpgt>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	f040 829c 	bne.w	8006a20 <_dtoa_r+0x998>
 80064e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064ee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80064f2:	f7fa fa63 	bl	80009bc <__aeabi_dcmplt>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	f040 8290 	bne.w	8006a1c <_dtoa_r+0x994>
 80064fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006500:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006504:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006506:	2b00      	cmp	r3, #0
 8006508:	f2c0 8152 	blt.w	80067b0 <_dtoa_r+0x728>
 800650c:	f1ba 0f0e 	cmp.w	sl, #14
 8006510:	f300 814e 	bgt.w	80067b0 <_dtoa_r+0x728>
 8006514:	4b45      	ldr	r3, [pc, #276]	; (800662c <_dtoa_r+0x5a4>)
 8006516:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800651a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800651e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006522:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006524:	2b00      	cmp	r3, #0
 8006526:	f280 80db 	bge.w	80066e0 <_dtoa_r+0x658>
 800652a:	9b08      	ldr	r3, [sp, #32]
 800652c:	2b00      	cmp	r3, #0
 800652e:	f300 80d7 	bgt.w	80066e0 <_dtoa_r+0x658>
 8006532:	f040 8272 	bne.w	8006a1a <_dtoa_r+0x992>
 8006536:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800653a:	2200      	movs	r2, #0
 800653c:	4b40      	ldr	r3, [pc, #256]	; (8006640 <_dtoa_r+0x5b8>)
 800653e:	f7f9 ffcb 	bl	80004d8 <__aeabi_dmul>
 8006542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006546:	f7fa fa4d 	bl	80009e4 <__aeabi_dcmpge>
 800654a:	9c08      	ldr	r4, [sp, #32]
 800654c:	4626      	mov	r6, r4
 800654e:	2800      	cmp	r0, #0
 8006550:	f040 8248 	bne.w	80069e4 <_dtoa_r+0x95c>
 8006554:	2331      	movs	r3, #49	; 0x31
 8006556:	9f03      	ldr	r7, [sp, #12]
 8006558:	f10a 0a01 	add.w	sl, sl, #1
 800655c:	f807 3b01 	strb.w	r3, [r7], #1
 8006560:	e244      	b.n	80069ec <_dtoa_r+0x964>
 8006562:	07e2      	lsls	r2, r4, #31
 8006564:	d505      	bpl.n	8006572 <_dtoa_r+0x4ea>
 8006566:	e9d6 2300 	ldrd	r2, r3, [r6]
 800656a:	f7f9 ffb5 	bl	80004d8 <__aeabi_dmul>
 800656e:	2301      	movs	r3, #1
 8006570:	3701      	adds	r7, #1
 8006572:	1064      	asrs	r4, r4, #1
 8006574:	3608      	adds	r6, #8
 8006576:	e76d      	b.n	8006454 <_dtoa_r+0x3cc>
 8006578:	2702      	movs	r7, #2
 800657a:	e770      	b.n	800645e <_dtoa_r+0x3d6>
 800657c:	46d0      	mov	r8, sl
 800657e:	9c08      	ldr	r4, [sp, #32]
 8006580:	e78f      	b.n	80064a2 <_dtoa_r+0x41a>
 8006582:	9903      	ldr	r1, [sp, #12]
 8006584:	4b29      	ldr	r3, [pc, #164]	; (800662c <_dtoa_r+0x5a4>)
 8006586:	4421      	add	r1, r4
 8006588:	9112      	str	r1, [sp, #72]	; 0x48
 800658a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800658c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006590:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006594:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006598:	2900      	cmp	r1, #0
 800659a:	d055      	beq.n	8006648 <_dtoa_r+0x5c0>
 800659c:	2000      	movs	r0, #0
 800659e:	4929      	ldr	r1, [pc, #164]	; (8006644 <_dtoa_r+0x5bc>)
 80065a0:	f7fa f8c4 	bl	800072c <__aeabi_ddiv>
 80065a4:	463b      	mov	r3, r7
 80065a6:	4632      	mov	r2, r6
 80065a8:	f7f9 fdde 	bl	8000168 <__aeabi_dsub>
 80065ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065b0:	9f03      	ldr	r7, [sp, #12]
 80065b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065b6:	f7fa fa3f 	bl	8000a38 <__aeabi_d2iz>
 80065ba:	4604      	mov	r4, r0
 80065bc:	f7f9 ff22 	bl	8000404 <__aeabi_i2d>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065c8:	f7f9 fdce 	bl	8000168 <__aeabi_dsub>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	3430      	adds	r4, #48	; 0x30
 80065d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80065d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065da:	f807 4b01 	strb.w	r4, [r7], #1
 80065de:	f7fa f9ed 	bl	80009bc <__aeabi_dcmplt>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	d174      	bne.n	80066d0 <_dtoa_r+0x648>
 80065e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065ea:	2000      	movs	r0, #0
 80065ec:	4911      	ldr	r1, [pc, #68]	; (8006634 <_dtoa_r+0x5ac>)
 80065ee:	f7f9 fdbb 	bl	8000168 <__aeabi_dsub>
 80065f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065f6:	f7fa f9e1 	bl	80009bc <__aeabi_dcmplt>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	f040 80b7 	bne.w	800676e <_dtoa_r+0x6e6>
 8006600:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006602:	429f      	cmp	r7, r3
 8006604:	f43f af7a 	beq.w	80064fc <_dtoa_r+0x474>
 8006608:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800660c:	2200      	movs	r2, #0
 800660e:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <_dtoa_r+0x5b0>)
 8006610:	f7f9 ff62 	bl	80004d8 <__aeabi_dmul>
 8006614:	2200      	movs	r2, #0
 8006616:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800661a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800661e:	4b06      	ldr	r3, [pc, #24]	; (8006638 <_dtoa_r+0x5b0>)
 8006620:	f7f9 ff5a 	bl	80004d8 <__aeabi_dmul>
 8006624:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006628:	e7c3      	b.n	80065b2 <_dtoa_r+0x52a>
 800662a:	bf00      	nop
 800662c:	08009880 	.word	0x08009880
 8006630:	08009858 	.word	0x08009858
 8006634:	3ff00000 	.word	0x3ff00000
 8006638:	40240000 	.word	0x40240000
 800663c:	401c0000 	.word	0x401c0000
 8006640:	40140000 	.word	0x40140000
 8006644:	3fe00000 	.word	0x3fe00000
 8006648:	4630      	mov	r0, r6
 800664a:	4639      	mov	r1, r7
 800664c:	f7f9 ff44 	bl	80004d8 <__aeabi_dmul>
 8006650:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006652:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006656:	9c03      	ldr	r4, [sp, #12]
 8006658:	9314      	str	r3, [sp, #80]	; 0x50
 800665a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800665e:	f7fa f9eb 	bl	8000a38 <__aeabi_d2iz>
 8006662:	9015      	str	r0, [sp, #84]	; 0x54
 8006664:	f7f9 fece 	bl	8000404 <__aeabi_i2d>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006670:	f7f9 fd7a 	bl	8000168 <__aeabi_dsub>
 8006674:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006676:	4606      	mov	r6, r0
 8006678:	3330      	adds	r3, #48	; 0x30
 800667a:	f804 3b01 	strb.w	r3, [r4], #1
 800667e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006680:	460f      	mov	r7, r1
 8006682:	429c      	cmp	r4, r3
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	d124      	bne.n	80066d4 <_dtoa_r+0x64c>
 800668a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800668e:	4bb0      	ldr	r3, [pc, #704]	; (8006950 <_dtoa_r+0x8c8>)
 8006690:	f7f9 fd6c 	bl	800016c <__adddf3>
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	4630      	mov	r0, r6
 800669a:	4639      	mov	r1, r7
 800669c:	f7fa f9ac 	bl	80009f8 <__aeabi_dcmpgt>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d163      	bne.n	800676c <_dtoa_r+0x6e4>
 80066a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066a8:	2000      	movs	r0, #0
 80066aa:	49a9      	ldr	r1, [pc, #676]	; (8006950 <_dtoa_r+0x8c8>)
 80066ac:	f7f9 fd5c 	bl	8000168 <__aeabi_dsub>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4630      	mov	r0, r6
 80066b6:	4639      	mov	r1, r7
 80066b8:	f7fa f980 	bl	80009bc <__aeabi_dcmplt>
 80066bc:	2800      	cmp	r0, #0
 80066be:	f43f af1d 	beq.w	80064fc <_dtoa_r+0x474>
 80066c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80066c4:	1e7b      	subs	r3, r7, #1
 80066c6:	9314      	str	r3, [sp, #80]	; 0x50
 80066c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80066cc:	2b30      	cmp	r3, #48	; 0x30
 80066ce:	d0f8      	beq.n	80066c2 <_dtoa_r+0x63a>
 80066d0:	46c2      	mov	sl, r8
 80066d2:	e03b      	b.n	800674c <_dtoa_r+0x6c4>
 80066d4:	4b9f      	ldr	r3, [pc, #636]	; (8006954 <_dtoa_r+0x8cc>)
 80066d6:	f7f9 feff 	bl	80004d8 <__aeabi_dmul>
 80066da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066de:	e7bc      	b.n	800665a <_dtoa_r+0x5d2>
 80066e0:	9f03      	ldr	r7, [sp, #12]
 80066e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80066e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066ea:	4640      	mov	r0, r8
 80066ec:	4649      	mov	r1, r9
 80066ee:	f7fa f81d 	bl	800072c <__aeabi_ddiv>
 80066f2:	f7fa f9a1 	bl	8000a38 <__aeabi_d2iz>
 80066f6:	4604      	mov	r4, r0
 80066f8:	f7f9 fe84 	bl	8000404 <__aeabi_i2d>
 80066fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006700:	f7f9 feea 	bl	80004d8 <__aeabi_dmul>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	4640      	mov	r0, r8
 800670a:	4649      	mov	r1, r9
 800670c:	f7f9 fd2c 	bl	8000168 <__aeabi_dsub>
 8006710:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006714:	f807 6b01 	strb.w	r6, [r7], #1
 8006718:	9e03      	ldr	r6, [sp, #12]
 800671a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800671e:	1bbe      	subs	r6, r7, r6
 8006720:	45b4      	cmp	ip, r6
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	d136      	bne.n	8006796 <_dtoa_r+0x70e>
 8006728:	f7f9 fd20 	bl	800016c <__adddf3>
 800672c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006730:	4680      	mov	r8, r0
 8006732:	4689      	mov	r9, r1
 8006734:	f7fa f960 	bl	80009f8 <__aeabi_dcmpgt>
 8006738:	bb58      	cbnz	r0, 8006792 <_dtoa_r+0x70a>
 800673a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800673e:	4640      	mov	r0, r8
 8006740:	4649      	mov	r1, r9
 8006742:	f7fa f931 	bl	80009a8 <__aeabi_dcmpeq>
 8006746:	b108      	cbz	r0, 800674c <_dtoa_r+0x6c4>
 8006748:	07e1      	lsls	r1, r4, #31
 800674a:	d422      	bmi.n	8006792 <_dtoa_r+0x70a>
 800674c:	4628      	mov	r0, r5
 800674e:	4659      	mov	r1, fp
 8006750:	f000 fe68 	bl	8007424 <_Bfree>
 8006754:	2300      	movs	r3, #0
 8006756:	703b      	strb	r3, [r7, #0]
 8006758:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800675a:	f10a 0001 	add.w	r0, sl, #1
 800675e:	6018      	str	r0, [r3, #0]
 8006760:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006762:	2b00      	cmp	r3, #0
 8006764:	f43f acde 	beq.w	8006124 <_dtoa_r+0x9c>
 8006768:	601f      	str	r7, [r3, #0]
 800676a:	e4db      	b.n	8006124 <_dtoa_r+0x9c>
 800676c:	4627      	mov	r7, r4
 800676e:	463b      	mov	r3, r7
 8006770:	461f      	mov	r7, r3
 8006772:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006776:	2a39      	cmp	r2, #57	; 0x39
 8006778:	d107      	bne.n	800678a <_dtoa_r+0x702>
 800677a:	9a03      	ldr	r2, [sp, #12]
 800677c:	429a      	cmp	r2, r3
 800677e:	d1f7      	bne.n	8006770 <_dtoa_r+0x6e8>
 8006780:	2230      	movs	r2, #48	; 0x30
 8006782:	9903      	ldr	r1, [sp, #12]
 8006784:	f108 0801 	add.w	r8, r8, #1
 8006788:	700a      	strb	r2, [r1, #0]
 800678a:	781a      	ldrb	r2, [r3, #0]
 800678c:	3201      	adds	r2, #1
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	e79e      	b.n	80066d0 <_dtoa_r+0x648>
 8006792:	46d0      	mov	r8, sl
 8006794:	e7eb      	b.n	800676e <_dtoa_r+0x6e6>
 8006796:	2200      	movs	r2, #0
 8006798:	4b6e      	ldr	r3, [pc, #440]	; (8006954 <_dtoa_r+0x8cc>)
 800679a:	f7f9 fe9d 	bl	80004d8 <__aeabi_dmul>
 800679e:	2200      	movs	r2, #0
 80067a0:	2300      	movs	r3, #0
 80067a2:	4680      	mov	r8, r0
 80067a4:	4689      	mov	r9, r1
 80067a6:	f7fa f8ff 	bl	80009a8 <__aeabi_dcmpeq>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d09b      	beq.n	80066e6 <_dtoa_r+0x65e>
 80067ae:	e7cd      	b.n	800674c <_dtoa_r+0x6c4>
 80067b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067b2:	2a00      	cmp	r2, #0
 80067b4:	f000 80d0 	beq.w	8006958 <_dtoa_r+0x8d0>
 80067b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80067ba:	2a01      	cmp	r2, #1
 80067bc:	f300 80ae 	bgt.w	800691c <_dtoa_r+0x894>
 80067c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067c2:	2a00      	cmp	r2, #0
 80067c4:	f000 80a6 	beq.w	8006914 <_dtoa_r+0x88c>
 80067c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80067cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80067ce:	9f06      	ldr	r7, [sp, #24]
 80067d0:	9a06      	ldr	r2, [sp, #24]
 80067d2:	2101      	movs	r1, #1
 80067d4:	441a      	add	r2, r3
 80067d6:	9206      	str	r2, [sp, #24]
 80067d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067da:	4628      	mov	r0, r5
 80067dc:	441a      	add	r2, r3
 80067de:	9209      	str	r2, [sp, #36]	; 0x24
 80067e0:	f000 ff20 	bl	8007624 <__i2b>
 80067e4:	4606      	mov	r6, r0
 80067e6:	2f00      	cmp	r7, #0
 80067e8:	dd0c      	ble.n	8006804 <_dtoa_r+0x77c>
 80067ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	dd09      	ble.n	8006804 <_dtoa_r+0x77c>
 80067f0:	42bb      	cmp	r3, r7
 80067f2:	bfa8      	it	ge
 80067f4:	463b      	movge	r3, r7
 80067f6:	9a06      	ldr	r2, [sp, #24]
 80067f8:	1aff      	subs	r7, r7, r3
 80067fa:	1ad2      	subs	r2, r2, r3
 80067fc:	9206      	str	r2, [sp, #24]
 80067fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	9309      	str	r3, [sp, #36]	; 0x24
 8006804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006806:	b1f3      	cbz	r3, 8006846 <_dtoa_r+0x7be>
 8006808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 80a8 	beq.w	8006960 <_dtoa_r+0x8d8>
 8006810:	2c00      	cmp	r4, #0
 8006812:	dd10      	ble.n	8006836 <_dtoa_r+0x7ae>
 8006814:	4631      	mov	r1, r6
 8006816:	4622      	mov	r2, r4
 8006818:	4628      	mov	r0, r5
 800681a:	f000 ffc1 	bl	80077a0 <__pow5mult>
 800681e:	465a      	mov	r2, fp
 8006820:	4601      	mov	r1, r0
 8006822:	4606      	mov	r6, r0
 8006824:	4628      	mov	r0, r5
 8006826:	f000 ff13 	bl	8007650 <__multiply>
 800682a:	4680      	mov	r8, r0
 800682c:	4659      	mov	r1, fp
 800682e:	4628      	mov	r0, r5
 8006830:	f000 fdf8 	bl	8007424 <_Bfree>
 8006834:	46c3      	mov	fp, r8
 8006836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006838:	1b1a      	subs	r2, r3, r4
 800683a:	d004      	beq.n	8006846 <_dtoa_r+0x7be>
 800683c:	4659      	mov	r1, fp
 800683e:	4628      	mov	r0, r5
 8006840:	f000 ffae 	bl	80077a0 <__pow5mult>
 8006844:	4683      	mov	fp, r0
 8006846:	2101      	movs	r1, #1
 8006848:	4628      	mov	r0, r5
 800684a:	f000 feeb 	bl	8007624 <__i2b>
 800684e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006850:	4604      	mov	r4, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	f340 8086 	ble.w	8006964 <_dtoa_r+0x8dc>
 8006858:	461a      	mov	r2, r3
 800685a:	4601      	mov	r1, r0
 800685c:	4628      	mov	r0, r5
 800685e:	f000 ff9f 	bl	80077a0 <__pow5mult>
 8006862:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006864:	4604      	mov	r4, r0
 8006866:	2b01      	cmp	r3, #1
 8006868:	dd7f      	ble.n	800696a <_dtoa_r+0x8e2>
 800686a:	f04f 0800 	mov.w	r8, #0
 800686e:	6923      	ldr	r3, [r4, #16]
 8006870:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006874:	6918      	ldr	r0, [r3, #16]
 8006876:	f000 fe87 	bl	8007588 <__hi0bits>
 800687a:	f1c0 0020 	rsb	r0, r0, #32
 800687e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006880:	4418      	add	r0, r3
 8006882:	f010 001f 	ands.w	r0, r0, #31
 8006886:	f000 8092 	beq.w	80069ae <_dtoa_r+0x926>
 800688a:	f1c0 0320 	rsb	r3, r0, #32
 800688e:	2b04      	cmp	r3, #4
 8006890:	f340 808a 	ble.w	80069a8 <_dtoa_r+0x920>
 8006894:	f1c0 001c 	rsb	r0, r0, #28
 8006898:	9b06      	ldr	r3, [sp, #24]
 800689a:	4407      	add	r7, r0
 800689c:	4403      	add	r3, r0
 800689e:	9306      	str	r3, [sp, #24]
 80068a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a2:	4403      	add	r3, r0
 80068a4:	9309      	str	r3, [sp, #36]	; 0x24
 80068a6:	9b06      	ldr	r3, [sp, #24]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	dd05      	ble.n	80068b8 <_dtoa_r+0x830>
 80068ac:	4659      	mov	r1, fp
 80068ae:	461a      	mov	r2, r3
 80068b0:	4628      	mov	r0, r5
 80068b2:	f000 ffcf 	bl	8007854 <__lshift>
 80068b6:	4683      	mov	fp, r0
 80068b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	dd05      	ble.n	80068ca <_dtoa_r+0x842>
 80068be:	4621      	mov	r1, r4
 80068c0:	461a      	mov	r2, r3
 80068c2:	4628      	mov	r0, r5
 80068c4:	f000 ffc6 	bl	8007854 <__lshift>
 80068c8:	4604      	mov	r4, r0
 80068ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d070      	beq.n	80069b2 <_dtoa_r+0x92a>
 80068d0:	4621      	mov	r1, r4
 80068d2:	4658      	mov	r0, fp
 80068d4:	f001 f82e 	bl	8007934 <__mcmp>
 80068d8:	2800      	cmp	r0, #0
 80068da:	da6a      	bge.n	80069b2 <_dtoa_r+0x92a>
 80068dc:	2300      	movs	r3, #0
 80068de:	4659      	mov	r1, fp
 80068e0:	220a      	movs	r2, #10
 80068e2:	4628      	mov	r0, r5
 80068e4:	f000 fdc0 	bl	8007468 <__multadd>
 80068e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ea:	4683      	mov	fp, r0
 80068ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 8194 	beq.w	8006c1e <_dtoa_r+0xb96>
 80068f6:	4631      	mov	r1, r6
 80068f8:	2300      	movs	r3, #0
 80068fa:	220a      	movs	r2, #10
 80068fc:	4628      	mov	r0, r5
 80068fe:	f000 fdb3 	bl	8007468 <__multadd>
 8006902:	f1b9 0f00 	cmp.w	r9, #0
 8006906:	4606      	mov	r6, r0
 8006908:	f300 8093 	bgt.w	8006a32 <_dtoa_r+0x9aa>
 800690c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800690e:	2b02      	cmp	r3, #2
 8006910:	dc57      	bgt.n	80069c2 <_dtoa_r+0x93a>
 8006912:	e08e      	b.n	8006a32 <_dtoa_r+0x9aa>
 8006914:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006916:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800691a:	e757      	b.n	80067cc <_dtoa_r+0x744>
 800691c:	9b08      	ldr	r3, [sp, #32]
 800691e:	1e5c      	subs	r4, r3, #1
 8006920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006922:	42a3      	cmp	r3, r4
 8006924:	bfb7      	itett	lt
 8006926:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006928:	1b1c      	subge	r4, r3, r4
 800692a:	1ae2      	sublt	r2, r4, r3
 800692c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800692e:	bfbe      	ittt	lt
 8006930:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006932:	189b      	addlt	r3, r3, r2
 8006934:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006936:	9b08      	ldr	r3, [sp, #32]
 8006938:	bfb8      	it	lt
 800693a:	2400      	movlt	r4, #0
 800693c:	2b00      	cmp	r3, #0
 800693e:	bfbb      	ittet	lt
 8006940:	9b06      	ldrlt	r3, [sp, #24]
 8006942:	9a08      	ldrlt	r2, [sp, #32]
 8006944:	9f06      	ldrge	r7, [sp, #24]
 8006946:	1a9f      	sublt	r7, r3, r2
 8006948:	bfac      	ite	ge
 800694a:	9b08      	ldrge	r3, [sp, #32]
 800694c:	2300      	movlt	r3, #0
 800694e:	e73f      	b.n	80067d0 <_dtoa_r+0x748>
 8006950:	3fe00000 	.word	0x3fe00000
 8006954:	40240000 	.word	0x40240000
 8006958:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800695a:	9f06      	ldr	r7, [sp, #24]
 800695c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800695e:	e742      	b.n	80067e6 <_dtoa_r+0x75e>
 8006960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006962:	e76b      	b.n	800683c <_dtoa_r+0x7b4>
 8006964:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006966:	2b01      	cmp	r3, #1
 8006968:	dc19      	bgt.n	800699e <_dtoa_r+0x916>
 800696a:	9b04      	ldr	r3, [sp, #16]
 800696c:	b9bb      	cbnz	r3, 800699e <_dtoa_r+0x916>
 800696e:	9b05      	ldr	r3, [sp, #20]
 8006970:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006974:	b99b      	cbnz	r3, 800699e <_dtoa_r+0x916>
 8006976:	9b05      	ldr	r3, [sp, #20]
 8006978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800697c:	0d1b      	lsrs	r3, r3, #20
 800697e:	051b      	lsls	r3, r3, #20
 8006980:	b183      	cbz	r3, 80069a4 <_dtoa_r+0x91c>
 8006982:	f04f 0801 	mov.w	r8, #1
 8006986:	9b06      	ldr	r3, [sp, #24]
 8006988:	3301      	adds	r3, #1
 800698a:	9306      	str	r3, [sp, #24]
 800698c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800698e:	3301      	adds	r3, #1
 8006990:	9309      	str	r3, [sp, #36]	; 0x24
 8006992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006994:	2b00      	cmp	r3, #0
 8006996:	f47f af6a 	bne.w	800686e <_dtoa_r+0x7e6>
 800699a:	2001      	movs	r0, #1
 800699c:	e76f      	b.n	800687e <_dtoa_r+0x7f6>
 800699e:	f04f 0800 	mov.w	r8, #0
 80069a2:	e7f6      	b.n	8006992 <_dtoa_r+0x90a>
 80069a4:	4698      	mov	r8, r3
 80069a6:	e7f4      	b.n	8006992 <_dtoa_r+0x90a>
 80069a8:	f43f af7d 	beq.w	80068a6 <_dtoa_r+0x81e>
 80069ac:	4618      	mov	r0, r3
 80069ae:	301c      	adds	r0, #28
 80069b0:	e772      	b.n	8006898 <_dtoa_r+0x810>
 80069b2:	9b08      	ldr	r3, [sp, #32]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	dc36      	bgt.n	8006a26 <_dtoa_r+0x99e>
 80069b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	dd33      	ble.n	8006a26 <_dtoa_r+0x99e>
 80069be:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069c2:	f1b9 0f00 	cmp.w	r9, #0
 80069c6:	d10d      	bne.n	80069e4 <_dtoa_r+0x95c>
 80069c8:	4621      	mov	r1, r4
 80069ca:	464b      	mov	r3, r9
 80069cc:	2205      	movs	r2, #5
 80069ce:	4628      	mov	r0, r5
 80069d0:	f000 fd4a 	bl	8007468 <__multadd>
 80069d4:	4601      	mov	r1, r0
 80069d6:	4604      	mov	r4, r0
 80069d8:	4658      	mov	r0, fp
 80069da:	f000 ffab 	bl	8007934 <__mcmp>
 80069de:	2800      	cmp	r0, #0
 80069e0:	f73f adb8 	bgt.w	8006554 <_dtoa_r+0x4cc>
 80069e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069e6:	9f03      	ldr	r7, [sp, #12]
 80069e8:	ea6f 0a03 	mvn.w	sl, r3
 80069ec:	f04f 0800 	mov.w	r8, #0
 80069f0:	4621      	mov	r1, r4
 80069f2:	4628      	mov	r0, r5
 80069f4:	f000 fd16 	bl	8007424 <_Bfree>
 80069f8:	2e00      	cmp	r6, #0
 80069fa:	f43f aea7 	beq.w	800674c <_dtoa_r+0x6c4>
 80069fe:	f1b8 0f00 	cmp.w	r8, #0
 8006a02:	d005      	beq.n	8006a10 <_dtoa_r+0x988>
 8006a04:	45b0      	cmp	r8, r6
 8006a06:	d003      	beq.n	8006a10 <_dtoa_r+0x988>
 8006a08:	4641      	mov	r1, r8
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	f000 fd0a 	bl	8007424 <_Bfree>
 8006a10:	4631      	mov	r1, r6
 8006a12:	4628      	mov	r0, r5
 8006a14:	f000 fd06 	bl	8007424 <_Bfree>
 8006a18:	e698      	b.n	800674c <_dtoa_r+0x6c4>
 8006a1a:	2400      	movs	r4, #0
 8006a1c:	4626      	mov	r6, r4
 8006a1e:	e7e1      	b.n	80069e4 <_dtoa_r+0x95c>
 8006a20:	46c2      	mov	sl, r8
 8006a22:	4626      	mov	r6, r4
 8006a24:	e596      	b.n	8006554 <_dtoa_r+0x4cc>
 8006a26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 80fd 	beq.w	8006c2c <_dtoa_r+0xba4>
 8006a32:	2f00      	cmp	r7, #0
 8006a34:	dd05      	ble.n	8006a42 <_dtoa_r+0x9ba>
 8006a36:	4631      	mov	r1, r6
 8006a38:	463a      	mov	r2, r7
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	f000 ff0a 	bl	8007854 <__lshift>
 8006a40:	4606      	mov	r6, r0
 8006a42:	f1b8 0f00 	cmp.w	r8, #0
 8006a46:	d05c      	beq.n	8006b02 <_dtoa_r+0xa7a>
 8006a48:	4628      	mov	r0, r5
 8006a4a:	6871      	ldr	r1, [r6, #4]
 8006a4c:	f000 fcaa 	bl	80073a4 <_Balloc>
 8006a50:	4607      	mov	r7, r0
 8006a52:	b928      	cbnz	r0, 8006a60 <_dtoa_r+0x9d8>
 8006a54:	4602      	mov	r2, r0
 8006a56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006a5a:	4b7f      	ldr	r3, [pc, #508]	; (8006c58 <_dtoa_r+0xbd0>)
 8006a5c:	f7ff bb28 	b.w	80060b0 <_dtoa_r+0x28>
 8006a60:	6932      	ldr	r2, [r6, #16]
 8006a62:	f106 010c 	add.w	r1, r6, #12
 8006a66:	3202      	adds	r2, #2
 8006a68:	0092      	lsls	r2, r2, #2
 8006a6a:	300c      	adds	r0, #12
 8006a6c:	f000 fc8c 	bl	8007388 <memcpy>
 8006a70:	2201      	movs	r2, #1
 8006a72:	4639      	mov	r1, r7
 8006a74:	4628      	mov	r0, r5
 8006a76:	f000 feed 	bl	8007854 <__lshift>
 8006a7a:	46b0      	mov	r8, r6
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	9b03      	ldr	r3, [sp, #12]
 8006a80:	3301      	adds	r3, #1
 8006a82:	9308      	str	r3, [sp, #32]
 8006a84:	9b03      	ldr	r3, [sp, #12]
 8006a86:	444b      	add	r3, r9
 8006a88:	930a      	str	r3, [sp, #40]	; 0x28
 8006a8a:	9b04      	ldr	r3, [sp, #16]
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	9309      	str	r3, [sp, #36]	; 0x24
 8006a92:	9b08      	ldr	r3, [sp, #32]
 8006a94:	4621      	mov	r1, r4
 8006a96:	3b01      	subs	r3, #1
 8006a98:	4658      	mov	r0, fp
 8006a9a:	9304      	str	r3, [sp, #16]
 8006a9c:	f7ff fa68 	bl	8005f70 <quorem>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	4641      	mov	r1, r8
 8006aa4:	3330      	adds	r3, #48	; 0x30
 8006aa6:	9006      	str	r0, [sp, #24]
 8006aa8:	4658      	mov	r0, fp
 8006aaa:	930b      	str	r3, [sp, #44]	; 0x2c
 8006aac:	f000 ff42 	bl	8007934 <__mcmp>
 8006ab0:	4632      	mov	r2, r6
 8006ab2:	4681      	mov	r9, r0
 8006ab4:	4621      	mov	r1, r4
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	f000 ff58 	bl	800796c <__mdiff>
 8006abc:	68c2      	ldr	r2, [r0, #12]
 8006abe:	4607      	mov	r7, r0
 8006ac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ac2:	bb02      	cbnz	r2, 8006b06 <_dtoa_r+0xa7e>
 8006ac4:	4601      	mov	r1, r0
 8006ac6:	4658      	mov	r0, fp
 8006ac8:	f000 ff34 	bl	8007934 <__mcmp>
 8006acc:	4602      	mov	r2, r0
 8006ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ad0:	4639      	mov	r1, r7
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006ad8:	f000 fca4 	bl	8007424 <_Bfree>
 8006adc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ae0:	9f08      	ldr	r7, [sp, #32]
 8006ae2:	ea43 0102 	orr.w	r1, r3, r2
 8006ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae8:	430b      	orrs	r3, r1
 8006aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aec:	d10d      	bne.n	8006b0a <_dtoa_r+0xa82>
 8006aee:	2b39      	cmp	r3, #57	; 0x39
 8006af0:	d029      	beq.n	8006b46 <_dtoa_r+0xabe>
 8006af2:	f1b9 0f00 	cmp.w	r9, #0
 8006af6:	dd01      	ble.n	8006afc <_dtoa_r+0xa74>
 8006af8:	9b06      	ldr	r3, [sp, #24]
 8006afa:	3331      	adds	r3, #49	; 0x31
 8006afc:	9a04      	ldr	r2, [sp, #16]
 8006afe:	7013      	strb	r3, [r2, #0]
 8006b00:	e776      	b.n	80069f0 <_dtoa_r+0x968>
 8006b02:	4630      	mov	r0, r6
 8006b04:	e7b9      	b.n	8006a7a <_dtoa_r+0x9f2>
 8006b06:	2201      	movs	r2, #1
 8006b08:	e7e2      	b.n	8006ad0 <_dtoa_r+0xa48>
 8006b0a:	f1b9 0f00 	cmp.w	r9, #0
 8006b0e:	db06      	blt.n	8006b1e <_dtoa_r+0xa96>
 8006b10:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006b12:	ea41 0909 	orr.w	r9, r1, r9
 8006b16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b18:	ea59 0101 	orrs.w	r1, r9, r1
 8006b1c:	d120      	bne.n	8006b60 <_dtoa_r+0xad8>
 8006b1e:	2a00      	cmp	r2, #0
 8006b20:	ddec      	ble.n	8006afc <_dtoa_r+0xa74>
 8006b22:	4659      	mov	r1, fp
 8006b24:	2201      	movs	r2, #1
 8006b26:	4628      	mov	r0, r5
 8006b28:	9308      	str	r3, [sp, #32]
 8006b2a:	f000 fe93 	bl	8007854 <__lshift>
 8006b2e:	4621      	mov	r1, r4
 8006b30:	4683      	mov	fp, r0
 8006b32:	f000 feff 	bl	8007934 <__mcmp>
 8006b36:	2800      	cmp	r0, #0
 8006b38:	9b08      	ldr	r3, [sp, #32]
 8006b3a:	dc02      	bgt.n	8006b42 <_dtoa_r+0xaba>
 8006b3c:	d1de      	bne.n	8006afc <_dtoa_r+0xa74>
 8006b3e:	07da      	lsls	r2, r3, #31
 8006b40:	d5dc      	bpl.n	8006afc <_dtoa_r+0xa74>
 8006b42:	2b39      	cmp	r3, #57	; 0x39
 8006b44:	d1d8      	bne.n	8006af8 <_dtoa_r+0xa70>
 8006b46:	2339      	movs	r3, #57	; 0x39
 8006b48:	9a04      	ldr	r2, [sp, #16]
 8006b4a:	7013      	strb	r3, [r2, #0]
 8006b4c:	463b      	mov	r3, r7
 8006b4e:	461f      	mov	r7, r3
 8006b50:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	2a39      	cmp	r2, #57	; 0x39
 8006b58:	d050      	beq.n	8006bfc <_dtoa_r+0xb74>
 8006b5a:	3201      	adds	r2, #1
 8006b5c:	701a      	strb	r2, [r3, #0]
 8006b5e:	e747      	b.n	80069f0 <_dtoa_r+0x968>
 8006b60:	2a00      	cmp	r2, #0
 8006b62:	dd03      	ble.n	8006b6c <_dtoa_r+0xae4>
 8006b64:	2b39      	cmp	r3, #57	; 0x39
 8006b66:	d0ee      	beq.n	8006b46 <_dtoa_r+0xabe>
 8006b68:	3301      	adds	r3, #1
 8006b6a:	e7c7      	b.n	8006afc <_dtoa_r+0xa74>
 8006b6c:	9a08      	ldr	r2, [sp, #32]
 8006b6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b70:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006b74:	428a      	cmp	r2, r1
 8006b76:	d02a      	beq.n	8006bce <_dtoa_r+0xb46>
 8006b78:	4659      	mov	r1, fp
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	220a      	movs	r2, #10
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f000 fc72 	bl	8007468 <__multadd>
 8006b84:	45b0      	cmp	r8, r6
 8006b86:	4683      	mov	fp, r0
 8006b88:	f04f 0300 	mov.w	r3, #0
 8006b8c:	f04f 020a 	mov.w	r2, #10
 8006b90:	4641      	mov	r1, r8
 8006b92:	4628      	mov	r0, r5
 8006b94:	d107      	bne.n	8006ba6 <_dtoa_r+0xb1e>
 8006b96:	f000 fc67 	bl	8007468 <__multadd>
 8006b9a:	4680      	mov	r8, r0
 8006b9c:	4606      	mov	r6, r0
 8006b9e:	9b08      	ldr	r3, [sp, #32]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	9308      	str	r3, [sp, #32]
 8006ba4:	e775      	b.n	8006a92 <_dtoa_r+0xa0a>
 8006ba6:	f000 fc5f 	bl	8007468 <__multadd>
 8006baa:	4631      	mov	r1, r6
 8006bac:	4680      	mov	r8, r0
 8006bae:	2300      	movs	r3, #0
 8006bb0:	220a      	movs	r2, #10
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f000 fc58 	bl	8007468 <__multadd>
 8006bb8:	4606      	mov	r6, r0
 8006bba:	e7f0      	b.n	8006b9e <_dtoa_r+0xb16>
 8006bbc:	f1b9 0f00 	cmp.w	r9, #0
 8006bc0:	bfcc      	ite	gt
 8006bc2:	464f      	movgt	r7, r9
 8006bc4:	2701      	movle	r7, #1
 8006bc6:	f04f 0800 	mov.w	r8, #0
 8006bca:	9a03      	ldr	r2, [sp, #12]
 8006bcc:	4417      	add	r7, r2
 8006bce:	4659      	mov	r1, fp
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	9308      	str	r3, [sp, #32]
 8006bd6:	f000 fe3d 	bl	8007854 <__lshift>
 8006bda:	4621      	mov	r1, r4
 8006bdc:	4683      	mov	fp, r0
 8006bde:	f000 fea9 	bl	8007934 <__mcmp>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	dcb2      	bgt.n	8006b4c <_dtoa_r+0xac4>
 8006be6:	d102      	bne.n	8006bee <_dtoa_r+0xb66>
 8006be8:	9b08      	ldr	r3, [sp, #32]
 8006bea:	07db      	lsls	r3, r3, #31
 8006bec:	d4ae      	bmi.n	8006b4c <_dtoa_r+0xac4>
 8006bee:	463b      	mov	r3, r7
 8006bf0:	461f      	mov	r7, r3
 8006bf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bf6:	2a30      	cmp	r2, #48	; 0x30
 8006bf8:	d0fa      	beq.n	8006bf0 <_dtoa_r+0xb68>
 8006bfa:	e6f9      	b.n	80069f0 <_dtoa_r+0x968>
 8006bfc:	9a03      	ldr	r2, [sp, #12]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d1a5      	bne.n	8006b4e <_dtoa_r+0xac6>
 8006c02:	2331      	movs	r3, #49	; 0x31
 8006c04:	f10a 0a01 	add.w	sl, sl, #1
 8006c08:	e779      	b.n	8006afe <_dtoa_r+0xa76>
 8006c0a:	4b14      	ldr	r3, [pc, #80]	; (8006c5c <_dtoa_r+0xbd4>)
 8006c0c:	f7ff baa8 	b.w	8006160 <_dtoa_r+0xd8>
 8006c10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f47f aa81 	bne.w	800611a <_dtoa_r+0x92>
 8006c18:	4b11      	ldr	r3, [pc, #68]	; (8006c60 <_dtoa_r+0xbd8>)
 8006c1a:	f7ff baa1 	b.w	8006160 <_dtoa_r+0xd8>
 8006c1e:	f1b9 0f00 	cmp.w	r9, #0
 8006c22:	dc03      	bgt.n	8006c2c <_dtoa_r+0xba4>
 8006c24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	f73f aecb 	bgt.w	80069c2 <_dtoa_r+0x93a>
 8006c2c:	9f03      	ldr	r7, [sp, #12]
 8006c2e:	4621      	mov	r1, r4
 8006c30:	4658      	mov	r0, fp
 8006c32:	f7ff f99d 	bl	8005f70 <quorem>
 8006c36:	9a03      	ldr	r2, [sp, #12]
 8006c38:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006c3c:	f807 3b01 	strb.w	r3, [r7], #1
 8006c40:	1aba      	subs	r2, r7, r2
 8006c42:	4591      	cmp	r9, r2
 8006c44:	ddba      	ble.n	8006bbc <_dtoa_r+0xb34>
 8006c46:	4659      	mov	r1, fp
 8006c48:	2300      	movs	r3, #0
 8006c4a:	220a      	movs	r2, #10
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f000 fc0b 	bl	8007468 <__multadd>
 8006c52:	4683      	mov	fp, r0
 8006c54:	e7eb      	b.n	8006c2e <_dtoa_r+0xba6>
 8006c56:	bf00      	nop
 8006c58:	08009770 	.word	0x08009770
 8006c5c:	08009574 	.word	0x08009574
 8006c60:	080096f1 	.word	0x080096f1

08006c64 <rshift>:
 8006c64:	6903      	ldr	r3, [r0, #16]
 8006c66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c6a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006c6e:	f100 0414 	add.w	r4, r0, #20
 8006c72:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006c76:	dd46      	ble.n	8006d06 <rshift+0xa2>
 8006c78:	f011 011f 	ands.w	r1, r1, #31
 8006c7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006c80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006c84:	d10c      	bne.n	8006ca0 <rshift+0x3c>
 8006c86:	4629      	mov	r1, r5
 8006c88:	f100 0710 	add.w	r7, r0, #16
 8006c8c:	42b1      	cmp	r1, r6
 8006c8e:	d335      	bcc.n	8006cfc <rshift+0x98>
 8006c90:	1a9b      	subs	r3, r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	1eea      	subs	r2, r5, #3
 8006c96:	4296      	cmp	r6, r2
 8006c98:	bf38      	it	cc
 8006c9a:	2300      	movcc	r3, #0
 8006c9c:	4423      	add	r3, r4
 8006c9e:	e015      	b.n	8006ccc <rshift+0x68>
 8006ca0:	46a1      	mov	r9, r4
 8006ca2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006ca6:	f1c1 0820 	rsb	r8, r1, #32
 8006caa:	40cf      	lsrs	r7, r1
 8006cac:	f105 0e04 	add.w	lr, r5, #4
 8006cb0:	4576      	cmp	r6, lr
 8006cb2:	46f4      	mov	ip, lr
 8006cb4:	d816      	bhi.n	8006ce4 <rshift+0x80>
 8006cb6:	1a9a      	subs	r2, r3, r2
 8006cb8:	0092      	lsls	r2, r2, #2
 8006cba:	3a04      	subs	r2, #4
 8006cbc:	3501      	adds	r5, #1
 8006cbe:	42ae      	cmp	r6, r5
 8006cc0:	bf38      	it	cc
 8006cc2:	2200      	movcc	r2, #0
 8006cc4:	18a3      	adds	r3, r4, r2
 8006cc6:	50a7      	str	r7, [r4, r2]
 8006cc8:	b107      	cbz	r7, 8006ccc <rshift+0x68>
 8006cca:	3304      	adds	r3, #4
 8006ccc:	42a3      	cmp	r3, r4
 8006cce:	eba3 0204 	sub.w	r2, r3, r4
 8006cd2:	bf08      	it	eq
 8006cd4:	2300      	moveq	r3, #0
 8006cd6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006cda:	6102      	str	r2, [r0, #16]
 8006cdc:	bf08      	it	eq
 8006cde:	6143      	streq	r3, [r0, #20]
 8006ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ce4:	f8dc c000 	ldr.w	ip, [ip]
 8006ce8:	fa0c fc08 	lsl.w	ip, ip, r8
 8006cec:	ea4c 0707 	orr.w	r7, ip, r7
 8006cf0:	f849 7b04 	str.w	r7, [r9], #4
 8006cf4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006cf8:	40cf      	lsrs	r7, r1
 8006cfa:	e7d9      	b.n	8006cb0 <rshift+0x4c>
 8006cfc:	f851 cb04 	ldr.w	ip, [r1], #4
 8006d00:	f847 cf04 	str.w	ip, [r7, #4]!
 8006d04:	e7c2      	b.n	8006c8c <rshift+0x28>
 8006d06:	4623      	mov	r3, r4
 8006d08:	e7e0      	b.n	8006ccc <rshift+0x68>

08006d0a <__hexdig_fun>:
 8006d0a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006d0e:	2b09      	cmp	r3, #9
 8006d10:	d802      	bhi.n	8006d18 <__hexdig_fun+0xe>
 8006d12:	3820      	subs	r0, #32
 8006d14:	b2c0      	uxtb	r0, r0
 8006d16:	4770      	bx	lr
 8006d18:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006d1c:	2b05      	cmp	r3, #5
 8006d1e:	d801      	bhi.n	8006d24 <__hexdig_fun+0x1a>
 8006d20:	3847      	subs	r0, #71	; 0x47
 8006d22:	e7f7      	b.n	8006d14 <__hexdig_fun+0xa>
 8006d24:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006d28:	2b05      	cmp	r3, #5
 8006d2a:	d801      	bhi.n	8006d30 <__hexdig_fun+0x26>
 8006d2c:	3827      	subs	r0, #39	; 0x27
 8006d2e:	e7f1      	b.n	8006d14 <__hexdig_fun+0xa>
 8006d30:	2000      	movs	r0, #0
 8006d32:	4770      	bx	lr

08006d34 <__gethex>:
 8006d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d38:	b08b      	sub	sp, #44	; 0x2c
 8006d3a:	9305      	str	r3, [sp, #20]
 8006d3c:	4bb2      	ldr	r3, [pc, #712]	; (8007008 <__gethex+0x2d4>)
 8006d3e:	9002      	str	r0, [sp, #8]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	468b      	mov	fp, r1
 8006d44:	4618      	mov	r0, r3
 8006d46:	4690      	mov	r8, r2
 8006d48:	9303      	str	r3, [sp, #12]
 8006d4a:	f7f9 fa01 	bl	8000150 <strlen>
 8006d4e:	4682      	mov	sl, r0
 8006d50:	9b03      	ldr	r3, [sp, #12]
 8006d52:	f8db 2000 	ldr.w	r2, [fp]
 8006d56:	4403      	add	r3, r0
 8006d58:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006d5c:	9306      	str	r3, [sp, #24]
 8006d5e:	1c93      	adds	r3, r2, #2
 8006d60:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006d64:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006d68:	32fe      	adds	r2, #254	; 0xfe
 8006d6a:	18d1      	adds	r1, r2, r3
 8006d6c:	461f      	mov	r7, r3
 8006d6e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006d72:	9101      	str	r1, [sp, #4]
 8006d74:	2830      	cmp	r0, #48	; 0x30
 8006d76:	d0f8      	beq.n	8006d6a <__gethex+0x36>
 8006d78:	f7ff ffc7 	bl	8006d0a <__hexdig_fun>
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	d13a      	bne.n	8006df8 <__gethex+0xc4>
 8006d82:	4652      	mov	r2, sl
 8006d84:	4638      	mov	r0, r7
 8006d86:	9903      	ldr	r1, [sp, #12]
 8006d88:	f001 fa26 	bl	80081d8 <strncmp>
 8006d8c:	4605      	mov	r5, r0
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d166      	bne.n	8006e60 <__gethex+0x12c>
 8006d92:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006d96:	eb07 060a 	add.w	r6, r7, sl
 8006d9a:	f7ff ffb6 	bl	8006d0a <__hexdig_fun>
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d060      	beq.n	8006e64 <__gethex+0x130>
 8006da2:	4633      	mov	r3, r6
 8006da4:	7818      	ldrb	r0, [r3, #0]
 8006da6:	461f      	mov	r7, r3
 8006da8:	2830      	cmp	r0, #48	; 0x30
 8006daa:	f103 0301 	add.w	r3, r3, #1
 8006dae:	d0f9      	beq.n	8006da4 <__gethex+0x70>
 8006db0:	f7ff ffab 	bl	8006d0a <__hexdig_fun>
 8006db4:	2301      	movs	r3, #1
 8006db6:	fab0 f480 	clz	r4, r0
 8006dba:	4635      	mov	r5, r6
 8006dbc:	0964      	lsrs	r4, r4, #5
 8006dbe:	9301      	str	r3, [sp, #4]
 8006dc0:	463a      	mov	r2, r7
 8006dc2:	4616      	mov	r6, r2
 8006dc4:	7830      	ldrb	r0, [r6, #0]
 8006dc6:	3201      	adds	r2, #1
 8006dc8:	f7ff ff9f 	bl	8006d0a <__hexdig_fun>
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	d1f8      	bne.n	8006dc2 <__gethex+0x8e>
 8006dd0:	4652      	mov	r2, sl
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	9903      	ldr	r1, [sp, #12]
 8006dd6:	f001 f9ff 	bl	80081d8 <strncmp>
 8006dda:	b980      	cbnz	r0, 8006dfe <__gethex+0xca>
 8006ddc:	b94d      	cbnz	r5, 8006df2 <__gethex+0xbe>
 8006dde:	eb06 050a 	add.w	r5, r6, sl
 8006de2:	462a      	mov	r2, r5
 8006de4:	4616      	mov	r6, r2
 8006de6:	7830      	ldrb	r0, [r6, #0]
 8006de8:	3201      	adds	r2, #1
 8006dea:	f7ff ff8e 	bl	8006d0a <__hexdig_fun>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d1f8      	bne.n	8006de4 <__gethex+0xb0>
 8006df2:	1bad      	subs	r5, r5, r6
 8006df4:	00ad      	lsls	r5, r5, #2
 8006df6:	e004      	b.n	8006e02 <__gethex+0xce>
 8006df8:	2400      	movs	r4, #0
 8006dfa:	4625      	mov	r5, r4
 8006dfc:	e7e0      	b.n	8006dc0 <__gethex+0x8c>
 8006dfe:	2d00      	cmp	r5, #0
 8006e00:	d1f7      	bne.n	8006df2 <__gethex+0xbe>
 8006e02:	7833      	ldrb	r3, [r6, #0]
 8006e04:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e08:	2b50      	cmp	r3, #80	; 0x50
 8006e0a:	d139      	bne.n	8006e80 <__gethex+0x14c>
 8006e0c:	7873      	ldrb	r3, [r6, #1]
 8006e0e:	2b2b      	cmp	r3, #43	; 0x2b
 8006e10:	d02a      	beq.n	8006e68 <__gethex+0x134>
 8006e12:	2b2d      	cmp	r3, #45	; 0x2d
 8006e14:	d02c      	beq.n	8006e70 <__gethex+0x13c>
 8006e16:	f04f 0900 	mov.w	r9, #0
 8006e1a:	1c71      	adds	r1, r6, #1
 8006e1c:	7808      	ldrb	r0, [r1, #0]
 8006e1e:	f7ff ff74 	bl	8006d0a <__hexdig_fun>
 8006e22:	1e43      	subs	r3, r0, #1
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b18      	cmp	r3, #24
 8006e28:	d82a      	bhi.n	8006e80 <__gethex+0x14c>
 8006e2a:	f1a0 0210 	sub.w	r2, r0, #16
 8006e2e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006e32:	f7ff ff6a 	bl	8006d0a <__hexdig_fun>
 8006e36:	1e43      	subs	r3, r0, #1
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b18      	cmp	r3, #24
 8006e3c:	d91b      	bls.n	8006e76 <__gethex+0x142>
 8006e3e:	f1b9 0f00 	cmp.w	r9, #0
 8006e42:	d000      	beq.n	8006e46 <__gethex+0x112>
 8006e44:	4252      	negs	r2, r2
 8006e46:	4415      	add	r5, r2
 8006e48:	f8cb 1000 	str.w	r1, [fp]
 8006e4c:	b1d4      	cbz	r4, 8006e84 <__gethex+0x150>
 8006e4e:	9b01      	ldr	r3, [sp, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	bf14      	ite	ne
 8006e54:	2700      	movne	r7, #0
 8006e56:	2706      	moveq	r7, #6
 8006e58:	4638      	mov	r0, r7
 8006e5a:	b00b      	add	sp, #44	; 0x2c
 8006e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e60:	463e      	mov	r6, r7
 8006e62:	4625      	mov	r5, r4
 8006e64:	2401      	movs	r4, #1
 8006e66:	e7cc      	b.n	8006e02 <__gethex+0xce>
 8006e68:	f04f 0900 	mov.w	r9, #0
 8006e6c:	1cb1      	adds	r1, r6, #2
 8006e6e:	e7d5      	b.n	8006e1c <__gethex+0xe8>
 8006e70:	f04f 0901 	mov.w	r9, #1
 8006e74:	e7fa      	b.n	8006e6c <__gethex+0x138>
 8006e76:	230a      	movs	r3, #10
 8006e78:	fb03 0202 	mla	r2, r3, r2, r0
 8006e7c:	3a10      	subs	r2, #16
 8006e7e:	e7d6      	b.n	8006e2e <__gethex+0xfa>
 8006e80:	4631      	mov	r1, r6
 8006e82:	e7e1      	b.n	8006e48 <__gethex+0x114>
 8006e84:	4621      	mov	r1, r4
 8006e86:	1bf3      	subs	r3, r6, r7
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	2b07      	cmp	r3, #7
 8006e8c:	dc0a      	bgt.n	8006ea4 <__gethex+0x170>
 8006e8e:	9802      	ldr	r0, [sp, #8]
 8006e90:	f000 fa88 	bl	80073a4 <_Balloc>
 8006e94:	4604      	mov	r4, r0
 8006e96:	b940      	cbnz	r0, 8006eaa <__gethex+0x176>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	21de      	movs	r1, #222	; 0xde
 8006e9c:	4b5b      	ldr	r3, [pc, #364]	; (800700c <__gethex+0x2d8>)
 8006e9e:	485c      	ldr	r0, [pc, #368]	; (8007010 <__gethex+0x2dc>)
 8006ea0:	f001 f9bc 	bl	800821c <__assert_func>
 8006ea4:	3101      	adds	r1, #1
 8006ea6:	105b      	asrs	r3, r3, #1
 8006ea8:	e7ef      	b.n	8006e8a <__gethex+0x156>
 8006eaa:	f04f 0b00 	mov.w	fp, #0
 8006eae:	f100 0914 	add.w	r9, r0, #20
 8006eb2:	f1ca 0301 	rsb	r3, sl, #1
 8006eb6:	f8cd 9010 	str.w	r9, [sp, #16]
 8006eba:	f8cd b004 	str.w	fp, [sp, #4]
 8006ebe:	9308      	str	r3, [sp, #32]
 8006ec0:	42b7      	cmp	r7, r6
 8006ec2:	d33f      	bcc.n	8006f44 <__gethex+0x210>
 8006ec4:	9f04      	ldr	r7, [sp, #16]
 8006ec6:	9b01      	ldr	r3, [sp, #4]
 8006ec8:	f847 3b04 	str.w	r3, [r7], #4
 8006ecc:	eba7 0709 	sub.w	r7, r7, r9
 8006ed0:	10bf      	asrs	r7, r7, #2
 8006ed2:	6127      	str	r7, [r4, #16]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 fb57 	bl	8007588 <__hi0bits>
 8006eda:	017f      	lsls	r7, r7, #5
 8006edc:	f8d8 6000 	ldr.w	r6, [r8]
 8006ee0:	1a3f      	subs	r7, r7, r0
 8006ee2:	42b7      	cmp	r7, r6
 8006ee4:	dd62      	ble.n	8006fac <__gethex+0x278>
 8006ee6:	1bbf      	subs	r7, r7, r6
 8006ee8:	4639      	mov	r1, r7
 8006eea:	4620      	mov	r0, r4
 8006eec:	f000 fef1 	bl	8007cd2 <__any_on>
 8006ef0:	4682      	mov	sl, r0
 8006ef2:	b1a8      	cbz	r0, 8006f20 <__gethex+0x1ec>
 8006ef4:	f04f 0a01 	mov.w	sl, #1
 8006ef8:	1e7b      	subs	r3, r7, #1
 8006efa:	1159      	asrs	r1, r3, #5
 8006efc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006f00:	f003 021f 	and.w	r2, r3, #31
 8006f04:	fa0a f202 	lsl.w	r2, sl, r2
 8006f08:	420a      	tst	r2, r1
 8006f0a:	d009      	beq.n	8006f20 <__gethex+0x1ec>
 8006f0c:	4553      	cmp	r3, sl
 8006f0e:	dd05      	ble.n	8006f1c <__gethex+0x1e8>
 8006f10:	4620      	mov	r0, r4
 8006f12:	1eb9      	subs	r1, r7, #2
 8006f14:	f000 fedd 	bl	8007cd2 <__any_on>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	d144      	bne.n	8006fa6 <__gethex+0x272>
 8006f1c:	f04f 0a02 	mov.w	sl, #2
 8006f20:	4639      	mov	r1, r7
 8006f22:	4620      	mov	r0, r4
 8006f24:	f7ff fe9e 	bl	8006c64 <rshift>
 8006f28:	443d      	add	r5, r7
 8006f2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f2e:	42ab      	cmp	r3, r5
 8006f30:	da4a      	bge.n	8006fc8 <__gethex+0x294>
 8006f32:	4621      	mov	r1, r4
 8006f34:	9802      	ldr	r0, [sp, #8]
 8006f36:	f000 fa75 	bl	8007424 <_Bfree>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f3e:	27a3      	movs	r7, #163	; 0xa3
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	e789      	b.n	8006e58 <__gethex+0x124>
 8006f44:	1e73      	subs	r3, r6, #1
 8006f46:	9a06      	ldr	r2, [sp, #24]
 8006f48:	9307      	str	r3, [sp, #28]
 8006f4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d019      	beq.n	8006f86 <__gethex+0x252>
 8006f52:	f1bb 0f20 	cmp.w	fp, #32
 8006f56:	d107      	bne.n	8006f68 <__gethex+0x234>
 8006f58:	9b04      	ldr	r3, [sp, #16]
 8006f5a:	9a01      	ldr	r2, [sp, #4]
 8006f5c:	f843 2b04 	str.w	r2, [r3], #4
 8006f60:	9304      	str	r3, [sp, #16]
 8006f62:	2300      	movs	r3, #0
 8006f64:	469b      	mov	fp, r3
 8006f66:	9301      	str	r3, [sp, #4]
 8006f68:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006f6c:	f7ff fecd 	bl	8006d0a <__hexdig_fun>
 8006f70:	9b01      	ldr	r3, [sp, #4]
 8006f72:	f000 000f 	and.w	r0, r0, #15
 8006f76:	fa00 f00b 	lsl.w	r0, r0, fp
 8006f7a:	4303      	orrs	r3, r0
 8006f7c:	9301      	str	r3, [sp, #4]
 8006f7e:	f10b 0b04 	add.w	fp, fp, #4
 8006f82:	9b07      	ldr	r3, [sp, #28]
 8006f84:	e00d      	b.n	8006fa2 <__gethex+0x26e>
 8006f86:	9a08      	ldr	r2, [sp, #32]
 8006f88:	1e73      	subs	r3, r6, #1
 8006f8a:	4413      	add	r3, r2
 8006f8c:	42bb      	cmp	r3, r7
 8006f8e:	d3e0      	bcc.n	8006f52 <__gethex+0x21e>
 8006f90:	4618      	mov	r0, r3
 8006f92:	4652      	mov	r2, sl
 8006f94:	9903      	ldr	r1, [sp, #12]
 8006f96:	9309      	str	r3, [sp, #36]	; 0x24
 8006f98:	f001 f91e 	bl	80081d8 <strncmp>
 8006f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d1d7      	bne.n	8006f52 <__gethex+0x21e>
 8006fa2:	461e      	mov	r6, r3
 8006fa4:	e78c      	b.n	8006ec0 <__gethex+0x18c>
 8006fa6:	f04f 0a03 	mov.w	sl, #3
 8006faa:	e7b9      	b.n	8006f20 <__gethex+0x1ec>
 8006fac:	da09      	bge.n	8006fc2 <__gethex+0x28e>
 8006fae:	1bf7      	subs	r7, r6, r7
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	463a      	mov	r2, r7
 8006fb4:	9802      	ldr	r0, [sp, #8]
 8006fb6:	f000 fc4d 	bl	8007854 <__lshift>
 8006fba:	4604      	mov	r4, r0
 8006fbc:	1bed      	subs	r5, r5, r7
 8006fbe:	f100 0914 	add.w	r9, r0, #20
 8006fc2:	f04f 0a00 	mov.w	sl, #0
 8006fc6:	e7b0      	b.n	8006f2a <__gethex+0x1f6>
 8006fc8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006fcc:	42a8      	cmp	r0, r5
 8006fce:	dd72      	ble.n	80070b6 <__gethex+0x382>
 8006fd0:	1b45      	subs	r5, r0, r5
 8006fd2:	42ae      	cmp	r6, r5
 8006fd4:	dc35      	bgt.n	8007042 <__gethex+0x30e>
 8006fd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d029      	beq.n	8007032 <__gethex+0x2fe>
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d02b      	beq.n	800703a <__gethex+0x306>
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d11c      	bne.n	8007020 <__gethex+0x2ec>
 8006fe6:	42ae      	cmp	r6, r5
 8006fe8:	d11a      	bne.n	8007020 <__gethex+0x2ec>
 8006fea:	2e01      	cmp	r6, #1
 8006fec:	d112      	bne.n	8007014 <__gethex+0x2e0>
 8006fee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006ff2:	9a05      	ldr	r2, [sp, #20]
 8006ff4:	2762      	movs	r7, #98	; 0x62
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	6123      	str	r3, [r4, #16]
 8006ffc:	f8c9 3000 	str.w	r3, [r9]
 8007000:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007002:	601c      	str	r4, [r3, #0]
 8007004:	e728      	b.n	8006e58 <__gethex+0x124>
 8007006:	bf00      	nop
 8007008:	080097e8 	.word	0x080097e8
 800700c:	08009770 	.word	0x08009770
 8007010:	08009781 	.word	0x08009781
 8007014:	4620      	mov	r0, r4
 8007016:	1e71      	subs	r1, r6, #1
 8007018:	f000 fe5b 	bl	8007cd2 <__any_on>
 800701c:	2800      	cmp	r0, #0
 800701e:	d1e6      	bne.n	8006fee <__gethex+0x2ba>
 8007020:	4621      	mov	r1, r4
 8007022:	9802      	ldr	r0, [sp, #8]
 8007024:	f000 f9fe 	bl	8007424 <_Bfree>
 8007028:	2300      	movs	r3, #0
 800702a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800702c:	2750      	movs	r7, #80	; 0x50
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	e712      	b.n	8006e58 <__gethex+0x124>
 8007032:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1f3      	bne.n	8007020 <__gethex+0x2ec>
 8007038:	e7d9      	b.n	8006fee <__gethex+0x2ba>
 800703a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1d6      	bne.n	8006fee <__gethex+0x2ba>
 8007040:	e7ee      	b.n	8007020 <__gethex+0x2ec>
 8007042:	1e6f      	subs	r7, r5, #1
 8007044:	f1ba 0f00 	cmp.w	sl, #0
 8007048:	d132      	bne.n	80070b0 <__gethex+0x37c>
 800704a:	b127      	cbz	r7, 8007056 <__gethex+0x322>
 800704c:	4639      	mov	r1, r7
 800704e:	4620      	mov	r0, r4
 8007050:	f000 fe3f 	bl	8007cd2 <__any_on>
 8007054:	4682      	mov	sl, r0
 8007056:	2101      	movs	r1, #1
 8007058:	117b      	asrs	r3, r7, #5
 800705a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800705e:	f007 071f 	and.w	r7, r7, #31
 8007062:	fa01 f707 	lsl.w	r7, r1, r7
 8007066:	421f      	tst	r7, r3
 8007068:	f04f 0702 	mov.w	r7, #2
 800706c:	4629      	mov	r1, r5
 800706e:	4620      	mov	r0, r4
 8007070:	bf18      	it	ne
 8007072:	f04a 0a02 	orrne.w	sl, sl, #2
 8007076:	1b76      	subs	r6, r6, r5
 8007078:	f7ff fdf4 	bl	8006c64 <rshift>
 800707c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007080:	f1ba 0f00 	cmp.w	sl, #0
 8007084:	d048      	beq.n	8007118 <__gethex+0x3e4>
 8007086:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800708a:	2b02      	cmp	r3, #2
 800708c:	d015      	beq.n	80070ba <__gethex+0x386>
 800708e:	2b03      	cmp	r3, #3
 8007090:	d017      	beq.n	80070c2 <__gethex+0x38e>
 8007092:	2b01      	cmp	r3, #1
 8007094:	d109      	bne.n	80070aa <__gethex+0x376>
 8007096:	f01a 0f02 	tst.w	sl, #2
 800709a:	d006      	beq.n	80070aa <__gethex+0x376>
 800709c:	f8d9 0000 	ldr.w	r0, [r9]
 80070a0:	ea4a 0a00 	orr.w	sl, sl, r0
 80070a4:	f01a 0f01 	tst.w	sl, #1
 80070a8:	d10e      	bne.n	80070c8 <__gethex+0x394>
 80070aa:	f047 0710 	orr.w	r7, r7, #16
 80070ae:	e033      	b.n	8007118 <__gethex+0x3e4>
 80070b0:	f04f 0a01 	mov.w	sl, #1
 80070b4:	e7cf      	b.n	8007056 <__gethex+0x322>
 80070b6:	2701      	movs	r7, #1
 80070b8:	e7e2      	b.n	8007080 <__gethex+0x34c>
 80070ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070bc:	f1c3 0301 	rsb	r3, r3, #1
 80070c0:	9315      	str	r3, [sp, #84]	; 0x54
 80070c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d0f0      	beq.n	80070aa <__gethex+0x376>
 80070c8:	f04f 0c00 	mov.w	ip, #0
 80070cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80070d0:	f104 0314 	add.w	r3, r4, #20
 80070d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80070d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80070dc:	4618      	mov	r0, r3
 80070de:	f853 2b04 	ldr.w	r2, [r3], #4
 80070e2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80070e6:	d01c      	beq.n	8007122 <__gethex+0x3ee>
 80070e8:	3201      	adds	r2, #1
 80070ea:	6002      	str	r2, [r0, #0]
 80070ec:	2f02      	cmp	r7, #2
 80070ee:	f104 0314 	add.w	r3, r4, #20
 80070f2:	d13d      	bne.n	8007170 <__gethex+0x43c>
 80070f4:	f8d8 2000 	ldr.w	r2, [r8]
 80070f8:	3a01      	subs	r2, #1
 80070fa:	42b2      	cmp	r2, r6
 80070fc:	d10a      	bne.n	8007114 <__gethex+0x3e0>
 80070fe:	2201      	movs	r2, #1
 8007100:	1171      	asrs	r1, r6, #5
 8007102:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007106:	f006 061f 	and.w	r6, r6, #31
 800710a:	fa02 f606 	lsl.w	r6, r2, r6
 800710e:	421e      	tst	r6, r3
 8007110:	bf18      	it	ne
 8007112:	4617      	movne	r7, r2
 8007114:	f047 0720 	orr.w	r7, r7, #32
 8007118:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800711a:	601c      	str	r4, [r3, #0]
 800711c:	9b05      	ldr	r3, [sp, #20]
 800711e:	601d      	str	r5, [r3, #0]
 8007120:	e69a      	b.n	8006e58 <__gethex+0x124>
 8007122:	4299      	cmp	r1, r3
 8007124:	f843 cc04 	str.w	ip, [r3, #-4]
 8007128:	d8d8      	bhi.n	80070dc <__gethex+0x3a8>
 800712a:	68a3      	ldr	r3, [r4, #8]
 800712c:	459b      	cmp	fp, r3
 800712e:	db17      	blt.n	8007160 <__gethex+0x42c>
 8007130:	6861      	ldr	r1, [r4, #4]
 8007132:	9802      	ldr	r0, [sp, #8]
 8007134:	3101      	adds	r1, #1
 8007136:	f000 f935 	bl	80073a4 <_Balloc>
 800713a:	4681      	mov	r9, r0
 800713c:	b918      	cbnz	r0, 8007146 <__gethex+0x412>
 800713e:	4602      	mov	r2, r0
 8007140:	2184      	movs	r1, #132	; 0x84
 8007142:	4b19      	ldr	r3, [pc, #100]	; (80071a8 <__gethex+0x474>)
 8007144:	e6ab      	b.n	8006e9e <__gethex+0x16a>
 8007146:	6922      	ldr	r2, [r4, #16]
 8007148:	f104 010c 	add.w	r1, r4, #12
 800714c:	3202      	adds	r2, #2
 800714e:	0092      	lsls	r2, r2, #2
 8007150:	300c      	adds	r0, #12
 8007152:	f000 f919 	bl	8007388 <memcpy>
 8007156:	4621      	mov	r1, r4
 8007158:	9802      	ldr	r0, [sp, #8]
 800715a:	f000 f963 	bl	8007424 <_Bfree>
 800715e:	464c      	mov	r4, r9
 8007160:	6923      	ldr	r3, [r4, #16]
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	6122      	str	r2, [r4, #16]
 8007166:	2201      	movs	r2, #1
 8007168:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800716c:	615a      	str	r2, [r3, #20]
 800716e:	e7bd      	b.n	80070ec <__gethex+0x3b8>
 8007170:	6922      	ldr	r2, [r4, #16]
 8007172:	455a      	cmp	r2, fp
 8007174:	dd0b      	ble.n	800718e <__gethex+0x45a>
 8007176:	2101      	movs	r1, #1
 8007178:	4620      	mov	r0, r4
 800717a:	f7ff fd73 	bl	8006c64 <rshift>
 800717e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007182:	3501      	adds	r5, #1
 8007184:	42ab      	cmp	r3, r5
 8007186:	f6ff aed4 	blt.w	8006f32 <__gethex+0x1fe>
 800718a:	2701      	movs	r7, #1
 800718c:	e7c2      	b.n	8007114 <__gethex+0x3e0>
 800718e:	f016 061f 	ands.w	r6, r6, #31
 8007192:	d0fa      	beq.n	800718a <__gethex+0x456>
 8007194:	4453      	add	r3, sl
 8007196:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800719a:	f000 f9f5 	bl	8007588 <__hi0bits>
 800719e:	f1c6 0620 	rsb	r6, r6, #32
 80071a2:	42b0      	cmp	r0, r6
 80071a4:	dbe7      	blt.n	8007176 <__gethex+0x442>
 80071a6:	e7f0      	b.n	800718a <__gethex+0x456>
 80071a8:	08009770 	.word	0x08009770

080071ac <L_shift>:
 80071ac:	f1c2 0208 	rsb	r2, r2, #8
 80071b0:	0092      	lsls	r2, r2, #2
 80071b2:	b570      	push	{r4, r5, r6, lr}
 80071b4:	f1c2 0620 	rsb	r6, r2, #32
 80071b8:	6843      	ldr	r3, [r0, #4]
 80071ba:	6804      	ldr	r4, [r0, #0]
 80071bc:	fa03 f506 	lsl.w	r5, r3, r6
 80071c0:	432c      	orrs	r4, r5
 80071c2:	40d3      	lsrs	r3, r2
 80071c4:	6004      	str	r4, [r0, #0]
 80071c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80071ca:	4288      	cmp	r0, r1
 80071cc:	d3f4      	bcc.n	80071b8 <L_shift+0xc>
 80071ce:	bd70      	pop	{r4, r5, r6, pc}

080071d0 <__match>:
 80071d0:	b530      	push	{r4, r5, lr}
 80071d2:	6803      	ldr	r3, [r0, #0]
 80071d4:	3301      	adds	r3, #1
 80071d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071da:	b914      	cbnz	r4, 80071e2 <__match+0x12>
 80071dc:	6003      	str	r3, [r0, #0]
 80071de:	2001      	movs	r0, #1
 80071e0:	bd30      	pop	{r4, r5, pc}
 80071e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80071ea:	2d19      	cmp	r5, #25
 80071ec:	bf98      	it	ls
 80071ee:	3220      	addls	r2, #32
 80071f0:	42a2      	cmp	r2, r4
 80071f2:	d0f0      	beq.n	80071d6 <__match+0x6>
 80071f4:	2000      	movs	r0, #0
 80071f6:	e7f3      	b.n	80071e0 <__match+0x10>

080071f8 <__hexnan>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	2500      	movs	r5, #0
 80071fe:	680b      	ldr	r3, [r1, #0]
 8007200:	4682      	mov	sl, r0
 8007202:	115e      	asrs	r6, r3, #5
 8007204:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007208:	f013 031f 	ands.w	r3, r3, #31
 800720c:	bf18      	it	ne
 800720e:	3604      	addne	r6, #4
 8007210:	1f37      	subs	r7, r6, #4
 8007212:	46b9      	mov	r9, r7
 8007214:	463c      	mov	r4, r7
 8007216:	46ab      	mov	fp, r5
 8007218:	b087      	sub	sp, #28
 800721a:	4690      	mov	r8, r2
 800721c:	6802      	ldr	r2, [r0, #0]
 800721e:	9301      	str	r3, [sp, #4]
 8007220:	f846 5c04 	str.w	r5, [r6, #-4]
 8007224:	9502      	str	r5, [sp, #8]
 8007226:	7851      	ldrb	r1, [r2, #1]
 8007228:	1c53      	adds	r3, r2, #1
 800722a:	9303      	str	r3, [sp, #12]
 800722c:	b341      	cbz	r1, 8007280 <__hexnan+0x88>
 800722e:	4608      	mov	r0, r1
 8007230:	9205      	str	r2, [sp, #20]
 8007232:	9104      	str	r1, [sp, #16]
 8007234:	f7ff fd69 	bl	8006d0a <__hexdig_fun>
 8007238:	2800      	cmp	r0, #0
 800723a:	d14f      	bne.n	80072dc <__hexnan+0xe4>
 800723c:	9904      	ldr	r1, [sp, #16]
 800723e:	9a05      	ldr	r2, [sp, #20]
 8007240:	2920      	cmp	r1, #32
 8007242:	d818      	bhi.n	8007276 <__hexnan+0x7e>
 8007244:	9b02      	ldr	r3, [sp, #8]
 8007246:	459b      	cmp	fp, r3
 8007248:	dd13      	ble.n	8007272 <__hexnan+0x7a>
 800724a:	454c      	cmp	r4, r9
 800724c:	d206      	bcs.n	800725c <__hexnan+0x64>
 800724e:	2d07      	cmp	r5, #7
 8007250:	dc04      	bgt.n	800725c <__hexnan+0x64>
 8007252:	462a      	mov	r2, r5
 8007254:	4649      	mov	r1, r9
 8007256:	4620      	mov	r0, r4
 8007258:	f7ff ffa8 	bl	80071ac <L_shift>
 800725c:	4544      	cmp	r4, r8
 800725e:	d950      	bls.n	8007302 <__hexnan+0x10a>
 8007260:	2300      	movs	r3, #0
 8007262:	f1a4 0904 	sub.w	r9, r4, #4
 8007266:	f844 3c04 	str.w	r3, [r4, #-4]
 800726a:	461d      	mov	r5, r3
 800726c:	464c      	mov	r4, r9
 800726e:	f8cd b008 	str.w	fp, [sp, #8]
 8007272:	9a03      	ldr	r2, [sp, #12]
 8007274:	e7d7      	b.n	8007226 <__hexnan+0x2e>
 8007276:	2929      	cmp	r1, #41	; 0x29
 8007278:	d156      	bne.n	8007328 <__hexnan+0x130>
 800727a:	3202      	adds	r2, #2
 800727c:	f8ca 2000 	str.w	r2, [sl]
 8007280:	f1bb 0f00 	cmp.w	fp, #0
 8007284:	d050      	beq.n	8007328 <__hexnan+0x130>
 8007286:	454c      	cmp	r4, r9
 8007288:	d206      	bcs.n	8007298 <__hexnan+0xa0>
 800728a:	2d07      	cmp	r5, #7
 800728c:	dc04      	bgt.n	8007298 <__hexnan+0xa0>
 800728e:	462a      	mov	r2, r5
 8007290:	4649      	mov	r1, r9
 8007292:	4620      	mov	r0, r4
 8007294:	f7ff ff8a 	bl	80071ac <L_shift>
 8007298:	4544      	cmp	r4, r8
 800729a:	d934      	bls.n	8007306 <__hexnan+0x10e>
 800729c:	4623      	mov	r3, r4
 800729e:	f1a8 0204 	sub.w	r2, r8, #4
 80072a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80072a6:	429f      	cmp	r7, r3
 80072a8:	f842 1f04 	str.w	r1, [r2, #4]!
 80072ac:	d2f9      	bcs.n	80072a2 <__hexnan+0xaa>
 80072ae:	1b3b      	subs	r3, r7, r4
 80072b0:	f023 0303 	bic.w	r3, r3, #3
 80072b4:	3304      	adds	r3, #4
 80072b6:	3401      	adds	r4, #1
 80072b8:	3e03      	subs	r6, #3
 80072ba:	42b4      	cmp	r4, r6
 80072bc:	bf88      	it	hi
 80072be:	2304      	movhi	r3, #4
 80072c0:	2200      	movs	r2, #0
 80072c2:	4443      	add	r3, r8
 80072c4:	f843 2b04 	str.w	r2, [r3], #4
 80072c8:	429f      	cmp	r7, r3
 80072ca:	d2fb      	bcs.n	80072c4 <__hexnan+0xcc>
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	b91b      	cbnz	r3, 80072d8 <__hexnan+0xe0>
 80072d0:	4547      	cmp	r7, r8
 80072d2:	d127      	bne.n	8007324 <__hexnan+0x12c>
 80072d4:	2301      	movs	r3, #1
 80072d6:	603b      	str	r3, [r7, #0]
 80072d8:	2005      	movs	r0, #5
 80072da:	e026      	b.n	800732a <__hexnan+0x132>
 80072dc:	3501      	adds	r5, #1
 80072de:	2d08      	cmp	r5, #8
 80072e0:	f10b 0b01 	add.w	fp, fp, #1
 80072e4:	dd06      	ble.n	80072f4 <__hexnan+0xfc>
 80072e6:	4544      	cmp	r4, r8
 80072e8:	d9c3      	bls.n	8007272 <__hexnan+0x7a>
 80072ea:	2300      	movs	r3, #0
 80072ec:	2501      	movs	r5, #1
 80072ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80072f2:	3c04      	subs	r4, #4
 80072f4:	6822      	ldr	r2, [r4, #0]
 80072f6:	f000 000f 	and.w	r0, r0, #15
 80072fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80072fe:	6022      	str	r2, [r4, #0]
 8007300:	e7b7      	b.n	8007272 <__hexnan+0x7a>
 8007302:	2508      	movs	r5, #8
 8007304:	e7b5      	b.n	8007272 <__hexnan+0x7a>
 8007306:	9b01      	ldr	r3, [sp, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0df      	beq.n	80072cc <__hexnan+0xd4>
 800730c:	f04f 32ff 	mov.w	r2, #4294967295
 8007310:	f1c3 0320 	rsb	r3, r3, #32
 8007314:	fa22 f303 	lsr.w	r3, r2, r3
 8007318:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800731c:	401a      	ands	r2, r3
 800731e:	f846 2c04 	str.w	r2, [r6, #-4]
 8007322:	e7d3      	b.n	80072cc <__hexnan+0xd4>
 8007324:	3f04      	subs	r7, #4
 8007326:	e7d1      	b.n	80072cc <__hexnan+0xd4>
 8007328:	2004      	movs	r0, #4
 800732a:	b007      	add	sp, #28
 800732c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007330 <_localeconv_r>:
 8007330:	4800      	ldr	r0, [pc, #0]	; (8007334 <_localeconv_r+0x4>)
 8007332:	4770      	bx	lr
 8007334:	2000016c 	.word	0x2000016c

08007338 <malloc>:
 8007338:	4b02      	ldr	r3, [pc, #8]	; (8007344 <malloc+0xc>)
 800733a:	4601      	mov	r1, r0
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	f000 bd65 	b.w	8007e0c <_malloc_r>
 8007342:	bf00      	nop
 8007344:	20000014 	.word	0x20000014

08007348 <__ascii_mbtowc>:
 8007348:	b082      	sub	sp, #8
 800734a:	b901      	cbnz	r1, 800734e <__ascii_mbtowc+0x6>
 800734c:	a901      	add	r1, sp, #4
 800734e:	b142      	cbz	r2, 8007362 <__ascii_mbtowc+0x1a>
 8007350:	b14b      	cbz	r3, 8007366 <__ascii_mbtowc+0x1e>
 8007352:	7813      	ldrb	r3, [r2, #0]
 8007354:	600b      	str	r3, [r1, #0]
 8007356:	7812      	ldrb	r2, [r2, #0]
 8007358:	1e10      	subs	r0, r2, #0
 800735a:	bf18      	it	ne
 800735c:	2001      	movne	r0, #1
 800735e:	b002      	add	sp, #8
 8007360:	4770      	bx	lr
 8007362:	4610      	mov	r0, r2
 8007364:	e7fb      	b.n	800735e <__ascii_mbtowc+0x16>
 8007366:	f06f 0001 	mvn.w	r0, #1
 800736a:	e7f8      	b.n	800735e <__ascii_mbtowc+0x16>

0800736c <memchr>:
 800736c:	4603      	mov	r3, r0
 800736e:	b510      	push	{r4, lr}
 8007370:	b2c9      	uxtb	r1, r1
 8007372:	4402      	add	r2, r0
 8007374:	4293      	cmp	r3, r2
 8007376:	4618      	mov	r0, r3
 8007378:	d101      	bne.n	800737e <memchr+0x12>
 800737a:	2000      	movs	r0, #0
 800737c:	e003      	b.n	8007386 <memchr+0x1a>
 800737e:	7804      	ldrb	r4, [r0, #0]
 8007380:	3301      	adds	r3, #1
 8007382:	428c      	cmp	r4, r1
 8007384:	d1f6      	bne.n	8007374 <memchr+0x8>
 8007386:	bd10      	pop	{r4, pc}

08007388 <memcpy>:
 8007388:	440a      	add	r2, r1
 800738a:	4291      	cmp	r1, r2
 800738c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007390:	d100      	bne.n	8007394 <memcpy+0xc>
 8007392:	4770      	bx	lr
 8007394:	b510      	push	{r4, lr}
 8007396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800739a:	4291      	cmp	r1, r2
 800739c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073a0:	d1f9      	bne.n	8007396 <memcpy+0xe>
 80073a2:	bd10      	pop	{r4, pc}

080073a4 <_Balloc>:
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073a8:	4604      	mov	r4, r0
 80073aa:	460d      	mov	r5, r1
 80073ac:	b976      	cbnz	r6, 80073cc <_Balloc+0x28>
 80073ae:	2010      	movs	r0, #16
 80073b0:	f7ff ffc2 	bl	8007338 <malloc>
 80073b4:	4602      	mov	r2, r0
 80073b6:	6260      	str	r0, [r4, #36]	; 0x24
 80073b8:	b920      	cbnz	r0, 80073c4 <_Balloc+0x20>
 80073ba:	2166      	movs	r1, #102	; 0x66
 80073bc:	4b17      	ldr	r3, [pc, #92]	; (800741c <_Balloc+0x78>)
 80073be:	4818      	ldr	r0, [pc, #96]	; (8007420 <_Balloc+0x7c>)
 80073c0:	f000 ff2c 	bl	800821c <__assert_func>
 80073c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073c8:	6006      	str	r6, [r0, #0]
 80073ca:	60c6      	str	r6, [r0, #12]
 80073cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80073ce:	68f3      	ldr	r3, [r6, #12]
 80073d0:	b183      	cbz	r3, 80073f4 <_Balloc+0x50>
 80073d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073da:	b9b8      	cbnz	r0, 800740c <_Balloc+0x68>
 80073dc:	2101      	movs	r1, #1
 80073de:	fa01 f605 	lsl.w	r6, r1, r5
 80073e2:	1d72      	adds	r2, r6, #5
 80073e4:	4620      	mov	r0, r4
 80073e6:	0092      	lsls	r2, r2, #2
 80073e8:	f000 fc94 	bl	8007d14 <_calloc_r>
 80073ec:	b160      	cbz	r0, 8007408 <_Balloc+0x64>
 80073ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073f2:	e00e      	b.n	8007412 <_Balloc+0x6e>
 80073f4:	2221      	movs	r2, #33	; 0x21
 80073f6:	2104      	movs	r1, #4
 80073f8:	4620      	mov	r0, r4
 80073fa:	f000 fc8b 	bl	8007d14 <_calloc_r>
 80073fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007400:	60f0      	str	r0, [r6, #12]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1e4      	bne.n	80073d2 <_Balloc+0x2e>
 8007408:	2000      	movs	r0, #0
 800740a:	bd70      	pop	{r4, r5, r6, pc}
 800740c:	6802      	ldr	r2, [r0, #0]
 800740e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007412:	2300      	movs	r3, #0
 8007414:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007418:	e7f7      	b.n	800740a <_Balloc+0x66>
 800741a:	bf00      	nop
 800741c:	080096fe 	.word	0x080096fe
 8007420:	080097fc 	.word	0x080097fc

08007424 <_Bfree>:
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007428:	4605      	mov	r5, r0
 800742a:	460c      	mov	r4, r1
 800742c:	b976      	cbnz	r6, 800744c <_Bfree+0x28>
 800742e:	2010      	movs	r0, #16
 8007430:	f7ff ff82 	bl	8007338 <malloc>
 8007434:	4602      	mov	r2, r0
 8007436:	6268      	str	r0, [r5, #36]	; 0x24
 8007438:	b920      	cbnz	r0, 8007444 <_Bfree+0x20>
 800743a:	218a      	movs	r1, #138	; 0x8a
 800743c:	4b08      	ldr	r3, [pc, #32]	; (8007460 <_Bfree+0x3c>)
 800743e:	4809      	ldr	r0, [pc, #36]	; (8007464 <_Bfree+0x40>)
 8007440:	f000 feec 	bl	800821c <__assert_func>
 8007444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007448:	6006      	str	r6, [r0, #0]
 800744a:	60c6      	str	r6, [r0, #12]
 800744c:	b13c      	cbz	r4, 800745e <_Bfree+0x3a>
 800744e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007450:	6862      	ldr	r2, [r4, #4]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007458:	6021      	str	r1, [r4, #0]
 800745a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800745e:	bd70      	pop	{r4, r5, r6, pc}
 8007460:	080096fe 	.word	0x080096fe
 8007464:	080097fc 	.word	0x080097fc

08007468 <__multadd>:
 8007468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800746c:	4607      	mov	r7, r0
 800746e:	460c      	mov	r4, r1
 8007470:	461e      	mov	r6, r3
 8007472:	2000      	movs	r0, #0
 8007474:	690d      	ldr	r5, [r1, #16]
 8007476:	f101 0c14 	add.w	ip, r1, #20
 800747a:	f8dc 3000 	ldr.w	r3, [ip]
 800747e:	3001      	adds	r0, #1
 8007480:	b299      	uxth	r1, r3
 8007482:	fb02 6101 	mla	r1, r2, r1, r6
 8007486:	0c1e      	lsrs	r6, r3, #16
 8007488:	0c0b      	lsrs	r3, r1, #16
 800748a:	fb02 3306 	mla	r3, r2, r6, r3
 800748e:	b289      	uxth	r1, r1
 8007490:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007494:	4285      	cmp	r5, r0
 8007496:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800749a:	f84c 1b04 	str.w	r1, [ip], #4
 800749e:	dcec      	bgt.n	800747a <__multadd+0x12>
 80074a0:	b30e      	cbz	r6, 80074e6 <__multadd+0x7e>
 80074a2:	68a3      	ldr	r3, [r4, #8]
 80074a4:	42ab      	cmp	r3, r5
 80074a6:	dc19      	bgt.n	80074dc <__multadd+0x74>
 80074a8:	6861      	ldr	r1, [r4, #4]
 80074aa:	4638      	mov	r0, r7
 80074ac:	3101      	adds	r1, #1
 80074ae:	f7ff ff79 	bl	80073a4 <_Balloc>
 80074b2:	4680      	mov	r8, r0
 80074b4:	b928      	cbnz	r0, 80074c2 <__multadd+0x5a>
 80074b6:	4602      	mov	r2, r0
 80074b8:	21b5      	movs	r1, #181	; 0xb5
 80074ba:	4b0c      	ldr	r3, [pc, #48]	; (80074ec <__multadd+0x84>)
 80074bc:	480c      	ldr	r0, [pc, #48]	; (80074f0 <__multadd+0x88>)
 80074be:	f000 fead 	bl	800821c <__assert_func>
 80074c2:	6922      	ldr	r2, [r4, #16]
 80074c4:	f104 010c 	add.w	r1, r4, #12
 80074c8:	3202      	adds	r2, #2
 80074ca:	0092      	lsls	r2, r2, #2
 80074cc:	300c      	adds	r0, #12
 80074ce:	f7ff ff5b 	bl	8007388 <memcpy>
 80074d2:	4621      	mov	r1, r4
 80074d4:	4638      	mov	r0, r7
 80074d6:	f7ff ffa5 	bl	8007424 <_Bfree>
 80074da:	4644      	mov	r4, r8
 80074dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074e0:	3501      	adds	r5, #1
 80074e2:	615e      	str	r6, [r3, #20]
 80074e4:	6125      	str	r5, [r4, #16]
 80074e6:	4620      	mov	r0, r4
 80074e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074ec:	08009770 	.word	0x08009770
 80074f0:	080097fc 	.word	0x080097fc

080074f4 <__s2b>:
 80074f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f8:	4615      	mov	r5, r2
 80074fa:	2209      	movs	r2, #9
 80074fc:	461f      	mov	r7, r3
 80074fe:	3308      	adds	r3, #8
 8007500:	460c      	mov	r4, r1
 8007502:	fb93 f3f2 	sdiv	r3, r3, r2
 8007506:	4606      	mov	r6, r0
 8007508:	2201      	movs	r2, #1
 800750a:	2100      	movs	r1, #0
 800750c:	429a      	cmp	r2, r3
 800750e:	db09      	blt.n	8007524 <__s2b+0x30>
 8007510:	4630      	mov	r0, r6
 8007512:	f7ff ff47 	bl	80073a4 <_Balloc>
 8007516:	b940      	cbnz	r0, 800752a <__s2b+0x36>
 8007518:	4602      	mov	r2, r0
 800751a:	21ce      	movs	r1, #206	; 0xce
 800751c:	4b18      	ldr	r3, [pc, #96]	; (8007580 <__s2b+0x8c>)
 800751e:	4819      	ldr	r0, [pc, #100]	; (8007584 <__s2b+0x90>)
 8007520:	f000 fe7c 	bl	800821c <__assert_func>
 8007524:	0052      	lsls	r2, r2, #1
 8007526:	3101      	adds	r1, #1
 8007528:	e7f0      	b.n	800750c <__s2b+0x18>
 800752a:	9b08      	ldr	r3, [sp, #32]
 800752c:	2d09      	cmp	r5, #9
 800752e:	6143      	str	r3, [r0, #20]
 8007530:	f04f 0301 	mov.w	r3, #1
 8007534:	6103      	str	r3, [r0, #16]
 8007536:	dd16      	ble.n	8007566 <__s2b+0x72>
 8007538:	f104 0909 	add.w	r9, r4, #9
 800753c:	46c8      	mov	r8, r9
 800753e:	442c      	add	r4, r5
 8007540:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007544:	4601      	mov	r1, r0
 8007546:	220a      	movs	r2, #10
 8007548:	4630      	mov	r0, r6
 800754a:	3b30      	subs	r3, #48	; 0x30
 800754c:	f7ff ff8c 	bl	8007468 <__multadd>
 8007550:	45a0      	cmp	r8, r4
 8007552:	d1f5      	bne.n	8007540 <__s2b+0x4c>
 8007554:	f1a5 0408 	sub.w	r4, r5, #8
 8007558:	444c      	add	r4, r9
 800755a:	1b2d      	subs	r5, r5, r4
 800755c:	1963      	adds	r3, r4, r5
 800755e:	42bb      	cmp	r3, r7
 8007560:	db04      	blt.n	800756c <__s2b+0x78>
 8007562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007566:	2509      	movs	r5, #9
 8007568:	340a      	adds	r4, #10
 800756a:	e7f6      	b.n	800755a <__s2b+0x66>
 800756c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007570:	4601      	mov	r1, r0
 8007572:	220a      	movs	r2, #10
 8007574:	4630      	mov	r0, r6
 8007576:	3b30      	subs	r3, #48	; 0x30
 8007578:	f7ff ff76 	bl	8007468 <__multadd>
 800757c:	e7ee      	b.n	800755c <__s2b+0x68>
 800757e:	bf00      	nop
 8007580:	08009770 	.word	0x08009770
 8007584:	080097fc 	.word	0x080097fc

08007588 <__hi0bits>:
 8007588:	0c02      	lsrs	r2, r0, #16
 800758a:	0412      	lsls	r2, r2, #16
 800758c:	4603      	mov	r3, r0
 800758e:	b9ca      	cbnz	r2, 80075c4 <__hi0bits+0x3c>
 8007590:	0403      	lsls	r3, r0, #16
 8007592:	2010      	movs	r0, #16
 8007594:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007598:	bf04      	itt	eq
 800759a:	021b      	lsleq	r3, r3, #8
 800759c:	3008      	addeq	r0, #8
 800759e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80075a2:	bf04      	itt	eq
 80075a4:	011b      	lsleq	r3, r3, #4
 80075a6:	3004      	addeq	r0, #4
 80075a8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80075ac:	bf04      	itt	eq
 80075ae:	009b      	lsleq	r3, r3, #2
 80075b0:	3002      	addeq	r0, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	db05      	blt.n	80075c2 <__hi0bits+0x3a>
 80075b6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80075ba:	f100 0001 	add.w	r0, r0, #1
 80075be:	bf08      	it	eq
 80075c0:	2020      	moveq	r0, #32
 80075c2:	4770      	bx	lr
 80075c4:	2000      	movs	r0, #0
 80075c6:	e7e5      	b.n	8007594 <__hi0bits+0xc>

080075c8 <__lo0bits>:
 80075c8:	6803      	ldr	r3, [r0, #0]
 80075ca:	4602      	mov	r2, r0
 80075cc:	f013 0007 	ands.w	r0, r3, #7
 80075d0:	d00b      	beq.n	80075ea <__lo0bits+0x22>
 80075d2:	07d9      	lsls	r1, r3, #31
 80075d4:	d421      	bmi.n	800761a <__lo0bits+0x52>
 80075d6:	0798      	lsls	r0, r3, #30
 80075d8:	bf49      	itett	mi
 80075da:	085b      	lsrmi	r3, r3, #1
 80075dc:	089b      	lsrpl	r3, r3, #2
 80075de:	2001      	movmi	r0, #1
 80075e0:	6013      	strmi	r3, [r2, #0]
 80075e2:	bf5c      	itt	pl
 80075e4:	2002      	movpl	r0, #2
 80075e6:	6013      	strpl	r3, [r2, #0]
 80075e8:	4770      	bx	lr
 80075ea:	b299      	uxth	r1, r3
 80075ec:	b909      	cbnz	r1, 80075f2 <__lo0bits+0x2a>
 80075ee:	2010      	movs	r0, #16
 80075f0:	0c1b      	lsrs	r3, r3, #16
 80075f2:	b2d9      	uxtb	r1, r3
 80075f4:	b909      	cbnz	r1, 80075fa <__lo0bits+0x32>
 80075f6:	3008      	adds	r0, #8
 80075f8:	0a1b      	lsrs	r3, r3, #8
 80075fa:	0719      	lsls	r1, r3, #28
 80075fc:	bf04      	itt	eq
 80075fe:	091b      	lsreq	r3, r3, #4
 8007600:	3004      	addeq	r0, #4
 8007602:	0799      	lsls	r1, r3, #30
 8007604:	bf04      	itt	eq
 8007606:	089b      	lsreq	r3, r3, #2
 8007608:	3002      	addeq	r0, #2
 800760a:	07d9      	lsls	r1, r3, #31
 800760c:	d403      	bmi.n	8007616 <__lo0bits+0x4e>
 800760e:	085b      	lsrs	r3, r3, #1
 8007610:	f100 0001 	add.w	r0, r0, #1
 8007614:	d003      	beq.n	800761e <__lo0bits+0x56>
 8007616:	6013      	str	r3, [r2, #0]
 8007618:	4770      	bx	lr
 800761a:	2000      	movs	r0, #0
 800761c:	4770      	bx	lr
 800761e:	2020      	movs	r0, #32
 8007620:	4770      	bx	lr
	...

08007624 <__i2b>:
 8007624:	b510      	push	{r4, lr}
 8007626:	460c      	mov	r4, r1
 8007628:	2101      	movs	r1, #1
 800762a:	f7ff febb 	bl	80073a4 <_Balloc>
 800762e:	4602      	mov	r2, r0
 8007630:	b928      	cbnz	r0, 800763e <__i2b+0x1a>
 8007632:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007636:	4b04      	ldr	r3, [pc, #16]	; (8007648 <__i2b+0x24>)
 8007638:	4804      	ldr	r0, [pc, #16]	; (800764c <__i2b+0x28>)
 800763a:	f000 fdef 	bl	800821c <__assert_func>
 800763e:	2301      	movs	r3, #1
 8007640:	6144      	str	r4, [r0, #20]
 8007642:	6103      	str	r3, [r0, #16]
 8007644:	bd10      	pop	{r4, pc}
 8007646:	bf00      	nop
 8007648:	08009770 	.word	0x08009770
 800764c:	080097fc 	.word	0x080097fc

08007650 <__multiply>:
 8007650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007654:	4691      	mov	r9, r2
 8007656:	690a      	ldr	r2, [r1, #16]
 8007658:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800765c:	460c      	mov	r4, r1
 800765e:	429a      	cmp	r2, r3
 8007660:	bfbe      	ittt	lt
 8007662:	460b      	movlt	r3, r1
 8007664:	464c      	movlt	r4, r9
 8007666:	4699      	movlt	r9, r3
 8007668:	6927      	ldr	r7, [r4, #16]
 800766a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800766e:	68a3      	ldr	r3, [r4, #8]
 8007670:	6861      	ldr	r1, [r4, #4]
 8007672:	eb07 060a 	add.w	r6, r7, sl
 8007676:	42b3      	cmp	r3, r6
 8007678:	b085      	sub	sp, #20
 800767a:	bfb8      	it	lt
 800767c:	3101      	addlt	r1, #1
 800767e:	f7ff fe91 	bl	80073a4 <_Balloc>
 8007682:	b930      	cbnz	r0, 8007692 <__multiply+0x42>
 8007684:	4602      	mov	r2, r0
 8007686:	f240 115d 	movw	r1, #349	; 0x15d
 800768a:	4b43      	ldr	r3, [pc, #268]	; (8007798 <__multiply+0x148>)
 800768c:	4843      	ldr	r0, [pc, #268]	; (800779c <__multiply+0x14c>)
 800768e:	f000 fdc5 	bl	800821c <__assert_func>
 8007692:	f100 0514 	add.w	r5, r0, #20
 8007696:	462b      	mov	r3, r5
 8007698:	2200      	movs	r2, #0
 800769a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800769e:	4543      	cmp	r3, r8
 80076a0:	d321      	bcc.n	80076e6 <__multiply+0x96>
 80076a2:	f104 0314 	add.w	r3, r4, #20
 80076a6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80076aa:	f109 0314 	add.w	r3, r9, #20
 80076ae:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80076b2:	9202      	str	r2, [sp, #8]
 80076b4:	1b3a      	subs	r2, r7, r4
 80076b6:	3a15      	subs	r2, #21
 80076b8:	f022 0203 	bic.w	r2, r2, #3
 80076bc:	3204      	adds	r2, #4
 80076be:	f104 0115 	add.w	r1, r4, #21
 80076c2:	428f      	cmp	r7, r1
 80076c4:	bf38      	it	cc
 80076c6:	2204      	movcc	r2, #4
 80076c8:	9201      	str	r2, [sp, #4]
 80076ca:	9a02      	ldr	r2, [sp, #8]
 80076cc:	9303      	str	r3, [sp, #12]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d80c      	bhi.n	80076ec <__multiply+0x9c>
 80076d2:	2e00      	cmp	r6, #0
 80076d4:	dd03      	ble.n	80076de <__multiply+0x8e>
 80076d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d059      	beq.n	8007792 <__multiply+0x142>
 80076de:	6106      	str	r6, [r0, #16]
 80076e0:	b005      	add	sp, #20
 80076e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e6:	f843 2b04 	str.w	r2, [r3], #4
 80076ea:	e7d8      	b.n	800769e <__multiply+0x4e>
 80076ec:	f8b3 a000 	ldrh.w	sl, [r3]
 80076f0:	f1ba 0f00 	cmp.w	sl, #0
 80076f4:	d023      	beq.n	800773e <__multiply+0xee>
 80076f6:	46a9      	mov	r9, r5
 80076f8:	f04f 0c00 	mov.w	ip, #0
 80076fc:	f104 0e14 	add.w	lr, r4, #20
 8007700:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007704:	f8d9 1000 	ldr.w	r1, [r9]
 8007708:	fa1f fb82 	uxth.w	fp, r2
 800770c:	b289      	uxth	r1, r1
 800770e:	fb0a 110b 	mla	r1, sl, fp, r1
 8007712:	4461      	add	r1, ip
 8007714:	f8d9 c000 	ldr.w	ip, [r9]
 8007718:	0c12      	lsrs	r2, r2, #16
 800771a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800771e:	fb0a c202 	mla	r2, sl, r2, ip
 8007722:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007726:	b289      	uxth	r1, r1
 8007728:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800772c:	4577      	cmp	r7, lr
 800772e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007732:	f849 1b04 	str.w	r1, [r9], #4
 8007736:	d8e3      	bhi.n	8007700 <__multiply+0xb0>
 8007738:	9a01      	ldr	r2, [sp, #4]
 800773a:	f845 c002 	str.w	ip, [r5, r2]
 800773e:	9a03      	ldr	r2, [sp, #12]
 8007740:	3304      	adds	r3, #4
 8007742:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007746:	f1b9 0f00 	cmp.w	r9, #0
 800774a:	d020      	beq.n	800778e <__multiply+0x13e>
 800774c:	46ae      	mov	lr, r5
 800774e:	f04f 0a00 	mov.w	sl, #0
 8007752:	6829      	ldr	r1, [r5, #0]
 8007754:	f104 0c14 	add.w	ip, r4, #20
 8007758:	f8bc b000 	ldrh.w	fp, [ip]
 800775c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007760:	b289      	uxth	r1, r1
 8007762:	fb09 220b 	mla	r2, r9, fp, r2
 8007766:	4492      	add	sl, r2
 8007768:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800776c:	f84e 1b04 	str.w	r1, [lr], #4
 8007770:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007774:	f8be 1000 	ldrh.w	r1, [lr]
 8007778:	0c12      	lsrs	r2, r2, #16
 800777a:	fb09 1102 	mla	r1, r9, r2, r1
 800777e:	4567      	cmp	r7, ip
 8007780:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007784:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007788:	d8e6      	bhi.n	8007758 <__multiply+0x108>
 800778a:	9a01      	ldr	r2, [sp, #4]
 800778c:	50a9      	str	r1, [r5, r2]
 800778e:	3504      	adds	r5, #4
 8007790:	e79b      	b.n	80076ca <__multiply+0x7a>
 8007792:	3e01      	subs	r6, #1
 8007794:	e79d      	b.n	80076d2 <__multiply+0x82>
 8007796:	bf00      	nop
 8007798:	08009770 	.word	0x08009770
 800779c:	080097fc 	.word	0x080097fc

080077a0 <__pow5mult>:
 80077a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077a4:	4615      	mov	r5, r2
 80077a6:	f012 0203 	ands.w	r2, r2, #3
 80077aa:	4606      	mov	r6, r0
 80077ac:	460f      	mov	r7, r1
 80077ae:	d007      	beq.n	80077c0 <__pow5mult+0x20>
 80077b0:	4c25      	ldr	r4, [pc, #148]	; (8007848 <__pow5mult+0xa8>)
 80077b2:	3a01      	subs	r2, #1
 80077b4:	2300      	movs	r3, #0
 80077b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077ba:	f7ff fe55 	bl	8007468 <__multadd>
 80077be:	4607      	mov	r7, r0
 80077c0:	10ad      	asrs	r5, r5, #2
 80077c2:	d03d      	beq.n	8007840 <__pow5mult+0xa0>
 80077c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80077c6:	b97c      	cbnz	r4, 80077e8 <__pow5mult+0x48>
 80077c8:	2010      	movs	r0, #16
 80077ca:	f7ff fdb5 	bl	8007338 <malloc>
 80077ce:	4602      	mov	r2, r0
 80077d0:	6270      	str	r0, [r6, #36]	; 0x24
 80077d2:	b928      	cbnz	r0, 80077e0 <__pow5mult+0x40>
 80077d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80077d8:	4b1c      	ldr	r3, [pc, #112]	; (800784c <__pow5mult+0xac>)
 80077da:	481d      	ldr	r0, [pc, #116]	; (8007850 <__pow5mult+0xb0>)
 80077dc:	f000 fd1e 	bl	800821c <__assert_func>
 80077e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077e4:	6004      	str	r4, [r0, #0]
 80077e6:	60c4      	str	r4, [r0, #12]
 80077e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80077ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077f0:	b94c      	cbnz	r4, 8007806 <__pow5mult+0x66>
 80077f2:	f240 2171 	movw	r1, #625	; 0x271
 80077f6:	4630      	mov	r0, r6
 80077f8:	f7ff ff14 	bl	8007624 <__i2b>
 80077fc:	2300      	movs	r3, #0
 80077fe:	4604      	mov	r4, r0
 8007800:	f8c8 0008 	str.w	r0, [r8, #8]
 8007804:	6003      	str	r3, [r0, #0]
 8007806:	f04f 0900 	mov.w	r9, #0
 800780a:	07eb      	lsls	r3, r5, #31
 800780c:	d50a      	bpl.n	8007824 <__pow5mult+0x84>
 800780e:	4639      	mov	r1, r7
 8007810:	4622      	mov	r2, r4
 8007812:	4630      	mov	r0, r6
 8007814:	f7ff ff1c 	bl	8007650 <__multiply>
 8007818:	4680      	mov	r8, r0
 800781a:	4639      	mov	r1, r7
 800781c:	4630      	mov	r0, r6
 800781e:	f7ff fe01 	bl	8007424 <_Bfree>
 8007822:	4647      	mov	r7, r8
 8007824:	106d      	asrs	r5, r5, #1
 8007826:	d00b      	beq.n	8007840 <__pow5mult+0xa0>
 8007828:	6820      	ldr	r0, [r4, #0]
 800782a:	b938      	cbnz	r0, 800783c <__pow5mult+0x9c>
 800782c:	4622      	mov	r2, r4
 800782e:	4621      	mov	r1, r4
 8007830:	4630      	mov	r0, r6
 8007832:	f7ff ff0d 	bl	8007650 <__multiply>
 8007836:	6020      	str	r0, [r4, #0]
 8007838:	f8c0 9000 	str.w	r9, [r0]
 800783c:	4604      	mov	r4, r0
 800783e:	e7e4      	b.n	800780a <__pow5mult+0x6a>
 8007840:	4638      	mov	r0, r7
 8007842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007846:	bf00      	nop
 8007848:	08009948 	.word	0x08009948
 800784c:	080096fe 	.word	0x080096fe
 8007850:	080097fc 	.word	0x080097fc

08007854 <__lshift>:
 8007854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007858:	460c      	mov	r4, r1
 800785a:	4607      	mov	r7, r0
 800785c:	4691      	mov	r9, r2
 800785e:	6923      	ldr	r3, [r4, #16]
 8007860:	6849      	ldr	r1, [r1, #4]
 8007862:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007866:	68a3      	ldr	r3, [r4, #8]
 8007868:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800786c:	f108 0601 	add.w	r6, r8, #1
 8007870:	42b3      	cmp	r3, r6
 8007872:	db0b      	blt.n	800788c <__lshift+0x38>
 8007874:	4638      	mov	r0, r7
 8007876:	f7ff fd95 	bl	80073a4 <_Balloc>
 800787a:	4605      	mov	r5, r0
 800787c:	b948      	cbnz	r0, 8007892 <__lshift+0x3e>
 800787e:	4602      	mov	r2, r0
 8007880:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007884:	4b29      	ldr	r3, [pc, #164]	; (800792c <__lshift+0xd8>)
 8007886:	482a      	ldr	r0, [pc, #168]	; (8007930 <__lshift+0xdc>)
 8007888:	f000 fcc8 	bl	800821c <__assert_func>
 800788c:	3101      	adds	r1, #1
 800788e:	005b      	lsls	r3, r3, #1
 8007890:	e7ee      	b.n	8007870 <__lshift+0x1c>
 8007892:	2300      	movs	r3, #0
 8007894:	f100 0114 	add.w	r1, r0, #20
 8007898:	f100 0210 	add.w	r2, r0, #16
 800789c:	4618      	mov	r0, r3
 800789e:	4553      	cmp	r3, sl
 80078a0:	db37      	blt.n	8007912 <__lshift+0xbe>
 80078a2:	6920      	ldr	r0, [r4, #16]
 80078a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078a8:	f104 0314 	add.w	r3, r4, #20
 80078ac:	f019 091f 	ands.w	r9, r9, #31
 80078b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80078b8:	d02f      	beq.n	800791a <__lshift+0xc6>
 80078ba:	468a      	mov	sl, r1
 80078bc:	f04f 0c00 	mov.w	ip, #0
 80078c0:	f1c9 0e20 	rsb	lr, r9, #32
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	fa02 f209 	lsl.w	r2, r2, r9
 80078ca:	ea42 020c 	orr.w	r2, r2, ip
 80078ce:	f84a 2b04 	str.w	r2, [sl], #4
 80078d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80078d6:	4298      	cmp	r0, r3
 80078d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80078dc:	d8f2      	bhi.n	80078c4 <__lshift+0x70>
 80078de:	1b03      	subs	r3, r0, r4
 80078e0:	3b15      	subs	r3, #21
 80078e2:	f023 0303 	bic.w	r3, r3, #3
 80078e6:	3304      	adds	r3, #4
 80078e8:	f104 0215 	add.w	r2, r4, #21
 80078ec:	4290      	cmp	r0, r2
 80078ee:	bf38      	it	cc
 80078f0:	2304      	movcc	r3, #4
 80078f2:	f841 c003 	str.w	ip, [r1, r3]
 80078f6:	f1bc 0f00 	cmp.w	ip, #0
 80078fa:	d001      	beq.n	8007900 <__lshift+0xac>
 80078fc:	f108 0602 	add.w	r6, r8, #2
 8007900:	3e01      	subs	r6, #1
 8007902:	4638      	mov	r0, r7
 8007904:	4621      	mov	r1, r4
 8007906:	612e      	str	r6, [r5, #16]
 8007908:	f7ff fd8c 	bl	8007424 <_Bfree>
 800790c:	4628      	mov	r0, r5
 800790e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007912:	f842 0f04 	str.w	r0, [r2, #4]!
 8007916:	3301      	adds	r3, #1
 8007918:	e7c1      	b.n	800789e <__lshift+0x4a>
 800791a:	3904      	subs	r1, #4
 800791c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007920:	4298      	cmp	r0, r3
 8007922:	f841 2f04 	str.w	r2, [r1, #4]!
 8007926:	d8f9      	bhi.n	800791c <__lshift+0xc8>
 8007928:	e7ea      	b.n	8007900 <__lshift+0xac>
 800792a:	bf00      	nop
 800792c:	08009770 	.word	0x08009770
 8007930:	080097fc 	.word	0x080097fc

08007934 <__mcmp>:
 8007934:	4603      	mov	r3, r0
 8007936:	690a      	ldr	r2, [r1, #16]
 8007938:	6900      	ldr	r0, [r0, #16]
 800793a:	b530      	push	{r4, r5, lr}
 800793c:	1a80      	subs	r0, r0, r2
 800793e:	d10d      	bne.n	800795c <__mcmp+0x28>
 8007940:	3314      	adds	r3, #20
 8007942:	3114      	adds	r1, #20
 8007944:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007948:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800794c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007950:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007954:	4295      	cmp	r5, r2
 8007956:	d002      	beq.n	800795e <__mcmp+0x2a>
 8007958:	d304      	bcc.n	8007964 <__mcmp+0x30>
 800795a:	2001      	movs	r0, #1
 800795c:	bd30      	pop	{r4, r5, pc}
 800795e:	42a3      	cmp	r3, r4
 8007960:	d3f4      	bcc.n	800794c <__mcmp+0x18>
 8007962:	e7fb      	b.n	800795c <__mcmp+0x28>
 8007964:	f04f 30ff 	mov.w	r0, #4294967295
 8007968:	e7f8      	b.n	800795c <__mcmp+0x28>
	...

0800796c <__mdiff>:
 800796c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007970:	460d      	mov	r5, r1
 8007972:	4607      	mov	r7, r0
 8007974:	4611      	mov	r1, r2
 8007976:	4628      	mov	r0, r5
 8007978:	4614      	mov	r4, r2
 800797a:	f7ff ffdb 	bl	8007934 <__mcmp>
 800797e:	1e06      	subs	r6, r0, #0
 8007980:	d111      	bne.n	80079a6 <__mdiff+0x3a>
 8007982:	4631      	mov	r1, r6
 8007984:	4638      	mov	r0, r7
 8007986:	f7ff fd0d 	bl	80073a4 <_Balloc>
 800798a:	4602      	mov	r2, r0
 800798c:	b928      	cbnz	r0, 800799a <__mdiff+0x2e>
 800798e:	f240 2132 	movw	r1, #562	; 0x232
 8007992:	4b3a      	ldr	r3, [pc, #232]	; (8007a7c <__mdiff+0x110>)
 8007994:	483a      	ldr	r0, [pc, #232]	; (8007a80 <__mdiff+0x114>)
 8007996:	f000 fc41 	bl	800821c <__assert_func>
 800799a:	2301      	movs	r3, #1
 800799c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80079a0:	4610      	mov	r0, r2
 80079a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a6:	bfa4      	itt	ge
 80079a8:	4623      	movge	r3, r4
 80079aa:	462c      	movge	r4, r5
 80079ac:	4638      	mov	r0, r7
 80079ae:	6861      	ldr	r1, [r4, #4]
 80079b0:	bfa6      	itte	ge
 80079b2:	461d      	movge	r5, r3
 80079b4:	2600      	movge	r6, #0
 80079b6:	2601      	movlt	r6, #1
 80079b8:	f7ff fcf4 	bl	80073a4 <_Balloc>
 80079bc:	4602      	mov	r2, r0
 80079be:	b918      	cbnz	r0, 80079c8 <__mdiff+0x5c>
 80079c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80079c4:	4b2d      	ldr	r3, [pc, #180]	; (8007a7c <__mdiff+0x110>)
 80079c6:	e7e5      	b.n	8007994 <__mdiff+0x28>
 80079c8:	f102 0814 	add.w	r8, r2, #20
 80079cc:	46c2      	mov	sl, r8
 80079ce:	f04f 0c00 	mov.w	ip, #0
 80079d2:	6927      	ldr	r7, [r4, #16]
 80079d4:	60c6      	str	r6, [r0, #12]
 80079d6:	692e      	ldr	r6, [r5, #16]
 80079d8:	f104 0014 	add.w	r0, r4, #20
 80079dc:	f105 0914 	add.w	r9, r5, #20
 80079e0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80079e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80079e8:	3410      	adds	r4, #16
 80079ea:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80079ee:	f859 3b04 	ldr.w	r3, [r9], #4
 80079f2:	fa1f f18b 	uxth.w	r1, fp
 80079f6:	448c      	add	ip, r1
 80079f8:	b299      	uxth	r1, r3
 80079fa:	0c1b      	lsrs	r3, r3, #16
 80079fc:	ebac 0101 	sub.w	r1, ip, r1
 8007a00:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a04:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007a08:	b289      	uxth	r1, r1
 8007a0a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007a0e:	454e      	cmp	r6, r9
 8007a10:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007a14:	f84a 3b04 	str.w	r3, [sl], #4
 8007a18:	d8e7      	bhi.n	80079ea <__mdiff+0x7e>
 8007a1a:	1b73      	subs	r3, r6, r5
 8007a1c:	3b15      	subs	r3, #21
 8007a1e:	f023 0303 	bic.w	r3, r3, #3
 8007a22:	3515      	adds	r5, #21
 8007a24:	3304      	adds	r3, #4
 8007a26:	42ae      	cmp	r6, r5
 8007a28:	bf38      	it	cc
 8007a2a:	2304      	movcc	r3, #4
 8007a2c:	4418      	add	r0, r3
 8007a2e:	4443      	add	r3, r8
 8007a30:	461e      	mov	r6, r3
 8007a32:	4605      	mov	r5, r0
 8007a34:	4575      	cmp	r5, lr
 8007a36:	d30e      	bcc.n	8007a56 <__mdiff+0xea>
 8007a38:	f10e 0103 	add.w	r1, lr, #3
 8007a3c:	1a09      	subs	r1, r1, r0
 8007a3e:	f021 0103 	bic.w	r1, r1, #3
 8007a42:	3803      	subs	r0, #3
 8007a44:	4586      	cmp	lr, r0
 8007a46:	bf38      	it	cc
 8007a48:	2100      	movcc	r1, #0
 8007a4a:	4419      	add	r1, r3
 8007a4c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007a50:	b18b      	cbz	r3, 8007a76 <__mdiff+0x10a>
 8007a52:	6117      	str	r7, [r2, #16]
 8007a54:	e7a4      	b.n	80079a0 <__mdiff+0x34>
 8007a56:	f855 8b04 	ldr.w	r8, [r5], #4
 8007a5a:	fa1f f188 	uxth.w	r1, r8
 8007a5e:	4461      	add	r1, ip
 8007a60:	140c      	asrs	r4, r1, #16
 8007a62:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a66:	b289      	uxth	r1, r1
 8007a68:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007a6c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007a70:	f846 1b04 	str.w	r1, [r6], #4
 8007a74:	e7de      	b.n	8007a34 <__mdiff+0xc8>
 8007a76:	3f01      	subs	r7, #1
 8007a78:	e7e8      	b.n	8007a4c <__mdiff+0xe0>
 8007a7a:	bf00      	nop
 8007a7c:	08009770 	.word	0x08009770
 8007a80:	080097fc 	.word	0x080097fc

08007a84 <__ulp>:
 8007a84:	4b11      	ldr	r3, [pc, #68]	; (8007acc <__ulp+0x48>)
 8007a86:	400b      	ands	r3, r1
 8007a88:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	dd02      	ble.n	8007a96 <__ulp+0x12>
 8007a90:	2000      	movs	r0, #0
 8007a92:	4619      	mov	r1, r3
 8007a94:	4770      	bx	lr
 8007a96:	425b      	negs	r3, r3
 8007a98:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007a9c:	f04f 0000 	mov.w	r0, #0
 8007aa0:	f04f 0100 	mov.w	r1, #0
 8007aa4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007aa8:	da04      	bge.n	8007ab4 <__ulp+0x30>
 8007aaa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007aae:	fa43 f102 	asr.w	r1, r3, r2
 8007ab2:	4770      	bx	lr
 8007ab4:	f1a2 0314 	sub.w	r3, r2, #20
 8007ab8:	2b1e      	cmp	r3, #30
 8007aba:	bfd6      	itet	le
 8007abc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007ac0:	2301      	movgt	r3, #1
 8007ac2:	fa22 f303 	lsrle.w	r3, r2, r3
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	7ff00000 	.word	0x7ff00000

08007ad0 <__b2d>:
 8007ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ad4:	6907      	ldr	r7, [r0, #16]
 8007ad6:	f100 0914 	add.w	r9, r0, #20
 8007ada:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007ade:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007ae2:	f1a7 0804 	sub.w	r8, r7, #4
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	f7ff fd4e 	bl	8007588 <__hi0bits>
 8007aec:	f1c0 0320 	rsb	r3, r0, #32
 8007af0:	280a      	cmp	r0, #10
 8007af2:	600b      	str	r3, [r1, #0]
 8007af4:	491f      	ldr	r1, [pc, #124]	; (8007b74 <__b2d+0xa4>)
 8007af6:	dc17      	bgt.n	8007b28 <__b2d+0x58>
 8007af8:	45c1      	cmp	r9, r8
 8007afa:	bf28      	it	cs
 8007afc:	2200      	movcs	r2, #0
 8007afe:	f1c0 0c0b 	rsb	ip, r0, #11
 8007b02:	fa26 f30c 	lsr.w	r3, r6, ip
 8007b06:	bf38      	it	cc
 8007b08:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007b0c:	ea43 0501 	orr.w	r5, r3, r1
 8007b10:	f100 0315 	add.w	r3, r0, #21
 8007b14:	fa06 f303 	lsl.w	r3, r6, r3
 8007b18:	fa22 f20c 	lsr.w	r2, r2, ip
 8007b1c:	ea43 0402 	orr.w	r4, r3, r2
 8007b20:	4620      	mov	r0, r4
 8007b22:	4629      	mov	r1, r5
 8007b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b28:	45c1      	cmp	r9, r8
 8007b2a:	bf2e      	itee	cs
 8007b2c:	2200      	movcs	r2, #0
 8007b2e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007b32:	f1a7 0808 	subcc.w	r8, r7, #8
 8007b36:	f1b0 030b 	subs.w	r3, r0, #11
 8007b3a:	d016      	beq.n	8007b6a <__b2d+0x9a>
 8007b3c:	f1c3 0720 	rsb	r7, r3, #32
 8007b40:	fa22 f107 	lsr.w	r1, r2, r7
 8007b44:	45c8      	cmp	r8, r9
 8007b46:	fa06 f603 	lsl.w	r6, r6, r3
 8007b4a:	ea46 0601 	orr.w	r6, r6, r1
 8007b4e:	bf94      	ite	ls
 8007b50:	2100      	movls	r1, #0
 8007b52:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007b56:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007b5a:	fa02 f003 	lsl.w	r0, r2, r3
 8007b5e:	40f9      	lsrs	r1, r7
 8007b60:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007b64:	ea40 0401 	orr.w	r4, r0, r1
 8007b68:	e7da      	b.n	8007b20 <__b2d+0x50>
 8007b6a:	4614      	mov	r4, r2
 8007b6c:	ea46 0501 	orr.w	r5, r6, r1
 8007b70:	e7d6      	b.n	8007b20 <__b2d+0x50>
 8007b72:	bf00      	nop
 8007b74:	3ff00000 	.word	0x3ff00000

08007b78 <__d2b>:
 8007b78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007b7c:	2101      	movs	r1, #1
 8007b7e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007b82:	4690      	mov	r8, r2
 8007b84:	461d      	mov	r5, r3
 8007b86:	f7ff fc0d 	bl	80073a4 <_Balloc>
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	b930      	cbnz	r0, 8007b9c <__d2b+0x24>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	f240 310a 	movw	r1, #778	; 0x30a
 8007b94:	4b24      	ldr	r3, [pc, #144]	; (8007c28 <__d2b+0xb0>)
 8007b96:	4825      	ldr	r0, [pc, #148]	; (8007c2c <__d2b+0xb4>)
 8007b98:	f000 fb40 	bl	800821c <__assert_func>
 8007b9c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007ba0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007ba4:	bb2d      	cbnz	r5, 8007bf2 <__d2b+0x7a>
 8007ba6:	9301      	str	r3, [sp, #4]
 8007ba8:	f1b8 0300 	subs.w	r3, r8, #0
 8007bac:	d026      	beq.n	8007bfc <__d2b+0x84>
 8007bae:	4668      	mov	r0, sp
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	f7ff fd09 	bl	80075c8 <__lo0bits>
 8007bb6:	9900      	ldr	r1, [sp, #0]
 8007bb8:	b1f0      	cbz	r0, 8007bf8 <__d2b+0x80>
 8007bba:	9a01      	ldr	r2, [sp, #4]
 8007bbc:	f1c0 0320 	rsb	r3, r0, #32
 8007bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc4:	430b      	orrs	r3, r1
 8007bc6:	40c2      	lsrs	r2, r0
 8007bc8:	6163      	str	r3, [r4, #20]
 8007bca:	9201      	str	r2, [sp, #4]
 8007bcc:	9b01      	ldr	r3, [sp, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	bf14      	ite	ne
 8007bd2:	2102      	movne	r1, #2
 8007bd4:	2101      	moveq	r1, #1
 8007bd6:	61a3      	str	r3, [r4, #24]
 8007bd8:	6121      	str	r1, [r4, #16]
 8007bda:	b1c5      	cbz	r5, 8007c0e <__d2b+0x96>
 8007bdc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007be0:	4405      	add	r5, r0
 8007be2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007be6:	603d      	str	r5, [r7, #0]
 8007be8:	6030      	str	r0, [r6, #0]
 8007bea:	4620      	mov	r0, r4
 8007bec:	b002      	add	sp, #8
 8007bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bf6:	e7d6      	b.n	8007ba6 <__d2b+0x2e>
 8007bf8:	6161      	str	r1, [r4, #20]
 8007bfa:	e7e7      	b.n	8007bcc <__d2b+0x54>
 8007bfc:	a801      	add	r0, sp, #4
 8007bfe:	f7ff fce3 	bl	80075c8 <__lo0bits>
 8007c02:	2101      	movs	r1, #1
 8007c04:	9b01      	ldr	r3, [sp, #4]
 8007c06:	6121      	str	r1, [r4, #16]
 8007c08:	6163      	str	r3, [r4, #20]
 8007c0a:	3020      	adds	r0, #32
 8007c0c:	e7e5      	b.n	8007bda <__d2b+0x62>
 8007c0e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007c12:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c16:	6038      	str	r0, [r7, #0]
 8007c18:	6918      	ldr	r0, [r3, #16]
 8007c1a:	f7ff fcb5 	bl	8007588 <__hi0bits>
 8007c1e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007c22:	6031      	str	r1, [r6, #0]
 8007c24:	e7e1      	b.n	8007bea <__d2b+0x72>
 8007c26:	bf00      	nop
 8007c28:	08009770 	.word	0x08009770
 8007c2c:	080097fc 	.word	0x080097fc

08007c30 <__ratio>:
 8007c30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c34:	4688      	mov	r8, r1
 8007c36:	4669      	mov	r1, sp
 8007c38:	4681      	mov	r9, r0
 8007c3a:	f7ff ff49 	bl	8007ad0 <__b2d>
 8007c3e:	460f      	mov	r7, r1
 8007c40:	4604      	mov	r4, r0
 8007c42:	460d      	mov	r5, r1
 8007c44:	4640      	mov	r0, r8
 8007c46:	a901      	add	r1, sp, #4
 8007c48:	f7ff ff42 	bl	8007ad0 <__b2d>
 8007c4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c50:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007c54:	468b      	mov	fp, r1
 8007c56:	eba3 0c02 	sub.w	ip, r3, r2
 8007c5a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007c5e:	1a9b      	subs	r3, r3, r2
 8007c60:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	bfd5      	itete	le
 8007c68:	460a      	movle	r2, r1
 8007c6a:	462a      	movgt	r2, r5
 8007c6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007c70:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007c74:	bfd8      	it	le
 8007c76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007c7a:	465b      	mov	r3, fp
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	4639      	mov	r1, r7
 8007c80:	4620      	mov	r0, r4
 8007c82:	f7f8 fd53 	bl	800072c <__aeabi_ddiv>
 8007c86:	b003      	add	sp, #12
 8007c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c8c <__copybits>:
 8007c8c:	3901      	subs	r1, #1
 8007c8e:	b570      	push	{r4, r5, r6, lr}
 8007c90:	1149      	asrs	r1, r1, #5
 8007c92:	6914      	ldr	r4, [r2, #16]
 8007c94:	3101      	adds	r1, #1
 8007c96:	f102 0314 	add.w	r3, r2, #20
 8007c9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007c9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007ca2:	1f05      	subs	r5, r0, #4
 8007ca4:	42a3      	cmp	r3, r4
 8007ca6:	d30c      	bcc.n	8007cc2 <__copybits+0x36>
 8007ca8:	1aa3      	subs	r3, r4, r2
 8007caa:	3b11      	subs	r3, #17
 8007cac:	f023 0303 	bic.w	r3, r3, #3
 8007cb0:	3211      	adds	r2, #17
 8007cb2:	42a2      	cmp	r2, r4
 8007cb4:	bf88      	it	hi
 8007cb6:	2300      	movhi	r3, #0
 8007cb8:	4418      	add	r0, r3
 8007cba:	2300      	movs	r3, #0
 8007cbc:	4288      	cmp	r0, r1
 8007cbe:	d305      	bcc.n	8007ccc <__copybits+0x40>
 8007cc0:	bd70      	pop	{r4, r5, r6, pc}
 8007cc2:	f853 6b04 	ldr.w	r6, [r3], #4
 8007cc6:	f845 6f04 	str.w	r6, [r5, #4]!
 8007cca:	e7eb      	b.n	8007ca4 <__copybits+0x18>
 8007ccc:	f840 3b04 	str.w	r3, [r0], #4
 8007cd0:	e7f4      	b.n	8007cbc <__copybits+0x30>

08007cd2 <__any_on>:
 8007cd2:	f100 0214 	add.w	r2, r0, #20
 8007cd6:	6900      	ldr	r0, [r0, #16]
 8007cd8:	114b      	asrs	r3, r1, #5
 8007cda:	4298      	cmp	r0, r3
 8007cdc:	b510      	push	{r4, lr}
 8007cde:	db11      	blt.n	8007d04 <__any_on+0x32>
 8007ce0:	dd0a      	ble.n	8007cf8 <__any_on+0x26>
 8007ce2:	f011 011f 	ands.w	r1, r1, #31
 8007ce6:	d007      	beq.n	8007cf8 <__any_on+0x26>
 8007ce8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007cec:	fa24 f001 	lsr.w	r0, r4, r1
 8007cf0:	fa00 f101 	lsl.w	r1, r0, r1
 8007cf4:	428c      	cmp	r4, r1
 8007cf6:	d10b      	bne.n	8007d10 <__any_on+0x3e>
 8007cf8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d803      	bhi.n	8007d08 <__any_on+0x36>
 8007d00:	2000      	movs	r0, #0
 8007d02:	bd10      	pop	{r4, pc}
 8007d04:	4603      	mov	r3, r0
 8007d06:	e7f7      	b.n	8007cf8 <__any_on+0x26>
 8007d08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d0c:	2900      	cmp	r1, #0
 8007d0e:	d0f5      	beq.n	8007cfc <__any_on+0x2a>
 8007d10:	2001      	movs	r0, #1
 8007d12:	e7f6      	b.n	8007d02 <__any_on+0x30>

08007d14 <_calloc_r>:
 8007d14:	b570      	push	{r4, r5, r6, lr}
 8007d16:	fba1 5402 	umull	r5, r4, r1, r2
 8007d1a:	b934      	cbnz	r4, 8007d2a <_calloc_r+0x16>
 8007d1c:	4629      	mov	r1, r5
 8007d1e:	f000 f875 	bl	8007e0c <_malloc_r>
 8007d22:	4606      	mov	r6, r0
 8007d24:	b928      	cbnz	r0, 8007d32 <_calloc_r+0x1e>
 8007d26:	4630      	mov	r0, r6
 8007d28:	bd70      	pop	{r4, r5, r6, pc}
 8007d2a:	220c      	movs	r2, #12
 8007d2c:	2600      	movs	r6, #0
 8007d2e:	6002      	str	r2, [r0, #0]
 8007d30:	e7f9      	b.n	8007d26 <_calloc_r+0x12>
 8007d32:	462a      	mov	r2, r5
 8007d34:	4621      	mov	r1, r4
 8007d36:	f7fc fbf3 	bl	8004520 <memset>
 8007d3a:	e7f4      	b.n	8007d26 <_calloc_r+0x12>

08007d3c <_free_r>:
 8007d3c:	b538      	push	{r3, r4, r5, lr}
 8007d3e:	4605      	mov	r5, r0
 8007d40:	2900      	cmp	r1, #0
 8007d42:	d040      	beq.n	8007dc6 <_free_r+0x8a>
 8007d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d48:	1f0c      	subs	r4, r1, #4
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	bfb8      	it	lt
 8007d4e:	18e4      	addlt	r4, r4, r3
 8007d50:	f000 faae 	bl	80082b0 <__malloc_lock>
 8007d54:	4a1c      	ldr	r2, [pc, #112]	; (8007dc8 <_free_r+0x8c>)
 8007d56:	6813      	ldr	r3, [r2, #0]
 8007d58:	b933      	cbnz	r3, 8007d68 <_free_r+0x2c>
 8007d5a:	6063      	str	r3, [r4, #4]
 8007d5c:	6014      	str	r4, [r2, #0]
 8007d5e:	4628      	mov	r0, r5
 8007d60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d64:	f000 baaa 	b.w	80082bc <__malloc_unlock>
 8007d68:	42a3      	cmp	r3, r4
 8007d6a:	d908      	bls.n	8007d7e <_free_r+0x42>
 8007d6c:	6820      	ldr	r0, [r4, #0]
 8007d6e:	1821      	adds	r1, r4, r0
 8007d70:	428b      	cmp	r3, r1
 8007d72:	bf01      	itttt	eq
 8007d74:	6819      	ldreq	r1, [r3, #0]
 8007d76:	685b      	ldreq	r3, [r3, #4]
 8007d78:	1809      	addeq	r1, r1, r0
 8007d7a:	6021      	streq	r1, [r4, #0]
 8007d7c:	e7ed      	b.n	8007d5a <_free_r+0x1e>
 8007d7e:	461a      	mov	r2, r3
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	b10b      	cbz	r3, 8007d88 <_free_r+0x4c>
 8007d84:	42a3      	cmp	r3, r4
 8007d86:	d9fa      	bls.n	8007d7e <_free_r+0x42>
 8007d88:	6811      	ldr	r1, [r2, #0]
 8007d8a:	1850      	adds	r0, r2, r1
 8007d8c:	42a0      	cmp	r0, r4
 8007d8e:	d10b      	bne.n	8007da8 <_free_r+0x6c>
 8007d90:	6820      	ldr	r0, [r4, #0]
 8007d92:	4401      	add	r1, r0
 8007d94:	1850      	adds	r0, r2, r1
 8007d96:	4283      	cmp	r3, r0
 8007d98:	6011      	str	r1, [r2, #0]
 8007d9a:	d1e0      	bne.n	8007d5e <_free_r+0x22>
 8007d9c:	6818      	ldr	r0, [r3, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	4401      	add	r1, r0
 8007da2:	6011      	str	r1, [r2, #0]
 8007da4:	6053      	str	r3, [r2, #4]
 8007da6:	e7da      	b.n	8007d5e <_free_r+0x22>
 8007da8:	d902      	bls.n	8007db0 <_free_r+0x74>
 8007daa:	230c      	movs	r3, #12
 8007dac:	602b      	str	r3, [r5, #0]
 8007dae:	e7d6      	b.n	8007d5e <_free_r+0x22>
 8007db0:	6820      	ldr	r0, [r4, #0]
 8007db2:	1821      	adds	r1, r4, r0
 8007db4:	428b      	cmp	r3, r1
 8007db6:	bf01      	itttt	eq
 8007db8:	6819      	ldreq	r1, [r3, #0]
 8007dba:	685b      	ldreq	r3, [r3, #4]
 8007dbc:	1809      	addeq	r1, r1, r0
 8007dbe:	6021      	streq	r1, [r4, #0]
 8007dc0:	6063      	str	r3, [r4, #4]
 8007dc2:	6054      	str	r4, [r2, #4]
 8007dc4:	e7cb      	b.n	8007d5e <_free_r+0x22>
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}
 8007dc8:	20000710 	.word	0x20000710

08007dcc <sbrk_aligned>:
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	4e0e      	ldr	r6, [pc, #56]	; (8007e08 <sbrk_aligned+0x3c>)
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	6831      	ldr	r1, [r6, #0]
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	b911      	cbnz	r1, 8007dde <sbrk_aligned+0x12>
 8007dd8:	f000 f9ee 	bl	80081b8 <_sbrk_r>
 8007ddc:	6030      	str	r0, [r6, #0]
 8007dde:	4621      	mov	r1, r4
 8007de0:	4628      	mov	r0, r5
 8007de2:	f000 f9e9 	bl	80081b8 <_sbrk_r>
 8007de6:	1c43      	adds	r3, r0, #1
 8007de8:	d00a      	beq.n	8007e00 <sbrk_aligned+0x34>
 8007dea:	1cc4      	adds	r4, r0, #3
 8007dec:	f024 0403 	bic.w	r4, r4, #3
 8007df0:	42a0      	cmp	r0, r4
 8007df2:	d007      	beq.n	8007e04 <sbrk_aligned+0x38>
 8007df4:	1a21      	subs	r1, r4, r0
 8007df6:	4628      	mov	r0, r5
 8007df8:	f000 f9de 	bl	80081b8 <_sbrk_r>
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	d101      	bne.n	8007e04 <sbrk_aligned+0x38>
 8007e00:	f04f 34ff 	mov.w	r4, #4294967295
 8007e04:	4620      	mov	r0, r4
 8007e06:	bd70      	pop	{r4, r5, r6, pc}
 8007e08:	20000714 	.word	0x20000714

08007e0c <_malloc_r>:
 8007e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e10:	1ccd      	adds	r5, r1, #3
 8007e12:	f025 0503 	bic.w	r5, r5, #3
 8007e16:	3508      	adds	r5, #8
 8007e18:	2d0c      	cmp	r5, #12
 8007e1a:	bf38      	it	cc
 8007e1c:	250c      	movcc	r5, #12
 8007e1e:	2d00      	cmp	r5, #0
 8007e20:	4607      	mov	r7, r0
 8007e22:	db01      	blt.n	8007e28 <_malloc_r+0x1c>
 8007e24:	42a9      	cmp	r1, r5
 8007e26:	d905      	bls.n	8007e34 <_malloc_r+0x28>
 8007e28:	230c      	movs	r3, #12
 8007e2a:	2600      	movs	r6, #0
 8007e2c:	603b      	str	r3, [r7, #0]
 8007e2e:	4630      	mov	r0, r6
 8007e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e34:	4e2e      	ldr	r6, [pc, #184]	; (8007ef0 <_malloc_r+0xe4>)
 8007e36:	f000 fa3b 	bl	80082b0 <__malloc_lock>
 8007e3a:	6833      	ldr	r3, [r6, #0]
 8007e3c:	461c      	mov	r4, r3
 8007e3e:	bb34      	cbnz	r4, 8007e8e <_malloc_r+0x82>
 8007e40:	4629      	mov	r1, r5
 8007e42:	4638      	mov	r0, r7
 8007e44:	f7ff ffc2 	bl	8007dcc <sbrk_aligned>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	d14d      	bne.n	8007eea <_malloc_r+0xde>
 8007e4e:	6834      	ldr	r4, [r6, #0]
 8007e50:	4626      	mov	r6, r4
 8007e52:	2e00      	cmp	r6, #0
 8007e54:	d140      	bne.n	8007ed8 <_malloc_r+0xcc>
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	4631      	mov	r1, r6
 8007e5a:	4638      	mov	r0, r7
 8007e5c:	eb04 0803 	add.w	r8, r4, r3
 8007e60:	f000 f9aa 	bl	80081b8 <_sbrk_r>
 8007e64:	4580      	cmp	r8, r0
 8007e66:	d13a      	bne.n	8007ede <_malloc_r+0xd2>
 8007e68:	6821      	ldr	r1, [r4, #0]
 8007e6a:	3503      	adds	r5, #3
 8007e6c:	1a6d      	subs	r5, r5, r1
 8007e6e:	f025 0503 	bic.w	r5, r5, #3
 8007e72:	3508      	adds	r5, #8
 8007e74:	2d0c      	cmp	r5, #12
 8007e76:	bf38      	it	cc
 8007e78:	250c      	movcc	r5, #12
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	f7ff ffa5 	bl	8007dcc <sbrk_aligned>
 8007e82:	3001      	adds	r0, #1
 8007e84:	d02b      	beq.n	8007ede <_malloc_r+0xd2>
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	442b      	add	r3, r5
 8007e8a:	6023      	str	r3, [r4, #0]
 8007e8c:	e00e      	b.n	8007eac <_malloc_r+0xa0>
 8007e8e:	6822      	ldr	r2, [r4, #0]
 8007e90:	1b52      	subs	r2, r2, r5
 8007e92:	d41e      	bmi.n	8007ed2 <_malloc_r+0xc6>
 8007e94:	2a0b      	cmp	r2, #11
 8007e96:	d916      	bls.n	8007ec6 <_malloc_r+0xba>
 8007e98:	1961      	adds	r1, r4, r5
 8007e9a:	42a3      	cmp	r3, r4
 8007e9c:	6025      	str	r5, [r4, #0]
 8007e9e:	bf18      	it	ne
 8007ea0:	6059      	strne	r1, [r3, #4]
 8007ea2:	6863      	ldr	r3, [r4, #4]
 8007ea4:	bf08      	it	eq
 8007ea6:	6031      	streq	r1, [r6, #0]
 8007ea8:	5162      	str	r2, [r4, r5]
 8007eaa:	604b      	str	r3, [r1, #4]
 8007eac:	4638      	mov	r0, r7
 8007eae:	f104 060b 	add.w	r6, r4, #11
 8007eb2:	f000 fa03 	bl	80082bc <__malloc_unlock>
 8007eb6:	f026 0607 	bic.w	r6, r6, #7
 8007eba:	1d23      	adds	r3, r4, #4
 8007ebc:	1af2      	subs	r2, r6, r3
 8007ebe:	d0b6      	beq.n	8007e2e <_malloc_r+0x22>
 8007ec0:	1b9b      	subs	r3, r3, r6
 8007ec2:	50a3      	str	r3, [r4, r2]
 8007ec4:	e7b3      	b.n	8007e2e <_malloc_r+0x22>
 8007ec6:	6862      	ldr	r2, [r4, #4]
 8007ec8:	42a3      	cmp	r3, r4
 8007eca:	bf0c      	ite	eq
 8007ecc:	6032      	streq	r2, [r6, #0]
 8007ece:	605a      	strne	r2, [r3, #4]
 8007ed0:	e7ec      	b.n	8007eac <_malloc_r+0xa0>
 8007ed2:	4623      	mov	r3, r4
 8007ed4:	6864      	ldr	r4, [r4, #4]
 8007ed6:	e7b2      	b.n	8007e3e <_malloc_r+0x32>
 8007ed8:	4634      	mov	r4, r6
 8007eda:	6876      	ldr	r6, [r6, #4]
 8007edc:	e7b9      	b.n	8007e52 <_malloc_r+0x46>
 8007ede:	230c      	movs	r3, #12
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	603b      	str	r3, [r7, #0]
 8007ee4:	f000 f9ea 	bl	80082bc <__malloc_unlock>
 8007ee8:	e7a1      	b.n	8007e2e <_malloc_r+0x22>
 8007eea:	6025      	str	r5, [r4, #0]
 8007eec:	e7de      	b.n	8007eac <_malloc_r+0xa0>
 8007eee:	bf00      	nop
 8007ef0:	20000710 	.word	0x20000710

08007ef4 <__ssputs_r>:
 8007ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef8:	688e      	ldr	r6, [r1, #8]
 8007efa:	4682      	mov	sl, r0
 8007efc:	429e      	cmp	r6, r3
 8007efe:	460c      	mov	r4, r1
 8007f00:	4690      	mov	r8, r2
 8007f02:	461f      	mov	r7, r3
 8007f04:	d838      	bhi.n	8007f78 <__ssputs_r+0x84>
 8007f06:	898a      	ldrh	r2, [r1, #12]
 8007f08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f0c:	d032      	beq.n	8007f74 <__ssputs_r+0x80>
 8007f0e:	6825      	ldr	r5, [r4, #0]
 8007f10:	6909      	ldr	r1, [r1, #16]
 8007f12:	3301      	adds	r3, #1
 8007f14:	eba5 0901 	sub.w	r9, r5, r1
 8007f18:	6965      	ldr	r5, [r4, #20]
 8007f1a:	444b      	add	r3, r9
 8007f1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f24:	106d      	asrs	r5, r5, #1
 8007f26:	429d      	cmp	r5, r3
 8007f28:	bf38      	it	cc
 8007f2a:	461d      	movcc	r5, r3
 8007f2c:	0553      	lsls	r3, r2, #21
 8007f2e:	d531      	bpl.n	8007f94 <__ssputs_r+0xa0>
 8007f30:	4629      	mov	r1, r5
 8007f32:	f7ff ff6b 	bl	8007e0c <_malloc_r>
 8007f36:	4606      	mov	r6, r0
 8007f38:	b950      	cbnz	r0, 8007f50 <__ssputs_r+0x5c>
 8007f3a:	230c      	movs	r3, #12
 8007f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f40:	f8ca 3000 	str.w	r3, [sl]
 8007f44:	89a3      	ldrh	r3, [r4, #12]
 8007f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f4a:	81a3      	strh	r3, [r4, #12]
 8007f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f50:	464a      	mov	r2, r9
 8007f52:	6921      	ldr	r1, [r4, #16]
 8007f54:	f7ff fa18 	bl	8007388 <memcpy>
 8007f58:	89a3      	ldrh	r3, [r4, #12]
 8007f5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f62:	81a3      	strh	r3, [r4, #12]
 8007f64:	6126      	str	r6, [r4, #16]
 8007f66:	444e      	add	r6, r9
 8007f68:	6026      	str	r6, [r4, #0]
 8007f6a:	463e      	mov	r6, r7
 8007f6c:	6165      	str	r5, [r4, #20]
 8007f6e:	eba5 0509 	sub.w	r5, r5, r9
 8007f72:	60a5      	str	r5, [r4, #8]
 8007f74:	42be      	cmp	r6, r7
 8007f76:	d900      	bls.n	8007f7a <__ssputs_r+0x86>
 8007f78:	463e      	mov	r6, r7
 8007f7a:	4632      	mov	r2, r6
 8007f7c:	4641      	mov	r1, r8
 8007f7e:	6820      	ldr	r0, [r4, #0]
 8007f80:	f000 f97c 	bl	800827c <memmove>
 8007f84:	68a3      	ldr	r3, [r4, #8]
 8007f86:	2000      	movs	r0, #0
 8007f88:	1b9b      	subs	r3, r3, r6
 8007f8a:	60a3      	str	r3, [r4, #8]
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	4433      	add	r3, r6
 8007f90:	6023      	str	r3, [r4, #0]
 8007f92:	e7db      	b.n	8007f4c <__ssputs_r+0x58>
 8007f94:	462a      	mov	r2, r5
 8007f96:	f000 f997 	bl	80082c8 <_realloc_r>
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d1e1      	bne.n	8007f64 <__ssputs_r+0x70>
 8007fa0:	4650      	mov	r0, sl
 8007fa2:	6921      	ldr	r1, [r4, #16]
 8007fa4:	f7ff feca 	bl	8007d3c <_free_r>
 8007fa8:	e7c7      	b.n	8007f3a <__ssputs_r+0x46>
	...

08007fac <_svfiprintf_r>:
 8007fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb0:	4698      	mov	r8, r3
 8007fb2:	898b      	ldrh	r3, [r1, #12]
 8007fb4:	4607      	mov	r7, r0
 8007fb6:	061b      	lsls	r3, r3, #24
 8007fb8:	460d      	mov	r5, r1
 8007fba:	4614      	mov	r4, r2
 8007fbc:	b09d      	sub	sp, #116	; 0x74
 8007fbe:	d50e      	bpl.n	8007fde <_svfiprintf_r+0x32>
 8007fc0:	690b      	ldr	r3, [r1, #16]
 8007fc2:	b963      	cbnz	r3, 8007fde <_svfiprintf_r+0x32>
 8007fc4:	2140      	movs	r1, #64	; 0x40
 8007fc6:	f7ff ff21 	bl	8007e0c <_malloc_r>
 8007fca:	6028      	str	r0, [r5, #0]
 8007fcc:	6128      	str	r0, [r5, #16]
 8007fce:	b920      	cbnz	r0, 8007fda <_svfiprintf_r+0x2e>
 8007fd0:	230c      	movs	r3, #12
 8007fd2:	603b      	str	r3, [r7, #0]
 8007fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd8:	e0d1      	b.n	800817e <_svfiprintf_r+0x1d2>
 8007fda:	2340      	movs	r3, #64	; 0x40
 8007fdc:	616b      	str	r3, [r5, #20]
 8007fde:	2300      	movs	r3, #0
 8007fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe2:	2320      	movs	r3, #32
 8007fe4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fe8:	2330      	movs	r3, #48	; 0x30
 8007fea:	f04f 0901 	mov.w	r9, #1
 8007fee:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ff2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008198 <_svfiprintf_r+0x1ec>
 8007ff6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ffa:	4623      	mov	r3, r4
 8007ffc:	469a      	mov	sl, r3
 8007ffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008002:	b10a      	cbz	r2, 8008008 <_svfiprintf_r+0x5c>
 8008004:	2a25      	cmp	r2, #37	; 0x25
 8008006:	d1f9      	bne.n	8007ffc <_svfiprintf_r+0x50>
 8008008:	ebba 0b04 	subs.w	fp, sl, r4
 800800c:	d00b      	beq.n	8008026 <_svfiprintf_r+0x7a>
 800800e:	465b      	mov	r3, fp
 8008010:	4622      	mov	r2, r4
 8008012:	4629      	mov	r1, r5
 8008014:	4638      	mov	r0, r7
 8008016:	f7ff ff6d 	bl	8007ef4 <__ssputs_r>
 800801a:	3001      	adds	r0, #1
 800801c:	f000 80aa 	beq.w	8008174 <_svfiprintf_r+0x1c8>
 8008020:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008022:	445a      	add	r2, fp
 8008024:	9209      	str	r2, [sp, #36]	; 0x24
 8008026:	f89a 3000 	ldrb.w	r3, [sl]
 800802a:	2b00      	cmp	r3, #0
 800802c:	f000 80a2 	beq.w	8008174 <_svfiprintf_r+0x1c8>
 8008030:	2300      	movs	r3, #0
 8008032:	f04f 32ff 	mov.w	r2, #4294967295
 8008036:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800803a:	f10a 0a01 	add.w	sl, sl, #1
 800803e:	9304      	str	r3, [sp, #16]
 8008040:	9307      	str	r3, [sp, #28]
 8008042:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008046:	931a      	str	r3, [sp, #104]	; 0x68
 8008048:	4654      	mov	r4, sl
 800804a:	2205      	movs	r2, #5
 800804c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008050:	4851      	ldr	r0, [pc, #324]	; (8008198 <_svfiprintf_r+0x1ec>)
 8008052:	f7ff f98b 	bl	800736c <memchr>
 8008056:	9a04      	ldr	r2, [sp, #16]
 8008058:	b9d8      	cbnz	r0, 8008092 <_svfiprintf_r+0xe6>
 800805a:	06d0      	lsls	r0, r2, #27
 800805c:	bf44      	itt	mi
 800805e:	2320      	movmi	r3, #32
 8008060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008064:	0711      	lsls	r1, r2, #28
 8008066:	bf44      	itt	mi
 8008068:	232b      	movmi	r3, #43	; 0x2b
 800806a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800806e:	f89a 3000 	ldrb.w	r3, [sl]
 8008072:	2b2a      	cmp	r3, #42	; 0x2a
 8008074:	d015      	beq.n	80080a2 <_svfiprintf_r+0xf6>
 8008076:	4654      	mov	r4, sl
 8008078:	2000      	movs	r0, #0
 800807a:	f04f 0c0a 	mov.w	ip, #10
 800807e:	9a07      	ldr	r2, [sp, #28]
 8008080:	4621      	mov	r1, r4
 8008082:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008086:	3b30      	subs	r3, #48	; 0x30
 8008088:	2b09      	cmp	r3, #9
 800808a:	d94e      	bls.n	800812a <_svfiprintf_r+0x17e>
 800808c:	b1b0      	cbz	r0, 80080bc <_svfiprintf_r+0x110>
 800808e:	9207      	str	r2, [sp, #28]
 8008090:	e014      	b.n	80080bc <_svfiprintf_r+0x110>
 8008092:	eba0 0308 	sub.w	r3, r0, r8
 8008096:	fa09 f303 	lsl.w	r3, r9, r3
 800809a:	4313      	orrs	r3, r2
 800809c:	46a2      	mov	sl, r4
 800809e:	9304      	str	r3, [sp, #16]
 80080a0:	e7d2      	b.n	8008048 <_svfiprintf_r+0x9c>
 80080a2:	9b03      	ldr	r3, [sp, #12]
 80080a4:	1d19      	adds	r1, r3, #4
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	9103      	str	r1, [sp, #12]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	bfbb      	ittet	lt
 80080ae:	425b      	neglt	r3, r3
 80080b0:	f042 0202 	orrlt.w	r2, r2, #2
 80080b4:	9307      	strge	r3, [sp, #28]
 80080b6:	9307      	strlt	r3, [sp, #28]
 80080b8:	bfb8      	it	lt
 80080ba:	9204      	strlt	r2, [sp, #16]
 80080bc:	7823      	ldrb	r3, [r4, #0]
 80080be:	2b2e      	cmp	r3, #46	; 0x2e
 80080c0:	d10c      	bne.n	80080dc <_svfiprintf_r+0x130>
 80080c2:	7863      	ldrb	r3, [r4, #1]
 80080c4:	2b2a      	cmp	r3, #42	; 0x2a
 80080c6:	d135      	bne.n	8008134 <_svfiprintf_r+0x188>
 80080c8:	9b03      	ldr	r3, [sp, #12]
 80080ca:	3402      	adds	r4, #2
 80080cc:	1d1a      	adds	r2, r3, #4
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	9203      	str	r2, [sp, #12]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	bfb8      	it	lt
 80080d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80080da:	9305      	str	r3, [sp, #20]
 80080dc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800819c <_svfiprintf_r+0x1f0>
 80080e0:	2203      	movs	r2, #3
 80080e2:	4650      	mov	r0, sl
 80080e4:	7821      	ldrb	r1, [r4, #0]
 80080e6:	f7ff f941 	bl	800736c <memchr>
 80080ea:	b140      	cbz	r0, 80080fe <_svfiprintf_r+0x152>
 80080ec:	2340      	movs	r3, #64	; 0x40
 80080ee:	eba0 000a 	sub.w	r0, r0, sl
 80080f2:	fa03 f000 	lsl.w	r0, r3, r0
 80080f6:	9b04      	ldr	r3, [sp, #16]
 80080f8:	3401      	adds	r4, #1
 80080fa:	4303      	orrs	r3, r0
 80080fc:	9304      	str	r3, [sp, #16]
 80080fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008102:	2206      	movs	r2, #6
 8008104:	4826      	ldr	r0, [pc, #152]	; (80081a0 <_svfiprintf_r+0x1f4>)
 8008106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800810a:	f7ff f92f 	bl	800736c <memchr>
 800810e:	2800      	cmp	r0, #0
 8008110:	d038      	beq.n	8008184 <_svfiprintf_r+0x1d8>
 8008112:	4b24      	ldr	r3, [pc, #144]	; (80081a4 <_svfiprintf_r+0x1f8>)
 8008114:	bb1b      	cbnz	r3, 800815e <_svfiprintf_r+0x1b2>
 8008116:	9b03      	ldr	r3, [sp, #12]
 8008118:	3307      	adds	r3, #7
 800811a:	f023 0307 	bic.w	r3, r3, #7
 800811e:	3308      	adds	r3, #8
 8008120:	9303      	str	r3, [sp, #12]
 8008122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008124:	4433      	add	r3, r6
 8008126:	9309      	str	r3, [sp, #36]	; 0x24
 8008128:	e767      	b.n	8007ffa <_svfiprintf_r+0x4e>
 800812a:	460c      	mov	r4, r1
 800812c:	2001      	movs	r0, #1
 800812e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008132:	e7a5      	b.n	8008080 <_svfiprintf_r+0xd4>
 8008134:	2300      	movs	r3, #0
 8008136:	f04f 0c0a 	mov.w	ip, #10
 800813a:	4619      	mov	r1, r3
 800813c:	3401      	adds	r4, #1
 800813e:	9305      	str	r3, [sp, #20]
 8008140:	4620      	mov	r0, r4
 8008142:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008146:	3a30      	subs	r2, #48	; 0x30
 8008148:	2a09      	cmp	r2, #9
 800814a:	d903      	bls.n	8008154 <_svfiprintf_r+0x1a8>
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0c5      	beq.n	80080dc <_svfiprintf_r+0x130>
 8008150:	9105      	str	r1, [sp, #20]
 8008152:	e7c3      	b.n	80080dc <_svfiprintf_r+0x130>
 8008154:	4604      	mov	r4, r0
 8008156:	2301      	movs	r3, #1
 8008158:	fb0c 2101 	mla	r1, ip, r1, r2
 800815c:	e7f0      	b.n	8008140 <_svfiprintf_r+0x194>
 800815e:	ab03      	add	r3, sp, #12
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	462a      	mov	r2, r5
 8008164:	4638      	mov	r0, r7
 8008166:	4b10      	ldr	r3, [pc, #64]	; (80081a8 <_svfiprintf_r+0x1fc>)
 8008168:	a904      	add	r1, sp, #16
 800816a:	f7fc fa7f 	bl	800466c <_printf_float>
 800816e:	1c42      	adds	r2, r0, #1
 8008170:	4606      	mov	r6, r0
 8008172:	d1d6      	bne.n	8008122 <_svfiprintf_r+0x176>
 8008174:	89ab      	ldrh	r3, [r5, #12]
 8008176:	065b      	lsls	r3, r3, #25
 8008178:	f53f af2c 	bmi.w	8007fd4 <_svfiprintf_r+0x28>
 800817c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800817e:	b01d      	add	sp, #116	; 0x74
 8008180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008184:	ab03      	add	r3, sp, #12
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	462a      	mov	r2, r5
 800818a:	4638      	mov	r0, r7
 800818c:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <_svfiprintf_r+0x1fc>)
 800818e:	a904      	add	r1, sp, #16
 8008190:	f7fc fd08 	bl	8004ba4 <_printf_i>
 8008194:	e7eb      	b.n	800816e <_svfiprintf_r+0x1c2>
 8008196:	bf00      	nop
 8008198:	08009954 	.word	0x08009954
 800819c:	0800995a 	.word	0x0800995a
 80081a0:	0800995e 	.word	0x0800995e
 80081a4:	0800466d 	.word	0x0800466d
 80081a8:	08007ef5 	.word	0x08007ef5

080081ac <nan>:
 80081ac:	2000      	movs	r0, #0
 80081ae:	4901      	ldr	r1, [pc, #4]	; (80081b4 <nan+0x8>)
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	7ff80000 	.word	0x7ff80000

080081b8 <_sbrk_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	2300      	movs	r3, #0
 80081bc:	4d05      	ldr	r5, [pc, #20]	; (80081d4 <_sbrk_r+0x1c>)
 80081be:	4604      	mov	r4, r0
 80081c0:	4608      	mov	r0, r1
 80081c2:	602b      	str	r3, [r5, #0]
 80081c4:	f7f9 fd00 	bl	8001bc8 <_sbrk>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	d102      	bne.n	80081d2 <_sbrk_r+0x1a>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	b103      	cbz	r3, 80081d2 <_sbrk_r+0x1a>
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	20000718 	.word	0x20000718

080081d8 <strncmp>:
 80081d8:	4603      	mov	r3, r0
 80081da:	b510      	push	{r4, lr}
 80081dc:	b172      	cbz	r2, 80081fc <strncmp+0x24>
 80081de:	3901      	subs	r1, #1
 80081e0:	1884      	adds	r4, r0, r2
 80081e2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80081e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80081ea:	4290      	cmp	r0, r2
 80081ec:	d101      	bne.n	80081f2 <strncmp+0x1a>
 80081ee:	42a3      	cmp	r3, r4
 80081f0:	d101      	bne.n	80081f6 <strncmp+0x1e>
 80081f2:	1a80      	subs	r0, r0, r2
 80081f4:	bd10      	pop	{r4, pc}
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d1f3      	bne.n	80081e2 <strncmp+0xa>
 80081fa:	e7fa      	b.n	80081f2 <strncmp+0x1a>
 80081fc:	4610      	mov	r0, r2
 80081fe:	e7f9      	b.n	80081f4 <strncmp+0x1c>

08008200 <__ascii_wctomb>:
 8008200:	4603      	mov	r3, r0
 8008202:	4608      	mov	r0, r1
 8008204:	b141      	cbz	r1, 8008218 <__ascii_wctomb+0x18>
 8008206:	2aff      	cmp	r2, #255	; 0xff
 8008208:	d904      	bls.n	8008214 <__ascii_wctomb+0x14>
 800820a:	228a      	movs	r2, #138	; 0x8a
 800820c:	f04f 30ff 	mov.w	r0, #4294967295
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	4770      	bx	lr
 8008214:	2001      	movs	r0, #1
 8008216:	700a      	strb	r2, [r1, #0]
 8008218:	4770      	bx	lr
	...

0800821c <__assert_func>:
 800821c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800821e:	4614      	mov	r4, r2
 8008220:	461a      	mov	r2, r3
 8008222:	4b09      	ldr	r3, [pc, #36]	; (8008248 <__assert_func+0x2c>)
 8008224:	4605      	mov	r5, r0
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68d8      	ldr	r0, [r3, #12]
 800822a:	b14c      	cbz	r4, 8008240 <__assert_func+0x24>
 800822c:	4b07      	ldr	r3, [pc, #28]	; (800824c <__assert_func+0x30>)
 800822e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008232:	9100      	str	r1, [sp, #0]
 8008234:	462b      	mov	r3, r5
 8008236:	4906      	ldr	r1, [pc, #24]	; (8008250 <__assert_func+0x34>)
 8008238:	f000 f80e 	bl	8008258 <fiprintf>
 800823c:	f000 fa8a 	bl	8008754 <abort>
 8008240:	4b04      	ldr	r3, [pc, #16]	; (8008254 <__assert_func+0x38>)
 8008242:	461c      	mov	r4, r3
 8008244:	e7f3      	b.n	800822e <__assert_func+0x12>
 8008246:	bf00      	nop
 8008248:	20000014 	.word	0x20000014
 800824c:	08009965 	.word	0x08009965
 8008250:	08009972 	.word	0x08009972
 8008254:	080099a0 	.word	0x080099a0

08008258 <fiprintf>:
 8008258:	b40e      	push	{r1, r2, r3}
 800825a:	b503      	push	{r0, r1, lr}
 800825c:	4601      	mov	r1, r0
 800825e:	ab03      	add	r3, sp, #12
 8008260:	4805      	ldr	r0, [pc, #20]	; (8008278 <fiprintf+0x20>)
 8008262:	f853 2b04 	ldr.w	r2, [r3], #4
 8008266:	6800      	ldr	r0, [r0, #0]
 8008268:	9301      	str	r3, [sp, #4]
 800826a:	f000 f883 	bl	8008374 <_vfiprintf_r>
 800826e:	b002      	add	sp, #8
 8008270:	f85d eb04 	ldr.w	lr, [sp], #4
 8008274:	b003      	add	sp, #12
 8008276:	4770      	bx	lr
 8008278:	20000014 	.word	0x20000014

0800827c <memmove>:
 800827c:	4288      	cmp	r0, r1
 800827e:	b510      	push	{r4, lr}
 8008280:	eb01 0402 	add.w	r4, r1, r2
 8008284:	d902      	bls.n	800828c <memmove+0x10>
 8008286:	4284      	cmp	r4, r0
 8008288:	4623      	mov	r3, r4
 800828a:	d807      	bhi.n	800829c <memmove+0x20>
 800828c:	1e43      	subs	r3, r0, #1
 800828e:	42a1      	cmp	r1, r4
 8008290:	d008      	beq.n	80082a4 <memmove+0x28>
 8008292:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008296:	f803 2f01 	strb.w	r2, [r3, #1]!
 800829a:	e7f8      	b.n	800828e <memmove+0x12>
 800829c:	4601      	mov	r1, r0
 800829e:	4402      	add	r2, r0
 80082a0:	428a      	cmp	r2, r1
 80082a2:	d100      	bne.n	80082a6 <memmove+0x2a>
 80082a4:	bd10      	pop	{r4, pc}
 80082a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082ae:	e7f7      	b.n	80082a0 <memmove+0x24>

080082b0 <__malloc_lock>:
 80082b0:	4801      	ldr	r0, [pc, #4]	; (80082b8 <__malloc_lock+0x8>)
 80082b2:	f000 bc0b 	b.w	8008acc <__retarget_lock_acquire_recursive>
 80082b6:	bf00      	nop
 80082b8:	2000071c 	.word	0x2000071c

080082bc <__malloc_unlock>:
 80082bc:	4801      	ldr	r0, [pc, #4]	; (80082c4 <__malloc_unlock+0x8>)
 80082be:	f000 bc06 	b.w	8008ace <__retarget_lock_release_recursive>
 80082c2:	bf00      	nop
 80082c4:	2000071c 	.word	0x2000071c

080082c8 <_realloc_r>:
 80082c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082cc:	4680      	mov	r8, r0
 80082ce:	4614      	mov	r4, r2
 80082d0:	460e      	mov	r6, r1
 80082d2:	b921      	cbnz	r1, 80082de <_realloc_r+0x16>
 80082d4:	4611      	mov	r1, r2
 80082d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082da:	f7ff bd97 	b.w	8007e0c <_malloc_r>
 80082de:	b92a      	cbnz	r2, 80082ec <_realloc_r+0x24>
 80082e0:	f7ff fd2c 	bl	8007d3c <_free_r>
 80082e4:	4625      	mov	r5, r4
 80082e6:	4628      	mov	r0, r5
 80082e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ec:	f000 fc56 	bl	8008b9c <_malloc_usable_size_r>
 80082f0:	4284      	cmp	r4, r0
 80082f2:	4607      	mov	r7, r0
 80082f4:	d802      	bhi.n	80082fc <_realloc_r+0x34>
 80082f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082fa:	d812      	bhi.n	8008322 <_realloc_r+0x5a>
 80082fc:	4621      	mov	r1, r4
 80082fe:	4640      	mov	r0, r8
 8008300:	f7ff fd84 	bl	8007e0c <_malloc_r>
 8008304:	4605      	mov	r5, r0
 8008306:	2800      	cmp	r0, #0
 8008308:	d0ed      	beq.n	80082e6 <_realloc_r+0x1e>
 800830a:	42bc      	cmp	r4, r7
 800830c:	4622      	mov	r2, r4
 800830e:	4631      	mov	r1, r6
 8008310:	bf28      	it	cs
 8008312:	463a      	movcs	r2, r7
 8008314:	f7ff f838 	bl	8007388 <memcpy>
 8008318:	4631      	mov	r1, r6
 800831a:	4640      	mov	r0, r8
 800831c:	f7ff fd0e 	bl	8007d3c <_free_r>
 8008320:	e7e1      	b.n	80082e6 <_realloc_r+0x1e>
 8008322:	4635      	mov	r5, r6
 8008324:	e7df      	b.n	80082e6 <_realloc_r+0x1e>

08008326 <__sfputc_r>:
 8008326:	6893      	ldr	r3, [r2, #8]
 8008328:	b410      	push	{r4}
 800832a:	3b01      	subs	r3, #1
 800832c:	2b00      	cmp	r3, #0
 800832e:	6093      	str	r3, [r2, #8]
 8008330:	da07      	bge.n	8008342 <__sfputc_r+0x1c>
 8008332:	6994      	ldr	r4, [r2, #24]
 8008334:	42a3      	cmp	r3, r4
 8008336:	db01      	blt.n	800833c <__sfputc_r+0x16>
 8008338:	290a      	cmp	r1, #10
 800833a:	d102      	bne.n	8008342 <__sfputc_r+0x1c>
 800833c:	bc10      	pop	{r4}
 800833e:	f000 b949 	b.w	80085d4 <__swbuf_r>
 8008342:	6813      	ldr	r3, [r2, #0]
 8008344:	1c58      	adds	r0, r3, #1
 8008346:	6010      	str	r0, [r2, #0]
 8008348:	7019      	strb	r1, [r3, #0]
 800834a:	4608      	mov	r0, r1
 800834c:	bc10      	pop	{r4}
 800834e:	4770      	bx	lr

08008350 <__sfputs_r>:
 8008350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008352:	4606      	mov	r6, r0
 8008354:	460f      	mov	r7, r1
 8008356:	4614      	mov	r4, r2
 8008358:	18d5      	adds	r5, r2, r3
 800835a:	42ac      	cmp	r4, r5
 800835c:	d101      	bne.n	8008362 <__sfputs_r+0x12>
 800835e:	2000      	movs	r0, #0
 8008360:	e007      	b.n	8008372 <__sfputs_r+0x22>
 8008362:	463a      	mov	r2, r7
 8008364:	4630      	mov	r0, r6
 8008366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800836a:	f7ff ffdc 	bl	8008326 <__sfputc_r>
 800836e:	1c43      	adds	r3, r0, #1
 8008370:	d1f3      	bne.n	800835a <__sfputs_r+0xa>
 8008372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008374 <_vfiprintf_r>:
 8008374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008378:	460d      	mov	r5, r1
 800837a:	4614      	mov	r4, r2
 800837c:	4698      	mov	r8, r3
 800837e:	4606      	mov	r6, r0
 8008380:	b09d      	sub	sp, #116	; 0x74
 8008382:	b118      	cbz	r0, 800838c <_vfiprintf_r+0x18>
 8008384:	6983      	ldr	r3, [r0, #24]
 8008386:	b90b      	cbnz	r3, 800838c <_vfiprintf_r+0x18>
 8008388:	f000 fb02 	bl	8008990 <__sinit>
 800838c:	4b89      	ldr	r3, [pc, #548]	; (80085b4 <_vfiprintf_r+0x240>)
 800838e:	429d      	cmp	r5, r3
 8008390:	d11b      	bne.n	80083ca <_vfiprintf_r+0x56>
 8008392:	6875      	ldr	r5, [r6, #4]
 8008394:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008396:	07d9      	lsls	r1, r3, #31
 8008398:	d405      	bmi.n	80083a6 <_vfiprintf_r+0x32>
 800839a:	89ab      	ldrh	r3, [r5, #12]
 800839c:	059a      	lsls	r2, r3, #22
 800839e:	d402      	bmi.n	80083a6 <_vfiprintf_r+0x32>
 80083a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083a2:	f000 fb93 	bl	8008acc <__retarget_lock_acquire_recursive>
 80083a6:	89ab      	ldrh	r3, [r5, #12]
 80083a8:	071b      	lsls	r3, r3, #28
 80083aa:	d501      	bpl.n	80083b0 <_vfiprintf_r+0x3c>
 80083ac:	692b      	ldr	r3, [r5, #16]
 80083ae:	b9eb      	cbnz	r3, 80083ec <_vfiprintf_r+0x78>
 80083b0:	4629      	mov	r1, r5
 80083b2:	4630      	mov	r0, r6
 80083b4:	f000 f960 	bl	8008678 <__swsetup_r>
 80083b8:	b1c0      	cbz	r0, 80083ec <_vfiprintf_r+0x78>
 80083ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083bc:	07dc      	lsls	r4, r3, #31
 80083be:	d50e      	bpl.n	80083de <_vfiprintf_r+0x6a>
 80083c0:	f04f 30ff 	mov.w	r0, #4294967295
 80083c4:	b01d      	add	sp, #116	; 0x74
 80083c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ca:	4b7b      	ldr	r3, [pc, #492]	; (80085b8 <_vfiprintf_r+0x244>)
 80083cc:	429d      	cmp	r5, r3
 80083ce:	d101      	bne.n	80083d4 <_vfiprintf_r+0x60>
 80083d0:	68b5      	ldr	r5, [r6, #8]
 80083d2:	e7df      	b.n	8008394 <_vfiprintf_r+0x20>
 80083d4:	4b79      	ldr	r3, [pc, #484]	; (80085bc <_vfiprintf_r+0x248>)
 80083d6:	429d      	cmp	r5, r3
 80083d8:	bf08      	it	eq
 80083da:	68f5      	ldreq	r5, [r6, #12]
 80083dc:	e7da      	b.n	8008394 <_vfiprintf_r+0x20>
 80083de:	89ab      	ldrh	r3, [r5, #12]
 80083e0:	0598      	lsls	r0, r3, #22
 80083e2:	d4ed      	bmi.n	80083c0 <_vfiprintf_r+0x4c>
 80083e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083e6:	f000 fb72 	bl	8008ace <__retarget_lock_release_recursive>
 80083ea:	e7e9      	b.n	80083c0 <_vfiprintf_r+0x4c>
 80083ec:	2300      	movs	r3, #0
 80083ee:	9309      	str	r3, [sp, #36]	; 0x24
 80083f0:	2320      	movs	r3, #32
 80083f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083f6:	2330      	movs	r3, #48	; 0x30
 80083f8:	f04f 0901 	mov.w	r9, #1
 80083fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008400:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80085c0 <_vfiprintf_r+0x24c>
 8008404:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008408:	4623      	mov	r3, r4
 800840a:	469a      	mov	sl, r3
 800840c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008410:	b10a      	cbz	r2, 8008416 <_vfiprintf_r+0xa2>
 8008412:	2a25      	cmp	r2, #37	; 0x25
 8008414:	d1f9      	bne.n	800840a <_vfiprintf_r+0x96>
 8008416:	ebba 0b04 	subs.w	fp, sl, r4
 800841a:	d00b      	beq.n	8008434 <_vfiprintf_r+0xc0>
 800841c:	465b      	mov	r3, fp
 800841e:	4622      	mov	r2, r4
 8008420:	4629      	mov	r1, r5
 8008422:	4630      	mov	r0, r6
 8008424:	f7ff ff94 	bl	8008350 <__sfputs_r>
 8008428:	3001      	adds	r0, #1
 800842a:	f000 80aa 	beq.w	8008582 <_vfiprintf_r+0x20e>
 800842e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008430:	445a      	add	r2, fp
 8008432:	9209      	str	r2, [sp, #36]	; 0x24
 8008434:	f89a 3000 	ldrb.w	r3, [sl]
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 80a2 	beq.w	8008582 <_vfiprintf_r+0x20e>
 800843e:	2300      	movs	r3, #0
 8008440:	f04f 32ff 	mov.w	r2, #4294967295
 8008444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008448:	f10a 0a01 	add.w	sl, sl, #1
 800844c:	9304      	str	r3, [sp, #16]
 800844e:	9307      	str	r3, [sp, #28]
 8008450:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008454:	931a      	str	r3, [sp, #104]	; 0x68
 8008456:	4654      	mov	r4, sl
 8008458:	2205      	movs	r2, #5
 800845a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800845e:	4858      	ldr	r0, [pc, #352]	; (80085c0 <_vfiprintf_r+0x24c>)
 8008460:	f7fe ff84 	bl	800736c <memchr>
 8008464:	9a04      	ldr	r2, [sp, #16]
 8008466:	b9d8      	cbnz	r0, 80084a0 <_vfiprintf_r+0x12c>
 8008468:	06d1      	lsls	r1, r2, #27
 800846a:	bf44      	itt	mi
 800846c:	2320      	movmi	r3, #32
 800846e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008472:	0713      	lsls	r3, r2, #28
 8008474:	bf44      	itt	mi
 8008476:	232b      	movmi	r3, #43	; 0x2b
 8008478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800847c:	f89a 3000 	ldrb.w	r3, [sl]
 8008480:	2b2a      	cmp	r3, #42	; 0x2a
 8008482:	d015      	beq.n	80084b0 <_vfiprintf_r+0x13c>
 8008484:	4654      	mov	r4, sl
 8008486:	2000      	movs	r0, #0
 8008488:	f04f 0c0a 	mov.w	ip, #10
 800848c:	9a07      	ldr	r2, [sp, #28]
 800848e:	4621      	mov	r1, r4
 8008490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008494:	3b30      	subs	r3, #48	; 0x30
 8008496:	2b09      	cmp	r3, #9
 8008498:	d94e      	bls.n	8008538 <_vfiprintf_r+0x1c4>
 800849a:	b1b0      	cbz	r0, 80084ca <_vfiprintf_r+0x156>
 800849c:	9207      	str	r2, [sp, #28]
 800849e:	e014      	b.n	80084ca <_vfiprintf_r+0x156>
 80084a0:	eba0 0308 	sub.w	r3, r0, r8
 80084a4:	fa09 f303 	lsl.w	r3, r9, r3
 80084a8:	4313      	orrs	r3, r2
 80084aa:	46a2      	mov	sl, r4
 80084ac:	9304      	str	r3, [sp, #16]
 80084ae:	e7d2      	b.n	8008456 <_vfiprintf_r+0xe2>
 80084b0:	9b03      	ldr	r3, [sp, #12]
 80084b2:	1d19      	adds	r1, r3, #4
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	9103      	str	r1, [sp, #12]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	bfbb      	ittet	lt
 80084bc:	425b      	neglt	r3, r3
 80084be:	f042 0202 	orrlt.w	r2, r2, #2
 80084c2:	9307      	strge	r3, [sp, #28]
 80084c4:	9307      	strlt	r3, [sp, #28]
 80084c6:	bfb8      	it	lt
 80084c8:	9204      	strlt	r2, [sp, #16]
 80084ca:	7823      	ldrb	r3, [r4, #0]
 80084cc:	2b2e      	cmp	r3, #46	; 0x2e
 80084ce:	d10c      	bne.n	80084ea <_vfiprintf_r+0x176>
 80084d0:	7863      	ldrb	r3, [r4, #1]
 80084d2:	2b2a      	cmp	r3, #42	; 0x2a
 80084d4:	d135      	bne.n	8008542 <_vfiprintf_r+0x1ce>
 80084d6:	9b03      	ldr	r3, [sp, #12]
 80084d8:	3402      	adds	r4, #2
 80084da:	1d1a      	adds	r2, r3, #4
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	9203      	str	r2, [sp, #12]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	bfb8      	it	lt
 80084e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80084e8:	9305      	str	r3, [sp, #20]
 80084ea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80085c4 <_vfiprintf_r+0x250>
 80084ee:	2203      	movs	r2, #3
 80084f0:	4650      	mov	r0, sl
 80084f2:	7821      	ldrb	r1, [r4, #0]
 80084f4:	f7fe ff3a 	bl	800736c <memchr>
 80084f8:	b140      	cbz	r0, 800850c <_vfiprintf_r+0x198>
 80084fa:	2340      	movs	r3, #64	; 0x40
 80084fc:	eba0 000a 	sub.w	r0, r0, sl
 8008500:	fa03 f000 	lsl.w	r0, r3, r0
 8008504:	9b04      	ldr	r3, [sp, #16]
 8008506:	3401      	adds	r4, #1
 8008508:	4303      	orrs	r3, r0
 800850a:	9304      	str	r3, [sp, #16]
 800850c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008510:	2206      	movs	r2, #6
 8008512:	482d      	ldr	r0, [pc, #180]	; (80085c8 <_vfiprintf_r+0x254>)
 8008514:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008518:	f7fe ff28 	bl	800736c <memchr>
 800851c:	2800      	cmp	r0, #0
 800851e:	d03f      	beq.n	80085a0 <_vfiprintf_r+0x22c>
 8008520:	4b2a      	ldr	r3, [pc, #168]	; (80085cc <_vfiprintf_r+0x258>)
 8008522:	bb1b      	cbnz	r3, 800856c <_vfiprintf_r+0x1f8>
 8008524:	9b03      	ldr	r3, [sp, #12]
 8008526:	3307      	adds	r3, #7
 8008528:	f023 0307 	bic.w	r3, r3, #7
 800852c:	3308      	adds	r3, #8
 800852e:	9303      	str	r3, [sp, #12]
 8008530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008532:	443b      	add	r3, r7
 8008534:	9309      	str	r3, [sp, #36]	; 0x24
 8008536:	e767      	b.n	8008408 <_vfiprintf_r+0x94>
 8008538:	460c      	mov	r4, r1
 800853a:	2001      	movs	r0, #1
 800853c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008540:	e7a5      	b.n	800848e <_vfiprintf_r+0x11a>
 8008542:	2300      	movs	r3, #0
 8008544:	f04f 0c0a 	mov.w	ip, #10
 8008548:	4619      	mov	r1, r3
 800854a:	3401      	adds	r4, #1
 800854c:	9305      	str	r3, [sp, #20]
 800854e:	4620      	mov	r0, r4
 8008550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008554:	3a30      	subs	r2, #48	; 0x30
 8008556:	2a09      	cmp	r2, #9
 8008558:	d903      	bls.n	8008562 <_vfiprintf_r+0x1ee>
 800855a:	2b00      	cmp	r3, #0
 800855c:	d0c5      	beq.n	80084ea <_vfiprintf_r+0x176>
 800855e:	9105      	str	r1, [sp, #20]
 8008560:	e7c3      	b.n	80084ea <_vfiprintf_r+0x176>
 8008562:	4604      	mov	r4, r0
 8008564:	2301      	movs	r3, #1
 8008566:	fb0c 2101 	mla	r1, ip, r1, r2
 800856a:	e7f0      	b.n	800854e <_vfiprintf_r+0x1da>
 800856c:	ab03      	add	r3, sp, #12
 800856e:	9300      	str	r3, [sp, #0]
 8008570:	462a      	mov	r2, r5
 8008572:	4630      	mov	r0, r6
 8008574:	4b16      	ldr	r3, [pc, #88]	; (80085d0 <_vfiprintf_r+0x25c>)
 8008576:	a904      	add	r1, sp, #16
 8008578:	f7fc f878 	bl	800466c <_printf_float>
 800857c:	4607      	mov	r7, r0
 800857e:	1c78      	adds	r0, r7, #1
 8008580:	d1d6      	bne.n	8008530 <_vfiprintf_r+0x1bc>
 8008582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008584:	07d9      	lsls	r1, r3, #31
 8008586:	d405      	bmi.n	8008594 <_vfiprintf_r+0x220>
 8008588:	89ab      	ldrh	r3, [r5, #12]
 800858a:	059a      	lsls	r2, r3, #22
 800858c:	d402      	bmi.n	8008594 <_vfiprintf_r+0x220>
 800858e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008590:	f000 fa9d 	bl	8008ace <__retarget_lock_release_recursive>
 8008594:	89ab      	ldrh	r3, [r5, #12]
 8008596:	065b      	lsls	r3, r3, #25
 8008598:	f53f af12 	bmi.w	80083c0 <_vfiprintf_r+0x4c>
 800859c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800859e:	e711      	b.n	80083c4 <_vfiprintf_r+0x50>
 80085a0:	ab03      	add	r3, sp, #12
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	462a      	mov	r2, r5
 80085a6:	4630      	mov	r0, r6
 80085a8:	4b09      	ldr	r3, [pc, #36]	; (80085d0 <_vfiprintf_r+0x25c>)
 80085aa:	a904      	add	r1, sp, #16
 80085ac:	f7fc fafa 	bl	8004ba4 <_printf_i>
 80085b0:	e7e4      	b.n	800857c <_vfiprintf_r+0x208>
 80085b2:	bf00      	nop
 80085b4:	080099c4 	.word	0x080099c4
 80085b8:	080099e4 	.word	0x080099e4
 80085bc:	080099a4 	.word	0x080099a4
 80085c0:	08009954 	.word	0x08009954
 80085c4:	0800995a 	.word	0x0800995a
 80085c8:	0800995e 	.word	0x0800995e
 80085cc:	0800466d 	.word	0x0800466d
 80085d0:	08008351 	.word	0x08008351

080085d4 <__swbuf_r>:
 80085d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d6:	460e      	mov	r6, r1
 80085d8:	4614      	mov	r4, r2
 80085da:	4605      	mov	r5, r0
 80085dc:	b118      	cbz	r0, 80085e6 <__swbuf_r+0x12>
 80085de:	6983      	ldr	r3, [r0, #24]
 80085e0:	b90b      	cbnz	r3, 80085e6 <__swbuf_r+0x12>
 80085e2:	f000 f9d5 	bl	8008990 <__sinit>
 80085e6:	4b21      	ldr	r3, [pc, #132]	; (800866c <__swbuf_r+0x98>)
 80085e8:	429c      	cmp	r4, r3
 80085ea:	d12b      	bne.n	8008644 <__swbuf_r+0x70>
 80085ec:	686c      	ldr	r4, [r5, #4]
 80085ee:	69a3      	ldr	r3, [r4, #24]
 80085f0:	60a3      	str	r3, [r4, #8]
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	071a      	lsls	r2, r3, #28
 80085f6:	d52f      	bpl.n	8008658 <__swbuf_r+0x84>
 80085f8:	6923      	ldr	r3, [r4, #16]
 80085fa:	b36b      	cbz	r3, 8008658 <__swbuf_r+0x84>
 80085fc:	6923      	ldr	r3, [r4, #16]
 80085fe:	6820      	ldr	r0, [r4, #0]
 8008600:	b2f6      	uxtb	r6, r6
 8008602:	1ac0      	subs	r0, r0, r3
 8008604:	6963      	ldr	r3, [r4, #20]
 8008606:	4637      	mov	r7, r6
 8008608:	4283      	cmp	r3, r0
 800860a:	dc04      	bgt.n	8008616 <__swbuf_r+0x42>
 800860c:	4621      	mov	r1, r4
 800860e:	4628      	mov	r0, r5
 8008610:	f000 f92a 	bl	8008868 <_fflush_r>
 8008614:	bb30      	cbnz	r0, 8008664 <__swbuf_r+0x90>
 8008616:	68a3      	ldr	r3, [r4, #8]
 8008618:	3001      	adds	r0, #1
 800861a:	3b01      	subs	r3, #1
 800861c:	60a3      	str	r3, [r4, #8]
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	1c5a      	adds	r2, r3, #1
 8008622:	6022      	str	r2, [r4, #0]
 8008624:	701e      	strb	r6, [r3, #0]
 8008626:	6963      	ldr	r3, [r4, #20]
 8008628:	4283      	cmp	r3, r0
 800862a:	d004      	beq.n	8008636 <__swbuf_r+0x62>
 800862c:	89a3      	ldrh	r3, [r4, #12]
 800862e:	07db      	lsls	r3, r3, #31
 8008630:	d506      	bpl.n	8008640 <__swbuf_r+0x6c>
 8008632:	2e0a      	cmp	r6, #10
 8008634:	d104      	bne.n	8008640 <__swbuf_r+0x6c>
 8008636:	4621      	mov	r1, r4
 8008638:	4628      	mov	r0, r5
 800863a:	f000 f915 	bl	8008868 <_fflush_r>
 800863e:	b988      	cbnz	r0, 8008664 <__swbuf_r+0x90>
 8008640:	4638      	mov	r0, r7
 8008642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008644:	4b0a      	ldr	r3, [pc, #40]	; (8008670 <__swbuf_r+0x9c>)
 8008646:	429c      	cmp	r4, r3
 8008648:	d101      	bne.n	800864e <__swbuf_r+0x7a>
 800864a:	68ac      	ldr	r4, [r5, #8]
 800864c:	e7cf      	b.n	80085ee <__swbuf_r+0x1a>
 800864e:	4b09      	ldr	r3, [pc, #36]	; (8008674 <__swbuf_r+0xa0>)
 8008650:	429c      	cmp	r4, r3
 8008652:	bf08      	it	eq
 8008654:	68ec      	ldreq	r4, [r5, #12]
 8008656:	e7ca      	b.n	80085ee <__swbuf_r+0x1a>
 8008658:	4621      	mov	r1, r4
 800865a:	4628      	mov	r0, r5
 800865c:	f000 f80c 	bl	8008678 <__swsetup_r>
 8008660:	2800      	cmp	r0, #0
 8008662:	d0cb      	beq.n	80085fc <__swbuf_r+0x28>
 8008664:	f04f 37ff 	mov.w	r7, #4294967295
 8008668:	e7ea      	b.n	8008640 <__swbuf_r+0x6c>
 800866a:	bf00      	nop
 800866c:	080099c4 	.word	0x080099c4
 8008670:	080099e4 	.word	0x080099e4
 8008674:	080099a4 	.word	0x080099a4

08008678 <__swsetup_r>:
 8008678:	4b32      	ldr	r3, [pc, #200]	; (8008744 <__swsetup_r+0xcc>)
 800867a:	b570      	push	{r4, r5, r6, lr}
 800867c:	681d      	ldr	r5, [r3, #0]
 800867e:	4606      	mov	r6, r0
 8008680:	460c      	mov	r4, r1
 8008682:	b125      	cbz	r5, 800868e <__swsetup_r+0x16>
 8008684:	69ab      	ldr	r3, [r5, #24]
 8008686:	b913      	cbnz	r3, 800868e <__swsetup_r+0x16>
 8008688:	4628      	mov	r0, r5
 800868a:	f000 f981 	bl	8008990 <__sinit>
 800868e:	4b2e      	ldr	r3, [pc, #184]	; (8008748 <__swsetup_r+0xd0>)
 8008690:	429c      	cmp	r4, r3
 8008692:	d10f      	bne.n	80086b4 <__swsetup_r+0x3c>
 8008694:	686c      	ldr	r4, [r5, #4]
 8008696:	89a3      	ldrh	r3, [r4, #12]
 8008698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800869c:	0719      	lsls	r1, r3, #28
 800869e:	d42c      	bmi.n	80086fa <__swsetup_r+0x82>
 80086a0:	06dd      	lsls	r5, r3, #27
 80086a2:	d411      	bmi.n	80086c8 <__swsetup_r+0x50>
 80086a4:	2309      	movs	r3, #9
 80086a6:	6033      	str	r3, [r6, #0]
 80086a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086ac:	f04f 30ff 	mov.w	r0, #4294967295
 80086b0:	81a3      	strh	r3, [r4, #12]
 80086b2:	e03e      	b.n	8008732 <__swsetup_r+0xba>
 80086b4:	4b25      	ldr	r3, [pc, #148]	; (800874c <__swsetup_r+0xd4>)
 80086b6:	429c      	cmp	r4, r3
 80086b8:	d101      	bne.n	80086be <__swsetup_r+0x46>
 80086ba:	68ac      	ldr	r4, [r5, #8]
 80086bc:	e7eb      	b.n	8008696 <__swsetup_r+0x1e>
 80086be:	4b24      	ldr	r3, [pc, #144]	; (8008750 <__swsetup_r+0xd8>)
 80086c0:	429c      	cmp	r4, r3
 80086c2:	bf08      	it	eq
 80086c4:	68ec      	ldreq	r4, [r5, #12]
 80086c6:	e7e6      	b.n	8008696 <__swsetup_r+0x1e>
 80086c8:	0758      	lsls	r0, r3, #29
 80086ca:	d512      	bpl.n	80086f2 <__swsetup_r+0x7a>
 80086cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086ce:	b141      	cbz	r1, 80086e2 <__swsetup_r+0x6a>
 80086d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086d4:	4299      	cmp	r1, r3
 80086d6:	d002      	beq.n	80086de <__swsetup_r+0x66>
 80086d8:	4630      	mov	r0, r6
 80086da:	f7ff fb2f 	bl	8007d3c <_free_r>
 80086de:	2300      	movs	r3, #0
 80086e0:	6363      	str	r3, [r4, #52]	; 0x34
 80086e2:	89a3      	ldrh	r3, [r4, #12]
 80086e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086e8:	81a3      	strh	r3, [r4, #12]
 80086ea:	2300      	movs	r3, #0
 80086ec:	6063      	str	r3, [r4, #4]
 80086ee:	6923      	ldr	r3, [r4, #16]
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	89a3      	ldrh	r3, [r4, #12]
 80086f4:	f043 0308 	orr.w	r3, r3, #8
 80086f8:	81a3      	strh	r3, [r4, #12]
 80086fa:	6923      	ldr	r3, [r4, #16]
 80086fc:	b94b      	cbnz	r3, 8008712 <__swsetup_r+0x9a>
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008708:	d003      	beq.n	8008712 <__swsetup_r+0x9a>
 800870a:	4621      	mov	r1, r4
 800870c:	4630      	mov	r0, r6
 800870e:	f000 fa05 	bl	8008b1c <__smakebuf_r>
 8008712:	89a0      	ldrh	r0, [r4, #12]
 8008714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008718:	f010 0301 	ands.w	r3, r0, #1
 800871c:	d00a      	beq.n	8008734 <__swsetup_r+0xbc>
 800871e:	2300      	movs	r3, #0
 8008720:	60a3      	str	r3, [r4, #8]
 8008722:	6963      	ldr	r3, [r4, #20]
 8008724:	425b      	negs	r3, r3
 8008726:	61a3      	str	r3, [r4, #24]
 8008728:	6923      	ldr	r3, [r4, #16]
 800872a:	b943      	cbnz	r3, 800873e <__swsetup_r+0xc6>
 800872c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008730:	d1ba      	bne.n	80086a8 <__swsetup_r+0x30>
 8008732:	bd70      	pop	{r4, r5, r6, pc}
 8008734:	0781      	lsls	r1, r0, #30
 8008736:	bf58      	it	pl
 8008738:	6963      	ldrpl	r3, [r4, #20]
 800873a:	60a3      	str	r3, [r4, #8]
 800873c:	e7f4      	b.n	8008728 <__swsetup_r+0xb0>
 800873e:	2000      	movs	r0, #0
 8008740:	e7f7      	b.n	8008732 <__swsetup_r+0xba>
 8008742:	bf00      	nop
 8008744:	20000014 	.word	0x20000014
 8008748:	080099c4 	.word	0x080099c4
 800874c:	080099e4 	.word	0x080099e4
 8008750:	080099a4 	.word	0x080099a4

08008754 <abort>:
 8008754:	2006      	movs	r0, #6
 8008756:	b508      	push	{r3, lr}
 8008758:	f000 fa50 	bl	8008bfc <raise>
 800875c:	2001      	movs	r0, #1
 800875e:	f7f9 f9c0 	bl	8001ae2 <_exit>
	...

08008764 <__sflush_r>:
 8008764:	898a      	ldrh	r2, [r1, #12]
 8008766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008768:	4605      	mov	r5, r0
 800876a:	0710      	lsls	r0, r2, #28
 800876c:	460c      	mov	r4, r1
 800876e:	d457      	bmi.n	8008820 <__sflush_r+0xbc>
 8008770:	684b      	ldr	r3, [r1, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	dc04      	bgt.n	8008780 <__sflush_r+0x1c>
 8008776:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008778:	2b00      	cmp	r3, #0
 800877a:	dc01      	bgt.n	8008780 <__sflush_r+0x1c>
 800877c:	2000      	movs	r0, #0
 800877e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008782:	2e00      	cmp	r6, #0
 8008784:	d0fa      	beq.n	800877c <__sflush_r+0x18>
 8008786:	2300      	movs	r3, #0
 8008788:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800878c:	682f      	ldr	r7, [r5, #0]
 800878e:	602b      	str	r3, [r5, #0]
 8008790:	d032      	beq.n	80087f8 <__sflush_r+0x94>
 8008792:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	075a      	lsls	r2, r3, #29
 8008798:	d505      	bpl.n	80087a6 <__sflush_r+0x42>
 800879a:	6863      	ldr	r3, [r4, #4]
 800879c:	1ac0      	subs	r0, r0, r3
 800879e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087a0:	b10b      	cbz	r3, 80087a6 <__sflush_r+0x42>
 80087a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087a4:	1ac0      	subs	r0, r0, r3
 80087a6:	2300      	movs	r3, #0
 80087a8:	4602      	mov	r2, r0
 80087aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087ac:	4628      	mov	r0, r5
 80087ae:	6a21      	ldr	r1, [r4, #32]
 80087b0:	47b0      	blx	r6
 80087b2:	1c43      	adds	r3, r0, #1
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	d106      	bne.n	80087c6 <__sflush_r+0x62>
 80087b8:	6829      	ldr	r1, [r5, #0]
 80087ba:	291d      	cmp	r1, #29
 80087bc:	d82c      	bhi.n	8008818 <__sflush_r+0xb4>
 80087be:	4a29      	ldr	r2, [pc, #164]	; (8008864 <__sflush_r+0x100>)
 80087c0:	40ca      	lsrs	r2, r1
 80087c2:	07d6      	lsls	r6, r2, #31
 80087c4:	d528      	bpl.n	8008818 <__sflush_r+0xb4>
 80087c6:	2200      	movs	r2, #0
 80087c8:	6062      	str	r2, [r4, #4]
 80087ca:	6922      	ldr	r2, [r4, #16]
 80087cc:	04d9      	lsls	r1, r3, #19
 80087ce:	6022      	str	r2, [r4, #0]
 80087d0:	d504      	bpl.n	80087dc <__sflush_r+0x78>
 80087d2:	1c42      	adds	r2, r0, #1
 80087d4:	d101      	bne.n	80087da <__sflush_r+0x76>
 80087d6:	682b      	ldr	r3, [r5, #0]
 80087d8:	b903      	cbnz	r3, 80087dc <__sflush_r+0x78>
 80087da:	6560      	str	r0, [r4, #84]	; 0x54
 80087dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087de:	602f      	str	r7, [r5, #0]
 80087e0:	2900      	cmp	r1, #0
 80087e2:	d0cb      	beq.n	800877c <__sflush_r+0x18>
 80087e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087e8:	4299      	cmp	r1, r3
 80087ea:	d002      	beq.n	80087f2 <__sflush_r+0x8e>
 80087ec:	4628      	mov	r0, r5
 80087ee:	f7ff faa5 	bl	8007d3c <_free_r>
 80087f2:	2000      	movs	r0, #0
 80087f4:	6360      	str	r0, [r4, #52]	; 0x34
 80087f6:	e7c2      	b.n	800877e <__sflush_r+0x1a>
 80087f8:	6a21      	ldr	r1, [r4, #32]
 80087fa:	2301      	movs	r3, #1
 80087fc:	4628      	mov	r0, r5
 80087fe:	47b0      	blx	r6
 8008800:	1c41      	adds	r1, r0, #1
 8008802:	d1c7      	bne.n	8008794 <__sflush_r+0x30>
 8008804:	682b      	ldr	r3, [r5, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d0c4      	beq.n	8008794 <__sflush_r+0x30>
 800880a:	2b1d      	cmp	r3, #29
 800880c:	d001      	beq.n	8008812 <__sflush_r+0xae>
 800880e:	2b16      	cmp	r3, #22
 8008810:	d101      	bne.n	8008816 <__sflush_r+0xb2>
 8008812:	602f      	str	r7, [r5, #0]
 8008814:	e7b2      	b.n	800877c <__sflush_r+0x18>
 8008816:	89a3      	ldrh	r3, [r4, #12]
 8008818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800881c:	81a3      	strh	r3, [r4, #12]
 800881e:	e7ae      	b.n	800877e <__sflush_r+0x1a>
 8008820:	690f      	ldr	r7, [r1, #16]
 8008822:	2f00      	cmp	r7, #0
 8008824:	d0aa      	beq.n	800877c <__sflush_r+0x18>
 8008826:	0793      	lsls	r3, r2, #30
 8008828:	bf18      	it	ne
 800882a:	2300      	movne	r3, #0
 800882c:	680e      	ldr	r6, [r1, #0]
 800882e:	bf08      	it	eq
 8008830:	694b      	ldreq	r3, [r1, #20]
 8008832:	1bf6      	subs	r6, r6, r7
 8008834:	600f      	str	r7, [r1, #0]
 8008836:	608b      	str	r3, [r1, #8]
 8008838:	2e00      	cmp	r6, #0
 800883a:	dd9f      	ble.n	800877c <__sflush_r+0x18>
 800883c:	4633      	mov	r3, r6
 800883e:	463a      	mov	r2, r7
 8008840:	4628      	mov	r0, r5
 8008842:	6a21      	ldr	r1, [r4, #32]
 8008844:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008848:	47e0      	blx	ip
 800884a:	2800      	cmp	r0, #0
 800884c:	dc06      	bgt.n	800885c <__sflush_r+0xf8>
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	f04f 30ff 	mov.w	r0, #4294967295
 8008854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008858:	81a3      	strh	r3, [r4, #12]
 800885a:	e790      	b.n	800877e <__sflush_r+0x1a>
 800885c:	4407      	add	r7, r0
 800885e:	1a36      	subs	r6, r6, r0
 8008860:	e7ea      	b.n	8008838 <__sflush_r+0xd4>
 8008862:	bf00      	nop
 8008864:	20400001 	.word	0x20400001

08008868 <_fflush_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	690b      	ldr	r3, [r1, #16]
 800886c:	4605      	mov	r5, r0
 800886e:	460c      	mov	r4, r1
 8008870:	b913      	cbnz	r3, 8008878 <_fflush_r+0x10>
 8008872:	2500      	movs	r5, #0
 8008874:	4628      	mov	r0, r5
 8008876:	bd38      	pop	{r3, r4, r5, pc}
 8008878:	b118      	cbz	r0, 8008882 <_fflush_r+0x1a>
 800887a:	6983      	ldr	r3, [r0, #24]
 800887c:	b90b      	cbnz	r3, 8008882 <_fflush_r+0x1a>
 800887e:	f000 f887 	bl	8008990 <__sinit>
 8008882:	4b14      	ldr	r3, [pc, #80]	; (80088d4 <_fflush_r+0x6c>)
 8008884:	429c      	cmp	r4, r3
 8008886:	d11b      	bne.n	80088c0 <_fflush_r+0x58>
 8008888:	686c      	ldr	r4, [r5, #4]
 800888a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d0ef      	beq.n	8008872 <_fflush_r+0xa>
 8008892:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008894:	07d0      	lsls	r0, r2, #31
 8008896:	d404      	bmi.n	80088a2 <_fflush_r+0x3a>
 8008898:	0599      	lsls	r1, r3, #22
 800889a:	d402      	bmi.n	80088a2 <_fflush_r+0x3a>
 800889c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800889e:	f000 f915 	bl	8008acc <__retarget_lock_acquire_recursive>
 80088a2:	4628      	mov	r0, r5
 80088a4:	4621      	mov	r1, r4
 80088a6:	f7ff ff5d 	bl	8008764 <__sflush_r>
 80088aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088ac:	4605      	mov	r5, r0
 80088ae:	07da      	lsls	r2, r3, #31
 80088b0:	d4e0      	bmi.n	8008874 <_fflush_r+0xc>
 80088b2:	89a3      	ldrh	r3, [r4, #12]
 80088b4:	059b      	lsls	r3, r3, #22
 80088b6:	d4dd      	bmi.n	8008874 <_fflush_r+0xc>
 80088b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088ba:	f000 f908 	bl	8008ace <__retarget_lock_release_recursive>
 80088be:	e7d9      	b.n	8008874 <_fflush_r+0xc>
 80088c0:	4b05      	ldr	r3, [pc, #20]	; (80088d8 <_fflush_r+0x70>)
 80088c2:	429c      	cmp	r4, r3
 80088c4:	d101      	bne.n	80088ca <_fflush_r+0x62>
 80088c6:	68ac      	ldr	r4, [r5, #8]
 80088c8:	e7df      	b.n	800888a <_fflush_r+0x22>
 80088ca:	4b04      	ldr	r3, [pc, #16]	; (80088dc <_fflush_r+0x74>)
 80088cc:	429c      	cmp	r4, r3
 80088ce:	bf08      	it	eq
 80088d0:	68ec      	ldreq	r4, [r5, #12]
 80088d2:	e7da      	b.n	800888a <_fflush_r+0x22>
 80088d4:	080099c4 	.word	0x080099c4
 80088d8:	080099e4 	.word	0x080099e4
 80088dc:	080099a4 	.word	0x080099a4

080088e0 <std>:
 80088e0:	2300      	movs	r3, #0
 80088e2:	b510      	push	{r4, lr}
 80088e4:	4604      	mov	r4, r0
 80088e6:	e9c0 3300 	strd	r3, r3, [r0]
 80088ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088ee:	6083      	str	r3, [r0, #8]
 80088f0:	8181      	strh	r1, [r0, #12]
 80088f2:	6643      	str	r3, [r0, #100]	; 0x64
 80088f4:	81c2      	strh	r2, [r0, #14]
 80088f6:	6183      	str	r3, [r0, #24]
 80088f8:	4619      	mov	r1, r3
 80088fa:	2208      	movs	r2, #8
 80088fc:	305c      	adds	r0, #92	; 0x5c
 80088fe:	f7fb fe0f 	bl	8004520 <memset>
 8008902:	4b05      	ldr	r3, [pc, #20]	; (8008918 <std+0x38>)
 8008904:	6224      	str	r4, [r4, #32]
 8008906:	6263      	str	r3, [r4, #36]	; 0x24
 8008908:	4b04      	ldr	r3, [pc, #16]	; (800891c <std+0x3c>)
 800890a:	62a3      	str	r3, [r4, #40]	; 0x28
 800890c:	4b04      	ldr	r3, [pc, #16]	; (8008920 <std+0x40>)
 800890e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008910:	4b04      	ldr	r3, [pc, #16]	; (8008924 <std+0x44>)
 8008912:	6323      	str	r3, [r4, #48]	; 0x30
 8008914:	bd10      	pop	{r4, pc}
 8008916:	bf00      	nop
 8008918:	08008c35 	.word	0x08008c35
 800891c:	08008c57 	.word	0x08008c57
 8008920:	08008c8f 	.word	0x08008c8f
 8008924:	08008cb3 	.word	0x08008cb3

08008928 <_cleanup_r>:
 8008928:	4901      	ldr	r1, [pc, #4]	; (8008930 <_cleanup_r+0x8>)
 800892a:	f000 b8af 	b.w	8008a8c <_fwalk_reent>
 800892e:	bf00      	nop
 8008930:	08008869 	.word	0x08008869

08008934 <__sfmoreglue>:
 8008934:	2268      	movs	r2, #104	; 0x68
 8008936:	b570      	push	{r4, r5, r6, lr}
 8008938:	1e4d      	subs	r5, r1, #1
 800893a:	4355      	muls	r5, r2
 800893c:	460e      	mov	r6, r1
 800893e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008942:	f7ff fa63 	bl	8007e0c <_malloc_r>
 8008946:	4604      	mov	r4, r0
 8008948:	b140      	cbz	r0, 800895c <__sfmoreglue+0x28>
 800894a:	2100      	movs	r1, #0
 800894c:	e9c0 1600 	strd	r1, r6, [r0]
 8008950:	300c      	adds	r0, #12
 8008952:	60a0      	str	r0, [r4, #8]
 8008954:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008958:	f7fb fde2 	bl	8004520 <memset>
 800895c:	4620      	mov	r0, r4
 800895e:	bd70      	pop	{r4, r5, r6, pc}

08008960 <__sfp_lock_acquire>:
 8008960:	4801      	ldr	r0, [pc, #4]	; (8008968 <__sfp_lock_acquire+0x8>)
 8008962:	f000 b8b3 	b.w	8008acc <__retarget_lock_acquire_recursive>
 8008966:	bf00      	nop
 8008968:	2000071d 	.word	0x2000071d

0800896c <__sfp_lock_release>:
 800896c:	4801      	ldr	r0, [pc, #4]	; (8008974 <__sfp_lock_release+0x8>)
 800896e:	f000 b8ae 	b.w	8008ace <__retarget_lock_release_recursive>
 8008972:	bf00      	nop
 8008974:	2000071d 	.word	0x2000071d

08008978 <__sinit_lock_acquire>:
 8008978:	4801      	ldr	r0, [pc, #4]	; (8008980 <__sinit_lock_acquire+0x8>)
 800897a:	f000 b8a7 	b.w	8008acc <__retarget_lock_acquire_recursive>
 800897e:	bf00      	nop
 8008980:	2000071e 	.word	0x2000071e

08008984 <__sinit_lock_release>:
 8008984:	4801      	ldr	r0, [pc, #4]	; (800898c <__sinit_lock_release+0x8>)
 8008986:	f000 b8a2 	b.w	8008ace <__retarget_lock_release_recursive>
 800898a:	bf00      	nop
 800898c:	2000071e 	.word	0x2000071e

08008990 <__sinit>:
 8008990:	b510      	push	{r4, lr}
 8008992:	4604      	mov	r4, r0
 8008994:	f7ff fff0 	bl	8008978 <__sinit_lock_acquire>
 8008998:	69a3      	ldr	r3, [r4, #24]
 800899a:	b11b      	cbz	r3, 80089a4 <__sinit+0x14>
 800899c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089a0:	f7ff bff0 	b.w	8008984 <__sinit_lock_release>
 80089a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80089a8:	6523      	str	r3, [r4, #80]	; 0x50
 80089aa:	4b13      	ldr	r3, [pc, #76]	; (80089f8 <__sinit+0x68>)
 80089ac:	4a13      	ldr	r2, [pc, #76]	; (80089fc <__sinit+0x6c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80089b2:	42a3      	cmp	r3, r4
 80089b4:	bf08      	it	eq
 80089b6:	2301      	moveq	r3, #1
 80089b8:	4620      	mov	r0, r4
 80089ba:	bf08      	it	eq
 80089bc:	61a3      	streq	r3, [r4, #24]
 80089be:	f000 f81f 	bl	8008a00 <__sfp>
 80089c2:	6060      	str	r0, [r4, #4]
 80089c4:	4620      	mov	r0, r4
 80089c6:	f000 f81b 	bl	8008a00 <__sfp>
 80089ca:	60a0      	str	r0, [r4, #8]
 80089cc:	4620      	mov	r0, r4
 80089ce:	f000 f817 	bl	8008a00 <__sfp>
 80089d2:	2200      	movs	r2, #0
 80089d4:	2104      	movs	r1, #4
 80089d6:	60e0      	str	r0, [r4, #12]
 80089d8:	6860      	ldr	r0, [r4, #4]
 80089da:	f7ff ff81 	bl	80088e0 <std>
 80089de:	2201      	movs	r2, #1
 80089e0:	2109      	movs	r1, #9
 80089e2:	68a0      	ldr	r0, [r4, #8]
 80089e4:	f7ff ff7c 	bl	80088e0 <std>
 80089e8:	2202      	movs	r2, #2
 80089ea:	2112      	movs	r1, #18
 80089ec:	68e0      	ldr	r0, [r4, #12]
 80089ee:	f7ff ff77 	bl	80088e0 <std>
 80089f2:	2301      	movs	r3, #1
 80089f4:	61a3      	str	r3, [r4, #24]
 80089f6:	e7d1      	b.n	800899c <__sinit+0xc>
 80089f8:	08009560 	.word	0x08009560
 80089fc:	08008929 	.word	0x08008929

08008a00 <__sfp>:
 8008a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a02:	4607      	mov	r7, r0
 8008a04:	f7ff ffac 	bl	8008960 <__sfp_lock_acquire>
 8008a08:	4b1e      	ldr	r3, [pc, #120]	; (8008a84 <__sfp+0x84>)
 8008a0a:	681e      	ldr	r6, [r3, #0]
 8008a0c:	69b3      	ldr	r3, [r6, #24]
 8008a0e:	b913      	cbnz	r3, 8008a16 <__sfp+0x16>
 8008a10:	4630      	mov	r0, r6
 8008a12:	f7ff ffbd 	bl	8008990 <__sinit>
 8008a16:	3648      	adds	r6, #72	; 0x48
 8008a18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	d503      	bpl.n	8008a28 <__sfp+0x28>
 8008a20:	6833      	ldr	r3, [r6, #0]
 8008a22:	b30b      	cbz	r3, 8008a68 <__sfp+0x68>
 8008a24:	6836      	ldr	r6, [r6, #0]
 8008a26:	e7f7      	b.n	8008a18 <__sfp+0x18>
 8008a28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a2c:	b9d5      	cbnz	r5, 8008a64 <__sfp+0x64>
 8008a2e:	4b16      	ldr	r3, [pc, #88]	; (8008a88 <__sfp+0x88>)
 8008a30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a34:	60e3      	str	r3, [r4, #12]
 8008a36:	6665      	str	r5, [r4, #100]	; 0x64
 8008a38:	f000 f847 	bl	8008aca <__retarget_lock_init_recursive>
 8008a3c:	f7ff ff96 	bl	800896c <__sfp_lock_release>
 8008a40:	2208      	movs	r2, #8
 8008a42:	4629      	mov	r1, r5
 8008a44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a4c:	6025      	str	r5, [r4, #0]
 8008a4e:	61a5      	str	r5, [r4, #24]
 8008a50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a54:	f7fb fd64 	bl	8004520 <memset>
 8008a58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a60:	4620      	mov	r0, r4
 8008a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a64:	3468      	adds	r4, #104	; 0x68
 8008a66:	e7d9      	b.n	8008a1c <__sfp+0x1c>
 8008a68:	2104      	movs	r1, #4
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	f7ff ff62 	bl	8008934 <__sfmoreglue>
 8008a70:	4604      	mov	r4, r0
 8008a72:	6030      	str	r0, [r6, #0]
 8008a74:	2800      	cmp	r0, #0
 8008a76:	d1d5      	bne.n	8008a24 <__sfp+0x24>
 8008a78:	f7ff ff78 	bl	800896c <__sfp_lock_release>
 8008a7c:	230c      	movs	r3, #12
 8008a7e:	603b      	str	r3, [r7, #0]
 8008a80:	e7ee      	b.n	8008a60 <__sfp+0x60>
 8008a82:	bf00      	nop
 8008a84:	08009560 	.word	0x08009560
 8008a88:	ffff0001 	.word	0xffff0001

08008a8c <_fwalk_reent>:
 8008a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a90:	4606      	mov	r6, r0
 8008a92:	4688      	mov	r8, r1
 8008a94:	2700      	movs	r7, #0
 8008a96:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a9e:	f1b9 0901 	subs.w	r9, r9, #1
 8008aa2:	d505      	bpl.n	8008ab0 <_fwalk_reent+0x24>
 8008aa4:	6824      	ldr	r4, [r4, #0]
 8008aa6:	2c00      	cmp	r4, #0
 8008aa8:	d1f7      	bne.n	8008a9a <_fwalk_reent+0xe>
 8008aaa:	4638      	mov	r0, r7
 8008aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ab0:	89ab      	ldrh	r3, [r5, #12]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d907      	bls.n	8008ac6 <_fwalk_reent+0x3a>
 8008ab6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008aba:	3301      	adds	r3, #1
 8008abc:	d003      	beq.n	8008ac6 <_fwalk_reent+0x3a>
 8008abe:	4629      	mov	r1, r5
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	47c0      	blx	r8
 8008ac4:	4307      	orrs	r7, r0
 8008ac6:	3568      	adds	r5, #104	; 0x68
 8008ac8:	e7e9      	b.n	8008a9e <_fwalk_reent+0x12>

08008aca <__retarget_lock_init_recursive>:
 8008aca:	4770      	bx	lr

08008acc <__retarget_lock_acquire_recursive>:
 8008acc:	4770      	bx	lr

08008ace <__retarget_lock_release_recursive>:
 8008ace:	4770      	bx	lr

08008ad0 <__swhatbuf_r>:
 8008ad0:	b570      	push	{r4, r5, r6, lr}
 8008ad2:	460e      	mov	r6, r1
 8008ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ad8:	4614      	mov	r4, r2
 8008ada:	2900      	cmp	r1, #0
 8008adc:	461d      	mov	r5, r3
 8008ade:	b096      	sub	sp, #88	; 0x58
 8008ae0:	da08      	bge.n	8008af4 <__swhatbuf_r+0x24>
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ae8:	602a      	str	r2, [r5, #0]
 8008aea:	061a      	lsls	r2, r3, #24
 8008aec:	d410      	bmi.n	8008b10 <__swhatbuf_r+0x40>
 8008aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008af2:	e00e      	b.n	8008b12 <__swhatbuf_r+0x42>
 8008af4:	466a      	mov	r2, sp
 8008af6:	f000 f903 	bl	8008d00 <_fstat_r>
 8008afa:	2800      	cmp	r0, #0
 8008afc:	dbf1      	blt.n	8008ae2 <__swhatbuf_r+0x12>
 8008afe:	9a01      	ldr	r2, [sp, #4]
 8008b00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b08:	425a      	negs	r2, r3
 8008b0a:	415a      	adcs	r2, r3
 8008b0c:	602a      	str	r2, [r5, #0]
 8008b0e:	e7ee      	b.n	8008aee <__swhatbuf_r+0x1e>
 8008b10:	2340      	movs	r3, #64	; 0x40
 8008b12:	2000      	movs	r0, #0
 8008b14:	6023      	str	r3, [r4, #0]
 8008b16:	b016      	add	sp, #88	; 0x58
 8008b18:	bd70      	pop	{r4, r5, r6, pc}
	...

08008b1c <__smakebuf_r>:
 8008b1c:	898b      	ldrh	r3, [r1, #12]
 8008b1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b20:	079d      	lsls	r5, r3, #30
 8008b22:	4606      	mov	r6, r0
 8008b24:	460c      	mov	r4, r1
 8008b26:	d507      	bpl.n	8008b38 <__smakebuf_r+0x1c>
 8008b28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	6123      	str	r3, [r4, #16]
 8008b30:	2301      	movs	r3, #1
 8008b32:	6163      	str	r3, [r4, #20]
 8008b34:	b002      	add	sp, #8
 8008b36:	bd70      	pop	{r4, r5, r6, pc}
 8008b38:	466a      	mov	r2, sp
 8008b3a:	ab01      	add	r3, sp, #4
 8008b3c:	f7ff ffc8 	bl	8008ad0 <__swhatbuf_r>
 8008b40:	9900      	ldr	r1, [sp, #0]
 8008b42:	4605      	mov	r5, r0
 8008b44:	4630      	mov	r0, r6
 8008b46:	f7ff f961 	bl	8007e0c <_malloc_r>
 8008b4a:	b948      	cbnz	r0, 8008b60 <__smakebuf_r+0x44>
 8008b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b50:	059a      	lsls	r2, r3, #22
 8008b52:	d4ef      	bmi.n	8008b34 <__smakebuf_r+0x18>
 8008b54:	f023 0303 	bic.w	r3, r3, #3
 8008b58:	f043 0302 	orr.w	r3, r3, #2
 8008b5c:	81a3      	strh	r3, [r4, #12]
 8008b5e:	e7e3      	b.n	8008b28 <__smakebuf_r+0xc>
 8008b60:	4b0d      	ldr	r3, [pc, #52]	; (8008b98 <__smakebuf_r+0x7c>)
 8008b62:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	6020      	str	r0, [r4, #0]
 8008b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b6c:	81a3      	strh	r3, [r4, #12]
 8008b6e:	9b00      	ldr	r3, [sp, #0]
 8008b70:	6120      	str	r0, [r4, #16]
 8008b72:	6163      	str	r3, [r4, #20]
 8008b74:	9b01      	ldr	r3, [sp, #4]
 8008b76:	b15b      	cbz	r3, 8008b90 <__smakebuf_r+0x74>
 8008b78:	4630      	mov	r0, r6
 8008b7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b7e:	f000 f8d1 	bl	8008d24 <_isatty_r>
 8008b82:	b128      	cbz	r0, 8008b90 <__smakebuf_r+0x74>
 8008b84:	89a3      	ldrh	r3, [r4, #12]
 8008b86:	f023 0303 	bic.w	r3, r3, #3
 8008b8a:	f043 0301 	orr.w	r3, r3, #1
 8008b8e:	81a3      	strh	r3, [r4, #12]
 8008b90:	89a0      	ldrh	r0, [r4, #12]
 8008b92:	4305      	orrs	r5, r0
 8008b94:	81a5      	strh	r5, [r4, #12]
 8008b96:	e7cd      	b.n	8008b34 <__smakebuf_r+0x18>
 8008b98:	08008929 	.word	0x08008929

08008b9c <_malloc_usable_size_r>:
 8008b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ba0:	1f18      	subs	r0, r3, #4
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	bfbc      	itt	lt
 8008ba6:	580b      	ldrlt	r3, [r1, r0]
 8008ba8:	18c0      	addlt	r0, r0, r3
 8008baa:	4770      	bx	lr

08008bac <_raise_r>:
 8008bac:	291f      	cmp	r1, #31
 8008bae:	b538      	push	{r3, r4, r5, lr}
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	460d      	mov	r5, r1
 8008bb4:	d904      	bls.n	8008bc0 <_raise_r+0x14>
 8008bb6:	2316      	movs	r3, #22
 8008bb8:	6003      	str	r3, [r0, #0]
 8008bba:	f04f 30ff 	mov.w	r0, #4294967295
 8008bbe:	bd38      	pop	{r3, r4, r5, pc}
 8008bc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008bc2:	b112      	cbz	r2, 8008bca <_raise_r+0x1e>
 8008bc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bc8:	b94b      	cbnz	r3, 8008bde <_raise_r+0x32>
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f000 f830 	bl	8008c30 <_getpid_r>
 8008bd0:	462a      	mov	r2, r5
 8008bd2:	4601      	mov	r1, r0
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bda:	f000 b817 	b.w	8008c0c <_kill_r>
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d00a      	beq.n	8008bf8 <_raise_r+0x4c>
 8008be2:	1c59      	adds	r1, r3, #1
 8008be4:	d103      	bne.n	8008bee <_raise_r+0x42>
 8008be6:	2316      	movs	r3, #22
 8008be8:	6003      	str	r3, [r0, #0]
 8008bea:	2001      	movs	r0, #1
 8008bec:	e7e7      	b.n	8008bbe <_raise_r+0x12>
 8008bee:	2400      	movs	r4, #0
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008bf6:	4798      	blx	r3
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	e7e0      	b.n	8008bbe <_raise_r+0x12>

08008bfc <raise>:
 8008bfc:	4b02      	ldr	r3, [pc, #8]	; (8008c08 <raise+0xc>)
 8008bfe:	4601      	mov	r1, r0
 8008c00:	6818      	ldr	r0, [r3, #0]
 8008c02:	f7ff bfd3 	b.w	8008bac <_raise_r>
 8008c06:	bf00      	nop
 8008c08:	20000014 	.word	0x20000014

08008c0c <_kill_r>:
 8008c0c:	b538      	push	{r3, r4, r5, lr}
 8008c0e:	2300      	movs	r3, #0
 8008c10:	4d06      	ldr	r5, [pc, #24]	; (8008c2c <_kill_r+0x20>)
 8008c12:	4604      	mov	r4, r0
 8008c14:	4608      	mov	r0, r1
 8008c16:	4611      	mov	r1, r2
 8008c18:	602b      	str	r3, [r5, #0]
 8008c1a:	f7f8 ff52 	bl	8001ac2 <_kill>
 8008c1e:	1c43      	adds	r3, r0, #1
 8008c20:	d102      	bne.n	8008c28 <_kill_r+0x1c>
 8008c22:	682b      	ldr	r3, [r5, #0]
 8008c24:	b103      	cbz	r3, 8008c28 <_kill_r+0x1c>
 8008c26:	6023      	str	r3, [r4, #0]
 8008c28:	bd38      	pop	{r3, r4, r5, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20000718 	.word	0x20000718

08008c30 <_getpid_r>:
 8008c30:	f7f8 bf40 	b.w	8001ab4 <_getpid>

08008c34 <__sread>:
 8008c34:	b510      	push	{r4, lr}
 8008c36:	460c      	mov	r4, r1
 8008c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c3c:	f000 f894 	bl	8008d68 <_read_r>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	bfab      	itete	ge
 8008c44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c46:	89a3      	ldrhlt	r3, [r4, #12]
 8008c48:	181b      	addge	r3, r3, r0
 8008c4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c4e:	bfac      	ite	ge
 8008c50:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c52:	81a3      	strhlt	r3, [r4, #12]
 8008c54:	bd10      	pop	{r4, pc}

08008c56 <__swrite>:
 8008c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c5a:	461f      	mov	r7, r3
 8008c5c:	898b      	ldrh	r3, [r1, #12]
 8008c5e:	4605      	mov	r5, r0
 8008c60:	05db      	lsls	r3, r3, #23
 8008c62:	460c      	mov	r4, r1
 8008c64:	4616      	mov	r6, r2
 8008c66:	d505      	bpl.n	8008c74 <__swrite+0x1e>
 8008c68:	2302      	movs	r3, #2
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c70:	f000 f868 	bl	8008d44 <_lseek_r>
 8008c74:	89a3      	ldrh	r3, [r4, #12]
 8008c76:	4632      	mov	r2, r6
 8008c78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c7c:	81a3      	strh	r3, [r4, #12]
 8008c7e:	4628      	mov	r0, r5
 8008c80:	463b      	mov	r3, r7
 8008c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c8a:	f000 b817 	b.w	8008cbc <_write_r>

08008c8e <__sseek>:
 8008c8e:	b510      	push	{r4, lr}
 8008c90:	460c      	mov	r4, r1
 8008c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c96:	f000 f855 	bl	8008d44 <_lseek_r>
 8008c9a:	1c43      	adds	r3, r0, #1
 8008c9c:	89a3      	ldrh	r3, [r4, #12]
 8008c9e:	bf15      	itete	ne
 8008ca0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ca2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ca6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008caa:	81a3      	strheq	r3, [r4, #12]
 8008cac:	bf18      	it	ne
 8008cae:	81a3      	strhne	r3, [r4, #12]
 8008cb0:	bd10      	pop	{r4, pc}

08008cb2 <__sclose>:
 8008cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cb6:	f000 b813 	b.w	8008ce0 <_close_r>
	...

08008cbc <_write_r>:
 8008cbc:	b538      	push	{r3, r4, r5, lr}
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	4608      	mov	r0, r1
 8008cc2:	4611      	mov	r1, r2
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	4d05      	ldr	r5, [pc, #20]	; (8008cdc <_write_r+0x20>)
 8008cc8:	602a      	str	r2, [r5, #0]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	f7f8 ff30 	bl	8001b30 <_write>
 8008cd0:	1c43      	adds	r3, r0, #1
 8008cd2:	d102      	bne.n	8008cda <_write_r+0x1e>
 8008cd4:	682b      	ldr	r3, [r5, #0]
 8008cd6:	b103      	cbz	r3, 8008cda <_write_r+0x1e>
 8008cd8:	6023      	str	r3, [r4, #0]
 8008cda:	bd38      	pop	{r3, r4, r5, pc}
 8008cdc:	20000718 	.word	0x20000718

08008ce0 <_close_r>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	4d05      	ldr	r5, [pc, #20]	; (8008cfc <_close_r+0x1c>)
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	4608      	mov	r0, r1
 8008cea:	602b      	str	r3, [r5, #0]
 8008cec:	f7f8 ff3c 	bl	8001b68 <_close>
 8008cf0:	1c43      	adds	r3, r0, #1
 8008cf2:	d102      	bne.n	8008cfa <_close_r+0x1a>
 8008cf4:	682b      	ldr	r3, [r5, #0]
 8008cf6:	b103      	cbz	r3, 8008cfa <_close_r+0x1a>
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	bd38      	pop	{r3, r4, r5, pc}
 8008cfc:	20000718 	.word	0x20000718

08008d00 <_fstat_r>:
 8008d00:	b538      	push	{r3, r4, r5, lr}
 8008d02:	2300      	movs	r3, #0
 8008d04:	4d06      	ldr	r5, [pc, #24]	; (8008d20 <_fstat_r+0x20>)
 8008d06:	4604      	mov	r4, r0
 8008d08:	4608      	mov	r0, r1
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	602b      	str	r3, [r5, #0]
 8008d0e:	f7f8 ff36 	bl	8001b7e <_fstat>
 8008d12:	1c43      	adds	r3, r0, #1
 8008d14:	d102      	bne.n	8008d1c <_fstat_r+0x1c>
 8008d16:	682b      	ldr	r3, [r5, #0]
 8008d18:	b103      	cbz	r3, 8008d1c <_fstat_r+0x1c>
 8008d1a:	6023      	str	r3, [r4, #0]
 8008d1c:	bd38      	pop	{r3, r4, r5, pc}
 8008d1e:	bf00      	nop
 8008d20:	20000718 	.word	0x20000718

08008d24 <_isatty_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	2300      	movs	r3, #0
 8008d28:	4d05      	ldr	r5, [pc, #20]	; (8008d40 <_isatty_r+0x1c>)
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	602b      	str	r3, [r5, #0]
 8008d30:	f7f8 ff34 	bl	8001b9c <_isatty>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_isatty_r+0x1a>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_isatty_r+0x1a>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	20000718 	.word	0x20000718

08008d44 <_lseek_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	4604      	mov	r4, r0
 8008d48:	4608      	mov	r0, r1
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	4d05      	ldr	r5, [pc, #20]	; (8008d64 <_lseek_r+0x20>)
 8008d50:	602a      	str	r2, [r5, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	f7f8 ff2c 	bl	8001bb0 <_lseek>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d102      	bne.n	8008d62 <_lseek_r+0x1e>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	b103      	cbz	r3, 8008d62 <_lseek_r+0x1e>
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
 8008d64:	20000718 	.word	0x20000718

08008d68 <_read_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	4608      	mov	r0, r1
 8008d6e:	4611      	mov	r1, r2
 8008d70:	2200      	movs	r2, #0
 8008d72:	4d05      	ldr	r5, [pc, #20]	; (8008d88 <_read_r+0x20>)
 8008d74:	602a      	str	r2, [r5, #0]
 8008d76:	461a      	mov	r2, r3
 8008d78:	f7f8 febd 	bl	8001af6 <_read>
 8008d7c:	1c43      	adds	r3, r0, #1
 8008d7e:	d102      	bne.n	8008d86 <_read_r+0x1e>
 8008d80:	682b      	ldr	r3, [r5, #0]
 8008d82:	b103      	cbz	r3, 8008d86 <_read_r+0x1e>
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	20000718 	.word	0x20000718

08008d8c <_init>:
 8008d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8e:	bf00      	nop
 8008d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d92:	bc08      	pop	{r3}
 8008d94:	469e      	mov	lr, r3
 8008d96:	4770      	bx	lr

08008d98 <_fini>:
 8008d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9a:	bf00      	nop
 8008d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d9e:	bc08      	pop	{r3}
 8008da0:	469e      	mov	lr, r3
 8008da2:	4770      	bx	lr

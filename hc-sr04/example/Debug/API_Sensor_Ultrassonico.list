
API_Sensor_Ultrassonico.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000943c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c6c  08009550  08009550  00019550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1bc  0800a1bc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a1bc  0800a1bc  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a1bc  0800a1bc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1bc  0800a1bc  0001a1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1c0  0800a1c0  0001a1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a1c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  200001e8  0800a3ac  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  0800a3ac  0002072c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7a2  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000212b  00000000  00000000  0002d9b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  0002fae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00030920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c8b  00000000  00000000  00031680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb7b  00000000  00000000  0004a30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c317  00000000  00000000  00059e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e619d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005214  00000000  00000000  000e61f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009534 	.word	0x08009534

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08009534 	.word	0x08009534

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4605      	mov	r5, r0
 8001114:	460c      	mov	r4, r1
 8001116:	2200      	movs	r2, #0
 8001118:	2300      	movs	r3, #0
 800111a:	4628      	mov	r0, r5
 800111c:	4621      	mov	r1, r4
 800111e:	f7ff fc4d 	bl	80009bc <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff f9c3 	bl	80004d8 <__aeabi_dmul>
 8001152:	f7ff fc99 	bl	8000a88 <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff f944 	bl	80003e4 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff f9ba 	bl	80004d8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7fe fffc 	bl	8000168 <__aeabi_dsub>
 8001170:	f7ff fc8a 	bl	8000a88 <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <Medir_Distancia_CM>:
float Distancia  = 0;								//Variável que indica a distância
float Distancia_Real  = 0;							//Variável que indica a distância após a inclusão do erro de medição
float erro = 0;										//Variável que nos diz o quanto o sensor está errando

//Vai retornar a distância medida em centímetros
float Medir_Distancia_CM(void){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, Trigger_Pin, 1); 		// Para acionar o sensor se deve gerar um pulso de duração de 10uS no pino Trigger
 8001186:	2201      	movs	r2, #1
 8001188:	2101      	movs	r1, #1
 800118a:	4815      	ldr	r0, [pc, #84]	; (80011e0 <Medir_Distancia_CM+0x60>)
 800118c:	f001 fc68 	bl	8002a60 <HAL_GPIO_WritePin>
	for(int x = 0; x < 40; ++x){} 					//delay de 10uS (O clock funciona a 40Mhz)
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	e002      	b.n	800119c <Medir_Distancia_CM+0x1c>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3301      	adds	r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b27      	cmp	r3, #39	; 0x27
 80011a0:	ddf9      	ble.n	8001196 <Medir_Distancia_CM+0x16>
	HAL_GPIO_WritePin(GPIOC, Trigger_Pin, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2101      	movs	r1, #1
 80011a6:	480e      	ldr	r0, [pc, #56]	; (80011e0 <Medir_Distancia_CM+0x60>)
 80011a8:	f001 fc5a 	bl	8002a60 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);		//Habilita a interrupção para o timer 1, irá permitir a leitura da subida do Echo
 80011ac:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <Medir_Distancia_CM+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	68da      	ldr	r2, [r3, #12]
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <Medir_Distancia_CM+0x64>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 0202 	orr.w	r2, r2, #2
 80011ba:	60da      	str	r2, [r3, #12]
	Distancia_Real = Distancia + erro;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <Medir_Distancia_CM+0x68>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <Medir_Distancia_CM+0x6c>)
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fcd4 	bl	8000b74 <__addsf3>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <Medir_Distancia_CM+0x70>)
 80011d2:	601a      	str	r2, [r3, #0]
	return Distancia_Real;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <Medir_Distancia_CM+0x70>)
 80011d6:	681b      	ldr	r3, [r3, #0]

}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40011000 	.word	0x40011000
 80011e4:	20000274 	.word	0x20000274
 80011e8:	20000214 	.word	0x20000214
 80011ec:	2000021c 	.word	0x2000021c
 80011f0:	20000218 	.word	0x20000218

080011f4 <retornar_erro>:

float retornar_erro(){
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
	return erro;
 80011f8:	4b02      	ldr	r3, [pc, #8]	; (8001204 <retornar_erro+0x10>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	2000021c 	.word	0x2000021c

08001208 <Medir_Distancia_INCH>:

//Vai retornar a distância em polegadas
float Medir_Distancia_INCH(void){
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, Trigger_Pin, 1); 			// Para acionar o sensor se deve gerar um pulso de duração de 10uS no pino Trigger
 800120e:	2201      	movs	r2, #1
 8001210:	2101      	movs	r1, #1
 8001212:	481f      	ldr	r0, [pc, #124]	; (8001290 <Medir_Distancia_INCH+0x88>)
 8001214:	f001 fc24 	bl	8002a60 <HAL_GPIO_WritePin>
	for(int x = 0; x < 40; ++x){} 						//delay de 10uS (O clock funciona a 40Mhz)
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	e002      	b.n	8001224 <Medir_Distancia_INCH+0x1c>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3301      	adds	r3, #1
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b27      	cmp	r3, #39	; 0x27
 8001228:	ddf9      	ble.n	800121e <Medir_Distancia_INCH+0x16>
	HAL_GPIO_WritePin(GPIOC, Trigger_Pin, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2101      	movs	r1, #1
 800122e:	4818      	ldr	r0, [pc, #96]	; (8001290 <Medir_Distancia_INCH+0x88>)
 8001230:	f001 fc16 	bl	8002a60 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1); 			//Habilita a interrupção para o timer 1, irá permitir a leitura da subida do Echo
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <Medir_Distancia_INCH+0x8c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <Medir_Distancia_INCH+0x8c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0202 	orr.w	r2, r2, #2
 8001242:	60da      	str	r2, [r3, #12]
	Distancia_Real = Distancia + erro;
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <Medir_Distancia_INCH+0x90>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <Medir_Distancia_INCH+0x94>)
 800124a:	6812      	ldr	r2, [r2, #0]
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fc90 	bl	8000b74 <__addsf3>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <Medir_Distancia_INCH+0x98>)
 800125a:	601a      	str	r2, [r3, #0]
	return Distancia_Real/2.54; 						//Conversão para polegadas
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <Medir_Distancia_INCH+0x98>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f8e1 	bl	8000428 <__aeabi_f2d>
 8001266:	a308      	add	r3, pc, #32	; (adr r3, 8001288 <Medir_Distancia_INCH+0x80>)
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	f7ff fa5e 	bl	800072c <__aeabi_ddiv>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff fc26 	bl	8000ac8 <__aeabi_d2f>
 800127c:	4603      	mov	r3, r0

}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	851eb852 	.word	0x851eb852
 800128c:	400451eb 	.word	0x400451eb
 8001290:	40011000 	.word	0x40011000
 8001294:	20000274 	.word	0x20000274
 8001298:	20000214 	.word	0x20000214
 800129c:	2000021c 	.word	0x2000021c
 80012a0:	20000218 	.word	0x20000218

080012a4 <Calibracao>:


//Função para calibração do sensor
void Calibracao(float dist){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	//O LED1 irá piscar para indicar o começo da amostragem
	while(calibrar == 0){
 80012ac:	e00f      	b.n	80012ce <Calibracao+0x2a>
	HAL_GPIO_WritePin(GPIOC, LED_1_Pin, 1);
 80012ae:	2201      	movs	r2, #1
 80012b0:	2102      	movs	r1, #2
 80012b2:	4826      	ldr	r0, [pc, #152]	; (800134c <Calibracao+0xa8>)
 80012b4:	f001 fbd4 	bl	8002a60 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80012b8:	20c8      	movs	r0, #200	; 0xc8
 80012ba:	f001 f91b 	bl	80024f4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LED_1_Pin, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2102      	movs	r1, #2
 80012c2:	4822      	ldr	r0, [pc, #136]	; (800134c <Calibracao+0xa8>)
 80012c4:	f001 fbcc 	bl	8002a60 <HAL_GPIO_WritePin>
	HAL_Delay(200);}
 80012c8:	20c8      	movs	r0, #200	; 0xc8
 80012ca:	f001 f913 	bl	80024f4 <HAL_Delay>
	while(calibrar == 0){
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <Calibracao+0xac>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0eb      	beq.n	80012ae <Calibracao+0xa>
	int amostras = 100;
 80012d6:	2364      	movs	r3, #100	; 0x64
 80012d8:	60fb      	str	r3, [r7, #12]
	float medicao = 0;
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
	//o loop serve para realizar 100 amostras da distância
    for(int a = 0; a < amostras; ++a){
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	e013      	b.n	800130e <Calibracao+0x6a>
        medicao += dist - Medir_Distancia_CM();
 80012e6:	f7ff ff4b 	bl	8001180 <Medir_Distancia_CM>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4619      	mov	r1, r3
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fc3e 	bl	8000b70 <__aeabi_fsub>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4619      	mov	r1, r3
 80012f8:	6978      	ldr	r0, [r7, #20]
 80012fa:	f7ff fc3b 	bl	8000b74 <__addsf3>
 80012fe:	4603      	mov	r3, r0
 8001300:	617b      	str	r3, [r7, #20]
        HAL_Delay(60);
 8001302:	203c      	movs	r0, #60	; 0x3c
 8001304:	f001 f8f6 	bl	80024f4 <HAL_Delay>
    for(int a = 0; a < amostras; ++a){
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	3301      	adds	r3, #1
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	429a      	cmp	r2, r3
 8001314:	dbe7      	blt.n	80012e6 <Calibracao+0x42>
    }
    erro = medicao/amostras;
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f7ff fce0 	bl	8000cdc <__aeabi_i2f>
 800131c:	4603      	mov	r3, r0
 800131e:	4619      	mov	r1, r3
 8001320:	6978      	ldr	r0, [r7, #20]
 8001322:	f7ff fde3 	bl	8000eec <__aeabi_fdiv>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <Calibracao+0xb0>)
 800132c:	601a      	str	r2, [r3, #0]
    //LED1 acende para indicar a finalização da calibração
	HAL_GPIO_WritePin(GPIOC, LED_1_Pin, 1);
 800132e:	2201      	movs	r2, #1
 8001330:	2102      	movs	r1, #2
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <Calibracao+0xa8>)
 8001334:	f001 fb94 	bl	8002a60 <HAL_GPIO_WritePin>
	funcao = 0;
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <Calibracao+0xb4>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
	calibrar = 0;
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <Calibracao+0xac>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
}
 8001344:	bf00      	nop
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40011000 	.word	0x40011000
 8001350:	20000308 	.word	0x20000308
 8001354:	2000021c 	.word	0x2000021c
 8001358:	20000304 	.word	0x20000304

0800135c <Alerta_Distancia>:

//Recebe um valor de distância como parâmetro e quando o objeto estiver em uma distância menor um led irá acender como alerta
void Alerta_Distancia(float dist){
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	float dist_atual = 0;
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
	dist_atual = Medir_Distancia_CM(); 								//Mede a distancia atual
 800136a:	f7ff ff09 	bl	8001180 <Medir_Distancia_CM>
 800136e:	60f8      	str	r0, [r7, #12]
	if (dist_atual < dist) HAL_GPIO_WritePin(GPIOA, LED_2_Pin, 1);  //Condicional para decisão se acende o led ou não
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f7ff fea4 	bl	80010c0 <__aeabi_fcmplt>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <Alerta_Distancia+0x2e>
 800137e:	2201      	movs	r2, #1
 8001380:	2120      	movs	r1, #32
 8001382:	4808      	ldr	r0, [pc, #32]	; (80013a4 <Alerta_Distancia+0x48>)
 8001384:	f001 fb6c 	bl	8002a60 <HAL_GPIO_WritePin>
 8001388:	e004      	b.n	8001394 <Alerta_Distancia+0x38>
	else HAL_GPIO_WritePin(GPIOA, LED_2_Pin, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2120      	movs	r1, #32
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <Alerta_Distancia+0x48>)
 8001390:	f001 fb66 	bl	8002a60 <HAL_GPIO_WritePin>
	HAL_Delay(60); 													//delay de 60ms indicado pelo fabricante do sensor entre uma medição e outra
 8001394:	203c      	movs	r0, #60	; 0x3c
 8001396:	f001 f8ad 	bl	80024f4 <HAL_Delay>
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40010800 	.word	0x40010800

080013a8 <HAL_TIM_IC_CaptureCallback>:


//Esta função serve para capturar o tempo de que Echo fica em nível lógico alto
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7f1b      	ldrb	r3, [r3, #28]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	f040 80a1 	bne.w	80014fc <HAL_TIM_IC_CaptureCallback+0x154>
	{
		if (Primeira_Captura==0) 						//Se a variavel for igual a zero significa que o sinal subiu para nivel lógico alto
 80013ba:	4b55      	ldr	r3, [pc, #340]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x168>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d11e      	bne.n	8001400 <HAL_TIM_IC_CaptureCallback+0x58>
		{
			Time1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); //O momento de subida é armazenado na variavel time1
 80013c2:	2100      	movs	r1, #0
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f003 f951 	bl	800466c <HAL_TIM_ReadCapturedValue>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fc81 	bl	8000cd4 <__aeabi_ui2f>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a4f      	ldr	r2, [pc, #316]	; (8001514 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80013d6:	6013      	str	r3, [r2, #0]
			Primeira_Captura = 1;
 80013d8:	4b4d      	ldr	r3, [pc, #308]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x168>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]


			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING); //Muda a configuração para ler o momento em que o sinal esteja descendo
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6a1a      	ldr	r2, [r3, #32]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 020a 	bic.w	r2, r2, #10
 80013ec:	621a      	str	r2, [r3, #32]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6a1a      	ldr	r2, [r3, #32]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f042 0202 	orr.w	r2, r2, #2
 80013fc:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); //Muda a configuração para ler o momento em que o sinal esteja subindo
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1); //A interrupção é desabilitada para ser chamada apenas quando necessário
		}
	}
}
 80013fe:	e07d      	b.n	80014fc <HAL_TIM_IC_CaptureCallback+0x154>
		else if (Primeira_Captura==1) 					//Se a variavel for igual a 1 significa que o sinal desceu para nivel lógico baixo
 8001400:	4b43      	ldr	r3, [pc, #268]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d179      	bne.n	80014fc <HAL_TIM_IC_CaptureCallback+0x154>
			Time2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);// //O momento de descida é armazenado na variavel time1
 8001408:	2100      	movs	r1, #0
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f003 f92e 	bl	800466c <HAL_TIM_ReadCapturedValue>
 8001410:	4603      	mov	r3, r0
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fc5e 	bl	8000cd4 <__aeabi_ui2f>
 8001418:	4603      	mov	r3, r0
 800141a:	4a3f      	ldr	r2, [pc, #252]	; (8001518 <HAL_TIM_IC_CaptureCallback+0x170>)
 800141c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0); 			//Reinicia o contador do timer1 para zero
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
			if (Time2 > Time1)							// Se time2 for maior que time1 o resultado do tempo é igual a diferenca
 8001426:	4b3c      	ldr	r3, [pc, #240]	; (8001518 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a3a      	ldr	r2, [pc, #232]	; (8001514 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fe63 	bl	80010fc <__aeabi_fcmpgt>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00c      	beq.n	8001456 <HAL_TIM_IC_CaptureCallback+0xae>
				Diferenca = Time2-Time1;
 800143c:	4b36      	ldr	r3, [pc, #216]	; (8001518 <HAL_TIM_IC_CaptureCallback+0x170>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a34      	ldr	r2, [pc, #208]	; (8001514 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fb92 	bl	8000b70 <__aeabi_fsub>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4b32      	ldr	r3, [pc, #200]	; (800151c <HAL_TIM_IC_CaptureCallback+0x174>)
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	e01c      	b.n	8001490 <HAL_TIM_IC_CaptureCallback+0xe8>
			else if (Time1 > Time2)						// Se time1 for maior que time2 significa que o contador ultrapassou seu limite e reiniciou a contagem
 8001456:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a2f      	ldr	r2, [pc, #188]	; (8001518 <HAL_TIM_IC_CaptureCallback+0x170>)
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fe4b 	bl	80010fc <__aeabi_fcmpgt>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d011      	beq.n	8001490 <HAL_TIM_IC_CaptureCallback+0xe8>
				Diferenca = (0xffff - Time1) + Time2;
 800146c:	4b29      	ldr	r3, [pc, #164]	; (8001514 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	482b      	ldr	r0, [pc, #172]	; (8001520 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001474:	f7ff fb7c 	bl	8000b70 <__aeabi_fsub>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_TIM_IC_CaptureCallback+0x170>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	4610      	mov	r0, r2
 8001484:	f7ff fb76 	bl	8000b74 <__addsf3>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	4b23      	ldr	r3, [pc, #140]	; (800151c <HAL_TIM_IC_CaptureCallback+0x174>)
 800148e:	601a      	str	r2, [r3, #0]
			Distancia = Diferenca * 0.034/2;
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <HAL_TIM_IC_CaptureCallback+0x174>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7fe ffc7 	bl	8000428 <__aeabi_f2d>
 800149a:	a31b      	add	r3, pc, #108	; (adr r3, 8001508 <HAL_TIM_IC_CaptureCallback+0x160>)
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	f7ff f81a 	bl	80004d8 <__aeabi_dmul>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014b4:	f7ff f93a 	bl	800072c <__aeabi_ddiv>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f7ff fb02 	bl	8000ac8 <__aeabi_d2f>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4a17      	ldr	r2, [pc, #92]	; (8001524 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80014c8:	6013      	str	r3, [r2, #0]
			Primeira_Captura = 0;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x168>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); //Muda a configuração para ler o momento em que o sinal esteja subindo
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6a1a      	ldr	r2, [r3, #32]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 020a 	bic.w	r2, r2, #10
 80014de:	621a      	str	r2, [r3, #32]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6a12      	ldr	r2, [r2, #32]
 80014ea:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1); //A interrupção é desabilitada para ser chamada apenas quando necessário
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_TIM_IC_CaptureCallback+0x180>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_TIM_IC_CaptureCallback+0x180>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0202 	bic.w	r2, r2, #2
 80014fa:	60da      	str	r2, [r3, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	f3af 8000 	nop.w
 8001508:	b020c49c 	.word	0xb020c49c
 800150c:	3fa16872 	.word	0x3fa16872
 8001510:	20000210 	.word	0x20000210
 8001514:	20000204 	.word	0x20000204
 8001518:	20000208 	.word	0x20000208
 800151c:	2000020c 	.word	0x2000020c
 8001520:	477fff00 	.word	0x477fff00
 8001524:	20000214 	.word	0x20000214
 8001528:	20000274 	.word	0x20000274

0800152c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b094      	sub	sp, #80	; 0x50
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char distancia_cm_str[30];
	char distancia_inch_str[30];
	float distancia_cm = 0;
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	64fb      	str	r3, [r7, #76]	; 0x4c
	float distancia_inch = 0;
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	64bb      	str	r3, [r7, #72]	; 0x48
	float erro = 0;
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	647b      	str	r3, [r7, #68]	; 0x44
	float distancia_limite_cm = 10;
 8001544:	4b3e      	ldr	r3, [pc, #248]	; (8001640 <main+0x114>)
 8001546:	643b      	str	r3, [r7, #64]	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001548:	f000 ff72 	bl	8002430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800154c:	f000 f888 	bl	8001660 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_TIM_Base_Start(&htim3);
 8001550:	483c      	ldr	r0, [pc, #240]	; (8001644 <main+0x118>)
 8001552:	f002 fc83 	bl	8003e5c <HAL_TIM_Base_Start>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001556:	f000 f9b7 	bl	80018c8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800155a:	f000 f8f1 	bl	8001740 <MX_TIM1_Init>
  MX_TIM3_Init();
 800155e:	f000 f965 	bl	800182c <MX_TIM3_Init>
  MX_I2C1_Init();
 8001562:	f000 f8bf 	bl	80016e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8001566:	f000 fa8d 	bl	8001a84 <SSD1306_Init>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800156a:	2100      	movs	r1, #0
 800156c:	4836      	ldr	r0, [pc, #216]	; (8001648 <main+0x11c>)
 800156e:	f002 fd17 	bl	8003fa0 <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
// Este projeto irá chamar uma função da API de acordo com o valor da variável funcao, esta variável varia de acordo com a quantidade de vezes que o botão B2 foi apertado

  {
	  switch (funcao){
 8001572:	4b36      	ldr	r3, [pc, #216]	; (800164c <main+0x120>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b03      	cmp	r3, #3
 8001578:	d05c      	beq.n	8001634 <main+0x108>
 800157a:	2b03      	cmp	r3, #3
 800157c:	dcf9      	bgt.n	8001572 <main+0x46>
 800157e:	2b01      	cmp	r3, #1
 8001580:	d04f      	beq.n	8001622 <main+0xf6>
 8001582:	2b02      	cmp	r3, #2
 8001584:	d052      	beq.n	800162c <main+0x100>
 8001586:	e7f4      	b.n	8001572 <main+0x46>
	  case 1:
		  while(funcao == 1){ // Neste caso ele irá medir a distância em centímetros e polegadas e então printar no display OLED
			  erro = retornar_erro();
 8001588:	f7ff fe34 	bl	80011f4 <retornar_erro>
 800158c:	6478      	str	r0, [r7, #68]	; 0x44
			  distancia_cm = Medir_Distancia_CM();;
 800158e:	f7ff fdf7 	bl	8001180 <Medir_Distancia_CM>
 8001592:	64f8      	str	r0, [r7, #76]	; 0x4c
			  distancia_inch = Medir_Distancia_INCH();
 8001594:	f7ff fe38 	bl	8001208 <Medir_Distancia_INCH>
 8001598:	64b8      	str	r0, [r7, #72]	; 0x48
			  sprintf(distancia_cm_str, "D_cm: %0.2f cm",distancia_cm);
 800159a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800159c:	f7fe ff44 	bl	8000428 <__aeabi_f2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	f107 0020 	add.w	r0, r7, #32
 80015a8:	4929      	ldr	r1, [pc, #164]	; (8001650 <main+0x124>)
 80015aa:	f004 fa05 	bl	80059b8 <siprintf>
			  SSD1306_GotoXY (0,0);
 80015ae:	2100      	movs	r1, #0
 80015b0:	2000      	movs	r0, #0
 80015b2:	f000 fbcf 	bl	8001d54 <SSD1306_GotoXY>
			  SSD1306_Puts (distancia_cm_str, &Font_7x10, 1);
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	2201      	movs	r2, #1
 80015bc:	4925      	ldr	r1, [pc, #148]	; (8001654 <main+0x128>)
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fc5e 	bl	8001e80 <SSD1306_Puts>
			  SSD1306_UpdateScreen(); // update display
 80015c4:	f000 fb22 	bl	8001c0c <SSD1306_UpdateScreen>
			  sprintf(distancia_inch_str, "D_inch: %0.2f inch",distancia_inch);
 80015c8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80015ca:	f7fe ff2d 	bl	8000428 <__aeabi_f2d>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4638      	mov	r0, r7
 80015d4:	4920      	ldr	r1, [pc, #128]	; (8001658 <main+0x12c>)
 80015d6:	f004 f9ef 	bl	80059b8 <siprintf>
			  SSD1306_GotoXY (0,20);
 80015da:	2114      	movs	r1, #20
 80015dc:	2000      	movs	r0, #0
 80015de:	f000 fbb9 	bl	8001d54 <SSD1306_GotoXY>
			  SSD1306_Puts (distancia_inch_str, &Font_7x10, 1);
 80015e2:	463b      	mov	r3, r7
 80015e4:	2201      	movs	r2, #1
 80015e6:	491b      	ldr	r1, [pc, #108]	; (8001654 <main+0x128>)
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 fc49 	bl	8001e80 <SSD1306_Puts>
			  SSD1306_UpdateScreen(); // update display
 80015ee:	f000 fb0d 	bl	8001c0c <SSD1306_UpdateScreen>
			  sprintf(distancia_inch_str, "Erro: %0.4f ",erro);
 80015f2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80015f4:	f7fe ff18 	bl	8000428 <__aeabi_f2d>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4638      	mov	r0, r7
 80015fe:	4917      	ldr	r1, [pc, #92]	; (800165c <main+0x130>)
 8001600:	f004 f9da 	bl	80059b8 <siprintf>
			  SSD1306_GotoXY (0,40);
 8001604:	2128      	movs	r1, #40	; 0x28
 8001606:	2000      	movs	r0, #0
 8001608:	f000 fba4 	bl	8001d54 <SSD1306_GotoXY>
			  SSD1306_Puts (distancia_inch_str, &Font_7x10, 1);
 800160c:	463b      	mov	r3, r7
 800160e:	2201      	movs	r2, #1
 8001610:	4910      	ldr	r1, [pc, #64]	; (8001654 <main+0x128>)
 8001612:	4618      	mov	r0, r3
 8001614:	f000 fc34 	bl	8001e80 <SSD1306_Puts>
			  SSD1306_UpdateScreen(); // update display
 8001618:	f000 faf8 	bl	8001c0c <SSD1306_UpdateScreen>
			  HAL_Delay(60);}
 800161c:	203c      	movs	r0, #60	; 0x3c
 800161e:	f000 ff69 	bl	80024f4 <HAL_Delay>
		  while(funcao == 1){ // Neste caso ele irá medir a distância em centímetros e polegadas e então printar no display OLED
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <main+0x120>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d0ae      	beq.n	8001588 <main+0x5c>
		  break;
 800162a:	e007      	b.n	800163c <main+0x110>

	  case 2:
		  Alerta_Distancia(distancia_limite_cm);
 800162c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800162e:	f7ff fe95 	bl	800135c <Alerta_Distancia>
		  break;
 8001632:	e003      	b.n	800163c <main+0x110>

	  case 3:
	  		  Calibracao(10);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <main+0x114>)
 8001636:	f7ff fe35 	bl	80012a4 <Calibracao>
	  		  break;
 800163a:	bf00      	nop
	  switch (funcao){
 800163c:	e799      	b.n	8001572 <main+0x46>
 800163e:	bf00      	nop
 8001640:	41200000 	.word	0x41200000
 8001644:	200002bc 	.word	0x200002bc
 8001648:	20000274 	.word	0x20000274
 800164c:	20000304 	.word	0x20000304
 8001650:	08009550 	.word	0x08009550
 8001654:	20000000 	.word	0x20000000
 8001658:	08009560 	.word	0x08009560
 800165c:	08009574 	.word	0x08009574

08001660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b090      	sub	sp, #64	; 0x40
 8001664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001666:	f107 0318 	add.w	r3, r7, #24
 800166a:	2228      	movs	r2, #40	; 0x28
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f003 fb28 	bl	8004cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001682:	2302      	movs	r3, #2
 8001684:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001686:	2301      	movs	r3, #1
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800168a:	2310      	movs	r3, #16
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168e:	2302      	movs	r3, #2
 8001690:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001692:	2300      	movs	r3, #0
 8001694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001696:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800169a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800169c:	f107 0318 	add.w	r3, r7, #24
 80016a0:	4618      	mov	r0, r3
 80016a2:	f001 ff85 	bl	80035b0 <HAL_RCC_OscConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80016ac:	f000 f9e4 	bl	8001a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b0:	230f      	movs	r3, #15
 80016b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b4:	2302      	movs	r3, #2
 80016b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2102      	movs	r1, #2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 f9f2 	bl	8003ab4 <HAL_RCC_ClockConfig>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80016d6:	f000 f9cf 	bl	8001a78 <Error_Handler>
  }
}
 80016da:	bf00      	nop
 80016dc:	3740      	adds	r7, #64	; 0x40
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <MX_I2C1_Init+0x50>)
 80016ea:	4a13      	ldr	r2, [pc, #76]	; (8001738 <MX_I2C1_Init+0x54>)
 80016ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <MX_I2C1_Init+0x50>)
 80016f0:	4a12      	ldr	r2, [pc, #72]	; (800173c <MX_I2C1_Init+0x58>)
 80016f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <MX_I2C1_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <MX_I2C1_Init+0x50>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_I2C1_Init+0x50>)
 8001702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <MX_I2C1_Init+0x50>)
 800170a:	2200      	movs	r2, #0
 800170c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <MX_I2C1_Init+0x50>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <MX_I2C1_Init+0x50>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <MX_I2C1_Init+0x50>)
 800171c:	2200      	movs	r2, #0
 800171e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <MX_I2C1_Init+0x50>)
 8001722:	f001 f9cd 	bl	8002ac0 <HAL_I2C_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800172c:	f000 f9a4 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000220 	.word	0x20000220
 8001738:	40005400 	.word	0x40005400
 800173c:	00061a80 	.word	0x00061a80

08001740 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001746:	f107 0318 	add.w	r3, r7, #24
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800175e:	463b      	mov	r3, r7
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800176a:	4b2e      	ldr	r3, [pc, #184]	; (8001824 <MX_TIM1_Init+0xe4>)
 800176c:	4a2e      	ldr	r2, [pc, #184]	; (8001828 <MX_TIM1_Init+0xe8>)
 800176e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8001770:	4b2c      	ldr	r3, [pc, #176]	; (8001824 <MX_TIM1_Init+0xe4>)
 8001772:	223f      	movs	r2, #63	; 0x3f
 8001774:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001776:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <MX_TIM1_Init+0xe4>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff - 1;
 800177c:	4b29      	ldr	r3, [pc, #164]	; (8001824 <MX_TIM1_Init+0xe4>)
 800177e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001782:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <MX_TIM1_Init+0xe4>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800178a:	4b26      	ldr	r3, [pc, #152]	; (8001824 <MX_TIM1_Init+0xe4>)
 800178c:	2200      	movs	r2, #0
 800178e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001790:	4b24      	ldr	r3, [pc, #144]	; (8001824 <MX_TIM1_Init+0xe4>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001796:	4823      	ldr	r0, [pc, #140]	; (8001824 <MX_TIM1_Init+0xe4>)
 8001798:	f002 fb10 	bl	8003dbc <HAL_TIM_Base_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80017a2:	f000 f969 	bl	8001a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017aa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017ac:	f107 0318 	add.w	r3, r7, #24
 80017b0:	4619      	mov	r1, r3
 80017b2:	481c      	ldr	r0, [pc, #112]	; (8001824 <MX_TIM1_Init+0xe4>)
 80017b4:	f002 fe96 	bl	80044e4 <HAL_TIM_ConfigClockSource>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80017be:	f000 f95b 	bl	8001a78 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80017c2:	4818      	ldr	r0, [pc, #96]	; (8001824 <MX_TIM1_Init+0xe4>)
 80017c4:	f002 fb94 	bl	8003ef0 <HAL_TIM_IC_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80017ce:	f000 f953 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017da:	f107 0310 	add.w	r3, r7, #16
 80017de:	4619      	mov	r1, r3
 80017e0:	4810      	ldr	r0, [pc, #64]	; (8001824 <MX_TIM1_Init+0xe4>)
 80017e2:	f003 f9d5 	bl	8004b90 <HAL_TIMEx_MasterConfigSynchronization>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80017ec:	f000 f944 	bl	8001a78 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017f0:	2300      	movs	r3, #0
 80017f2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017f4:	2301      	movs	r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001800:	463b      	mov	r3, r7
 8001802:	2200      	movs	r2, #0
 8001804:	4619      	mov	r1, r3
 8001806:	4807      	ldr	r0, [pc, #28]	; (8001824 <MX_TIM1_Init+0xe4>)
 8001808:	f002 fdd8 	bl	80043bc <HAL_TIM_IC_ConfigChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001812:	f000 f931 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start(&htim1);
 8001816:	4803      	ldr	r0, [pc, #12]	; (8001824 <MX_TIM1_Init+0xe4>)
 8001818:	f002 fb20 	bl	8003e5c <HAL_TIM_Base_Start>
  /* USER CODE END TIM1_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000274 	.word	0x20000274
 8001828:	40012c00 	.word	0x40012c00

0800182c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001832:	f107 0308 	add.w	r3, r7, #8
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001840:	463b      	mov	r3, r7
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <MX_TIM3_Init+0x94>)
 800184a:	4a1e      	ldr	r2, [pc, #120]	; (80018c4 <MX_TIM3_Init+0x98>)
 800184c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <MX_TIM3_Init+0x94>)
 8001850:	223f      	movs	r2, #63	; 0x3f
 8001852:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_TIM3_Init+0x94>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <MX_TIM3_Init+0x94>)
 800185c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001860:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <MX_TIM3_Init+0x94>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MX_TIM3_Init+0x94>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800186e:	4814      	ldr	r0, [pc, #80]	; (80018c0 <MX_TIM3_Init+0x94>)
 8001870:	f002 faa4 	bl	8003dbc <HAL_TIM_Base_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800187a:	f000 f8fd 	bl	8001a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001882:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	4619      	mov	r1, r3
 800188a:	480d      	ldr	r0, [pc, #52]	; (80018c0 <MX_TIM3_Init+0x94>)
 800188c:	f002 fe2a 	bl	80044e4 <HAL_TIM_ConfigClockSource>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001896:	f000 f8ef 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189a:	2300      	movs	r3, #0
 800189c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018a2:	463b      	mov	r3, r7
 80018a4:	4619      	mov	r1, r3
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <MX_TIM3_Init+0x94>)
 80018a8:	f003 f972 	bl	8004b90 <HAL_TIMEx_MasterConfigSynchronization>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80018b2:	f000 f8e1 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200002bc 	.word	0x200002bc
 80018c4:	40000400 	.word	0x40000400

080018c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018dc:	4b49      	ldr	r3, [pc, #292]	; (8001a04 <MX_GPIO_Init+0x13c>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a48      	ldr	r2, [pc, #288]	; (8001a04 <MX_GPIO_Init+0x13c>)
 80018e2:	f043 0310 	orr.w	r3, r3, #16
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b46      	ldr	r3, [pc, #280]	; (8001a04 <MX_GPIO_Init+0x13c>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b43      	ldr	r3, [pc, #268]	; (8001a04 <MX_GPIO_Init+0x13c>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a42      	ldr	r2, [pc, #264]	; (8001a04 <MX_GPIO_Init+0x13c>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b40      	ldr	r3, [pc, #256]	; (8001a04 <MX_GPIO_Init+0x13c>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190c:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <MX_GPIO_Init+0x13c>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a3c      	ldr	r2, [pc, #240]	; (8001a04 <MX_GPIO_Init+0x13c>)
 8001912:	f043 0308 	orr.w	r3, r3, #8
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b3a      	ldr	r3, [pc, #232]	; (8001a04 <MX_GPIO_Init+0x13c>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Trigger_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	2103      	movs	r1, #3
 8001928:	4837      	ldr	r0, [pc, #220]	; (8001a08 <MX_GPIO_Init+0x140>)
 800192a:	f001 f899 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800192e:	2200      	movs	r2, #0
 8001930:	2120      	movs	r1, #32
 8001932:	4836      	ldr	r0, [pc, #216]	; (8001a0c <MX_GPIO_Init+0x144>)
 8001934:	f001 f894 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800193c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800193e:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <MX_GPIO_Init+0x148>)
 8001940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	4619      	mov	r1, r3
 800194c:	482e      	ldr	r0, [pc, #184]	; (8001a08 <MX_GPIO_Init+0x140>)
 800194e:	f000 ff03 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : Trigger_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin|LED_1_Pin;
 8001952:	2303      	movs	r3, #3
 8001954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001956:	2301      	movs	r3, #1
 8001958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2302      	movs	r3, #2
 8001960:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	4619      	mov	r1, r3
 8001968:	4827      	ldr	r0, [pc, #156]	; (8001a08 <MX_GPIO_Init+0x140>)
 800196a:	f000 fef5 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 800196e:	2312      	movs	r3, #18
 8001970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001972:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <MX_GPIO_Init+0x14c>)
 8001974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f107 0310 	add.w	r3, r7, #16
 800197e:	4619      	mov	r1, r3
 8001980:	4822      	ldr	r0, [pc, #136]	; (8001a0c <MX_GPIO_Init+0x144>)
 8001982:	f000 fee9 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 8001986:	2320      	movs	r3, #32
 8001988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198a:	2301      	movs	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2302      	movs	r3, #2
 8001994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 0310 	add.w	r3, r7, #16
 800199a:	4619      	mov	r1, r3
 800199c:	481b      	ldr	r0, [pc, #108]	; (8001a0c <MX_GPIO_Init+0x144>)
 800199e:	f000 fedb 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 80019a2:	2301      	movs	r3, #1
 80019a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019a6:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <MX_GPIO_Init+0x14c>)
 80019a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 0310 	add.w	r3, r7, #16
 80019b2:	4619      	mov	r1, r3
 80019b4:	4818      	ldr	r0, [pc, #96]	; (8001a18 <MX_GPIO_Init+0x150>)
 80019b6:	f000 fecf 	bl	8002758 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2100      	movs	r1, #0
 80019be:	2006      	movs	r0, #6
 80019c0:	f000 fe93 	bl	80026ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019c4:	2006      	movs	r0, #6
 80019c6:	f000 feac 	bl	8002722 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2100      	movs	r1, #0
 80019ce:	2007      	movs	r0, #7
 80019d0:	f000 fe8b 	bl	80026ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019d4:	2007      	movs	r0, #7
 80019d6:	f000 fea4 	bl	8002722 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2100      	movs	r1, #0
 80019de:	200a      	movs	r0, #10
 80019e0:	f000 fe83 	bl	80026ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80019e4:	200a      	movs	r0, #10
 80019e6:	f000 fe9c 	bl	8002722 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	2028      	movs	r0, #40	; 0x28
 80019f0:	f000 fe7b 	bl	80026ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019f4:	2028      	movs	r0, #40	; 0x28
 80019f6:	f000 fe94 	bl	8002722 <HAL_NVIC_EnableIRQ>

}
 80019fa:	bf00      	nop
 80019fc:	3720      	adds	r7, #32
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40011000 	.word	0x40011000
 8001a0c:	40010800 	.word	0x40010800
 8001a10:	10210000 	.word	0x10210000
 8001a14:	10110000 	.word	0x10110000
 8001a18:	40010c00 	.word	0x40010c00

08001a1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1){
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d103      	bne.n	8001a34 <HAL_GPIO_EXTI_Callback+0x18>
		funcao = 1;
 8001a2c:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]
		if(funcao == 3)
			calibrar = 1;
		if(funcao != 3){
		funcao = 3;}
		}
}
 8001a32:	e017      	b.n	8001a64 <HAL_GPIO_EXTI_Callback+0x48>
	else if(GPIO_Pin == GPIO_PIN_4){
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	2b10      	cmp	r3, #16
 8001a38:	d103      	bne.n	8001a42 <HAL_GPIO_EXTI_Callback+0x26>
		funcao = 2;
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	601a      	str	r2, [r3, #0]
}
 8001a40:	e010      	b.n	8001a64 <HAL_GPIO_EXTI_Callback+0x48>
	else if(GPIO_Pin == GPIO_PIN_0){
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d10d      	bne.n	8001a64 <HAL_GPIO_EXTI_Callback+0x48>
		if(funcao == 3)
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d102      	bne.n	8001a56 <HAL_GPIO_EXTI_Callback+0x3a>
			calibrar = 1;
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]
		if(funcao != 3){
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d002      	beq.n	8001a64 <HAL_GPIO_EXTI_Callback+0x48>
		funcao = 3;}
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a60:	2203      	movs	r2, #3
 8001a62:	601a      	str	r2, [r3, #0]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000304 	.word	0x20000304
 8001a74:	20000308 	.word	0x20000308

08001a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7c:	b672      	cpsid	i
}
 8001a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <Error_Handler+0x8>
	...

08001a84 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001a8a:	f000 fa1f 	bl	8001ecc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001a8e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001a92:	2201      	movs	r2, #1
 8001a94:	2178      	movs	r1, #120	; 0x78
 8001a96:	485b      	ldr	r0, [pc, #364]	; (8001c04 <SSD1306_Init+0x180>)
 8001a98:	f001 fa54 	bl	8002f44 <HAL_I2C_IsDeviceReady>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e0a9      	b.n	8001bfa <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001aa6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001aaa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001aac:	e002      	b.n	8001ab4 <SSD1306_Init+0x30>
		p--;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f9      	bne.n	8001aae <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001aba:	22ae      	movs	r2, #174	; 0xae
 8001abc:	2100      	movs	r1, #0
 8001abe:	2078      	movs	r0, #120	; 0x78
 8001ac0:	f000 fa7e 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	2078      	movs	r0, #120	; 0x78
 8001aca:	f000 fa79 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001ace:	2210      	movs	r2, #16
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2078      	movs	r0, #120	; 0x78
 8001ad4:	f000 fa74 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001ad8:	22b0      	movs	r2, #176	; 0xb0
 8001ada:	2100      	movs	r1, #0
 8001adc:	2078      	movs	r0, #120	; 0x78
 8001ade:	f000 fa6f 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001ae2:	22c8      	movs	r2, #200	; 0xc8
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2078      	movs	r0, #120	; 0x78
 8001ae8:	f000 fa6a 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001aec:	2200      	movs	r2, #0
 8001aee:	2100      	movs	r1, #0
 8001af0:	2078      	movs	r0, #120	; 0x78
 8001af2:	f000 fa65 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001af6:	2210      	movs	r2, #16
 8001af8:	2100      	movs	r1, #0
 8001afa:	2078      	movs	r0, #120	; 0x78
 8001afc:	f000 fa60 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001b00:	2240      	movs	r2, #64	; 0x40
 8001b02:	2100      	movs	r1, #0
 8001b04:	2078      	movs	r0, #120	; 0x78
 8001b06:	f000 fa5b 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001b0a:	2281      	movs	r2, #129	; 0x81
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2078      	movs	r0, #120	; 0x78
 8001b10:	f000 fa56 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001b14:	22ff      	movs	r2, #255	; 0xff
 8001b16:	2100      	movs	r1, #0
 8001b18:	2078      	movs	r0, #120	; 0x78
 8001b1a:	f000 fa51 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001b1e:	22a1      	movs	r2, #161	; 0xa1
 8001b20:	2100      	movs	r1, #0
 8001b22:	2078      	movs	r0, #120	; 0x78
 8001b24:	f000 fa4c 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001b28:	22a6      	movs	r2, #166	; 0xa6
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2078      	movs	r0, #120	; 0x78
 8001b2e:	f000 fa47 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001b32:	22a8      	movs	r2, #168	; 0xa8
 8001b34:	2100      	movs	r1, #0
 8001b36:	2078      	movs	r0, #120	; 0x78
 8001b38:	f000 fa42 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001b3c:	223f      	movs	r2, #63	; 0x3f
 8001b3e:	2100      	movs	r1, #0
 8001b40:	2078      	movs	r0, #120	; 0x78
 8001b42:	f000 fa3d 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b46:	22a4      	movs	r2, #164	; 0xa4
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2078      	movs	r0, #120	; 0x78
 8001b4c:	f000 fa38 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001b50:	22d3      	movs	r2, #211	; 0xd3
 8001b52:	2100      	movs	r1, #0
 8001b54:	2078      	movs	r0, #120	; 0x78
 8001b56:	f000 fa33 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2078      	movs	r0, #120	; 0x78
 8001b60:	f000 fa2e 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b64:	22d5      	movs	r2, #213	; 0xd5
 8001b66:	2100      	movs	r1, #0
 8001b68:	2078      	movs	r0, #120	; 0x78
 8001b6a:	f000 fa29 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001b6e:	22f0      	movs	r2, #240	; 0xf0
 8001b70:	2100      	movs	r1, #0
 8001b72:	2078      	movs	r0, #120	; 0x78
 8001b74:	f000 fa24 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001b78:	22d9      	movs	r2, #217	; 0xd9
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	2078      	movs	r0, #120	; 0x78
 8001b7e:	f000 fa1f 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001b82:	2222      	movs	r2, #34	; 0x22
 8001b84:	2100      	movs	r1, #0
 8001b86:	2078      	movs	r0, #120	; 0x78
 8001b88:	f000 fa1a 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001b8c:	22da      	movs	r2, #218	; 0xda
 8001b8e:	2100      	movs	r1, #0
 8001b90:	2078      	movs	r0, #120	; 0x78
 8001b92:	f000 fa15 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001b96:	2212      	movs	r2, #18
 8001b98:	2100      	movs	r1, #0
 8001b9a:	2078      	movs	r0, #120	; 0x78
 8001b9c:	f000 fa10 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001ba0:	22db      	movs	r2, #219	; 0xdb
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	2078      	movs	r0, #120	; 0x78
 8001ba6:	f000 fa0b 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001baa:	2220      	movs	r2, #32
 8001bac:	2100      	movs	r1, #0
 8001bae:	2078      	movs	r0, #120	; 0x78
 8001bb0:	f000 fa06 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001bb4:	228d      	movs	r2, #141	; 0x8d
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2078      	movs	r0, #120	; 0x78
 8001bba:	f000 fa01 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001bbe:	2214      	movs	r2, #20
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	2078      	movs	r0, #120	; 0x78
 8001bc4:	f000 f9fc 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001bc8:	22af      	movs	r2, #175	; 0xaf
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2078      	movs	r0, #120	; 0x78
 8001bce:	f000 f9f7 	bl	8001fc0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001bd2:	222e      	movs	r2, #46	; 0x2e
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2078      	movs	r0, #120	; 0x78
 8001bd8:	f000 f9f2 	bl	8001fc0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f000 f843 	bl	8001c68 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001be2:	f000 f813 	bl	8001c0c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <SSD1306_Init+0x184>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <SSD1306_Init+0x184>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001bf2:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <SSD1306_Init+0x184>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001bf8:	2301      	movs	r3, #1
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000220 	.word	0x20000220
 8001c08:	2000070c 	.word	0x2000070c

08001c0c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001c12:	2300      	movs	r3, #0
 8001c14:	71fb      	strb	r3, [r7, #7]
 8001c16:	e01d      	b.n	8001c54 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	3b50      	subs	r3, #80	; 0x50
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	2100      	movs	r1, #0
 8001c22:	2078      	movs	r0, #120	; 0x78
 8001c24:	f000 f9cc 	bl	8001fc0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2078      	movs	r0, #120	; 0x78
 8001c2e:	f000 f9c7 	bl	8001fc0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001c32:	2210      	movs	r2, #16
 8001c34:	2100      	movs	r1, #0
 8001c36:	2078      	movs	r0, #120	; 0x78
 8001c38:	f000 f9c2 	bl	8001fc0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	01db      	lsls	r3, r3, #7
 8001c40:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <SSD1306_UpdateScreen+0x58>)
 8001c42:	441a      	add	r2, r3
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	2140      	movs	r1, #64	; 0x40
 8001c48:	2078      	movs	r0, #120	; 0x78
 8001c4a:	f000 f953 	bl	8001ef4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	3301      	adds	r3, #1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	2b07      	cmp	r3, #7
 8001c58:	d9de      	bls.n	8001c18 <SSD1306_UpdateScreen+0xc>
	}
}
 8001c5a:	bf00      	nop
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2000030c 	.word	0x2000030c

08001c68 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <SSD1306_Fill+0x14>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e000      	b.n	8001c7e <SSD1306_Fill+0x16>
 8001c7c:	23ff      	movs	r3, #255	; 0xff
 8001c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c82:	4619      	mov	r1, r3
 8001c84:	4803      	ldr	r0, [pc, #12]	; (8001c94 <SSD1306_Fill+0x2c>)
 8001c86:	f003 f81d 	bl	8004cc4 <memset>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000030c 	.word	0x2000030c

08001c98 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	80bb      	strh	r3, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	70fb      	strb	r3, [r7, #3]
	if (
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	2b7f      	cmp	r3, #127	; 0x7f
 8001cae:	d848      	bhi.n	8001d42 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001cb0:	88bb      	ldrh	r3, [r7, #4]
 8001cb2:	2b3f      	cmp	r3, #63	; 0x3f
 8001cb4:	d845      	bhi.n	8001d42 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001cb6:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <SSD1306_DrawPixel+0xb4>)
 8001cb8:	791b      	ldrb	r3, [r3, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d006      	beq.n	8001ccc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bf0c      	ite	eq
 8001cc4:	2301      	moveq	r3, #1
 8001cc6:	2300      	movne	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d11a      	bne.n	8001d08 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001cd2:	88fa      	ldrh	r2, [r7, #6]
 8001cd4:	88bb      	ldrh	r3, [r7, #4]
 8001cd6:	08db      	lsrs	r3, r3, #3
 8001cd8:	b298      	uxth	r0, r3
 8001cda:	4603      	mov	r3, r0
 8001cdc:	01db      	lsls	r3, r3, #7
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <SSD1306_DrawPixel+0xb8>)
 8001ce2:	5cd3      	ldrb	r3, [r2, r3]
 8001ce4:	b25a      	sxtb	r2, r3
 8001ce6:	88bb      	ldrh	r3, [r7, #4]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	2101      	movs	r1, #1
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	b25b      	sxtb	r3, r3
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	b259      	sxtb	r1, r3
 8001cf8:	88fa      	ldrh	r2, [r7, #6]
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	01db      	lsls	r3, r3, #7
 8001cfe:	4413      	add	r3, r2
 8001d00:	b2c9      	uxtb	r1, r1
 8001d02:	4a13      	ldr	r2, [pc, #76]	; (8001d50 <SSD1306_DrawPixel+0xb8>)
 8001d04:	54d1      	strb	r1, [r2, r3]
 8001d06:	e01d      	b.n	8001d44 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d08:	88fa      	ldrh	r2, [r7, #6]
 8001d0a:	88bb      	ldrh	r3, [r7, #4]
 8001d0c:	08db      	lsrs	r3, r3, #3
 8001d0e:	b298      	uxth	r0, r3
 8001d10:	4603      	mov	r3, r0
 8001d12:	01db      	lsls	r3, r3, #7
 8001d14:	4413      	add	r3, r2
 8001d16:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <SSD1306_DrawPixel+0xb8>)
 8001d18:	5cd3      	ldrb	r3, [r2, r3]
 8001d1a:	b25a      	sxtb	r2, r3
 8001d1c:	88bb      	ldrh	r3, [r7, #4]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	2101      	movs	r1, #1
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	b25b      	sxtb	r3, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	b25b      	sxtb	r3, r3
 8001d2e:	4013      	ands	r3, r2
 8001d30:	b259      	sxtb	r1, r3
 8001d32:	88fa      	ldrh	r2, [r7, #6]
 8001d34:	4603      	mov	r3, r0
 8001d36:	01db      	lsls	r3, r3, #7
 8001d38:	4413      	add	r3, r2
 8001d3a:	b2c9      	uxtb	r1, r1
 8001d3c:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <SSD1306_DrawPixel+0xb8>)
 8001d3e:	54d1      	strb	r1, [r2, r3]
 8001d40:	e000      	b.n	8001d44 <SSD1306_DrawPixel+0xac>
		return;
 8001d42:	bf00      	nop
	}
}
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	2000070c 	.word	0x2000070c
 8001d50:	2000030c 	.word	0x2000030c

08001d54 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	80fb      	strh	r3, [r7, #6]
 8001d60:	4613      	mov	r3, r2
 8001d62:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001d64:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <SSD1306_GotoXY+0x28>)
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001d6a:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <SSD1306_GotoXY+0x28>)
 8001d6c:	88bb      	ldrh	r3, [r7, #4]
 8001d6e:	8053      	strh	r3, [r2, #2]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	2000070c 	.word	0x2000070c

08001d80 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	71fb      	strb	r3, [r7, #7]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001d90:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <SSD1306_Putc+0xfc>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	4413      	add	r3, r2
	if (
 8001d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8001d9e:	dc07      	bgt.n	8001db0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001da0:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <SSD1306_Putc+0xfc>)
 8001da2:	885b      	ldrh	r3, [r3, #2]
 8001da4:	461a      	mov	r2, r3
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	785b      	ldrb	r3, [r3, #1]
 8001daa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001dac:	2b3f      	cmp	r3, #63	; 0x3f
 8001dae:	dd01      	ble.n	8001db4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	e05e      	b.n	8001e72 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	e04b      	b.n	8001e52 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	3b20      	subs	r3, #32
 8001dc2:	6839      	ldr	r1, [r7, #0]
 8001dc4:	7849      	ldrb	r1, [r1, #1]
 8001dc6:	fb01 f303 	mul.w	r3, r1, r3
 8001dca:	4619      	mov	r1, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	440b      	add	r3, r1
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001dd8:	2300      	movs	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	e030      	b.n	8001e40 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d010      	beq.n	8001e10 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001dee:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <SSD1306_Putc+0xfc>)
 8001df0:	881a      	ldrh	r2, [r3, #0]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	4413      	add	r3, r2
 8001df8:	b298      	uxth	r0, r3
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <SSD1306_Putc+0xfc>)
 8001dfc:	885a      	ldrh	r2, [r3, #2]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	4413      	add	r3, r2
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	79ba      	ldrb	r2, [r7, #6]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f7ff ff45 	bl	8001c98 <SSD1306_DrawPixel>
 8001e0e:	e014      	b.n	8001e3a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001e10:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <SSD1306_Putc+0xfc>)
 8001e12:	881a      	ldrh	r2, [r3, #0]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	4413      	add	r3, r2
 8001e1a:	b298      	uxth	r0, r3
 8001e1c:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <SSD1306_Putc+0xfc>)
 8001e1e:	885a      	ldrh	r2, [r3, #2]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	4413      	add	r3, r2
 8001e26:	b299      	uxth	r1, r3
 8001e28:	79bb      	ldrb	r3, [r7, #6]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	bf0c      	ite	eq
 8001e2e:	2301      	moveq	r3, #1
 8001e30:	2300      	movne	r3, #0
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	f7ff ff2f 	bl	8001c98 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d3c8      	bcc.n	8001dde <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	785b      	ldrb	r3, [r3, #1]
 8001e56:	461a      	mov	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d3ad      	bcc.n	8001dba <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <SSD1306_Putc+0xfc>)
 8001e60:	881a      	ldrh	r2, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <SSD1306_Putc+0xfc>)
 8001e6e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001e70:	79fb      	ldrb	r3, [r7, #7]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2000070c 	.word	0x2000070c

08001e80 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001e8e:	e012      	b.n	8001eb6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	79fa      	ldrb	r2, [r7, #7]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff71 	bl	8001d80 <SSD1306_Putc>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d002      	beq.n	8001eb0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	e008      	b.n	8001ec2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1e8      	bne.n	8001e90 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	781b      	ldrb	r3, [r3, #0]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <ssd1306_I2C_Init+0x24>)
 8001ed4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ed6:	e002      	b.n	8001ede <ssd1306_I2C_Init+0x12>
		p--;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f9      	bne.n	8001ed8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	0003d090 	.word	0x0003d090

08001ef4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b0c7      	sub	sp, #284	; 0x11c
 8001ef8:	af02      	add	r7, sp, #8
 8001efa:	4604      	mov	r4, r0
 8001efc:	4608      	mov	r0, r1
 8001efe:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001f02:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001f06:	600a      	str	r2, [r1, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f0e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001f12:	4622      	mov	r2, r4
 8001f14:	701a      	strb	r2, [r3, #0]
 8001f16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f1a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001f1e:	4602      	mov	r2, r0
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f2a:	460a      	mov	r2, r1
 8001f2c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001f2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f36:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001f3a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001f3e:	7812      	ldrb	r2, [r2, #0]
 8001f40:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001f48:	e015      	b.n	8001f76 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001f4a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f4e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001f52:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	441a      	add	r2, r3
 8001f5a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f5e:	3301      	adds	r3, #1
 8001f60:	7811      	ldrb	r1, [r2, #0]
 8001f62:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001f66:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001f6a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001f6c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f70:	3301      	adds	r3, #1
 8001f72:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001f76:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001f80:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001f84:	8812      	ldrh	r2, [r2, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d8df      	bhi.n	8001f4a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001f8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f8e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b299      	uxth	r1, r3
 8001f96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	f107 020c 	add.w	r2, r7, #12
 8001fa8:	200a      	movs	r0, #10
 8001faa:	9000      	str	r0, [sp, #0]
 8001fac:	4803      	ldr	r0, [pc, #12]	; (8001fbc <ssd1306_I2C_WriteMulti+0xc8>)
 8001fae:	f000 fecb 	bl	8002d48 <HAL_I2C_Master_Transmit>
}
 8001fb2:	bf00      	nop
 8001fb4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd90      	pop	{r4, r7, pc}
 8001fbc:	20000220 	.word	0x20000220

08001fc0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	71bb      	strb	r3, [r7, #6]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001fd2:	79bb      	ldrb	r3, [r7, #6]
 8001fd4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001fd6:	797b      	ldrb	r3, [r7, #5]
 8001fd8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	b299      	uxth	r1, r3
 8001fde:	f107 020c 	add.w	r2, r7, #12
 8001fe2:	230a      	movs	r3, #10
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <ssd1306_I2C_Write+0x38>)
 8001fea:	f000 fead 	bl	8002d48 <HAL_I2C_Master_Transmit>
}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000220 	.word	0x20000220

08001ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <HAL_MspInit+0x40>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	4a0d      	ldr	r2, [pc, #52]	; (800203c <HAL_MspInit+0x40>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6193      	str	r3, [r2, #24]
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_MspInit+0x40>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	4b08      	ldr	r3, [pc, #32]	; (800203c <HAL_MspInit+0x40>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4a07      	ldr	r2, [pc, #28]	; (800203c <HAL_MspInit+0x40>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002024:	61d3      	str	r3, [r2, #28]
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_MspInit+0x40>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	40021000 	.word	0x40021000

08002040 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <HAL_I2C_MspInit+0x90>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d132      	bne.n	80020c6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002060:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <HAL_I2C_MspInit+0x94>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	4a1b      	ldr	r2, [pc, #108]	; (80020d4 <HAL_I2C_MspInit+0x94>)
 8002066:	f043 0308 	orr.w	r3, r3, #8
 800206a:	6193      	str	r3, [r2, #24]
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_I2C_MspInit+0x94>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002078:	f44f 7340 	mov.w	r3, #768	; 0x300
 800207c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800207e:	2312      	movs	r3, #18
 8002080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002082:	2303      	movs	r3, #3
 8002084:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	4619      	mov	r1, r3
 800208c:	4812      	ldr	r0, [pc, #72]	; (80020d8 <HAL_I2C_MspInit+0x98>)
 800208e:	f000 fb63 	bl	8002758 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_I2C_MspInit+0x9c>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	f043 0302 	orr.w	r3, r3, #2
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
 80020a8:	4a0c      	ldr	r2, [pc, #48]	; (80020dc <HAL_I2C_MspInit+0x9c>)
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_I2C_MspInit+0x94>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	4a08      	ldr	r2, [pc, #32]	; (80020d4 <HAL_I2C_MspInit+0x94>)
 80020b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020b8:	61d3      	str	r3, [r2, #28]
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_I2C_MspInit+0x94>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020c6:	bf00      	nop
 80020c8:	3728      	adds	r7, #40	; 0x28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40005400 	.word	0x40005400
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40010c00 	.word	0x40010c00
 80020dc:	40010000 	.word	0x40010000

080020e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0318 	add.w	r3, r7, #24
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a27      	ldr	r2, [pc, #156]	; (8002198 <HAL_TIM_Base_MspInit+0xb8>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d12d      	bne.n	800215c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002100:	4b26      	ldr	r3, [pc, #152]	; (800219c <HAL_TIM_Base_MspInit+0xbc>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4a25      	ldr	r2, [pc, #148]	; (800219c <HAL_TIM_Base_MspInit+0xbc>)
 8002106:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800210a:	6193      	str	r3, [r2, #24]
 800210c:	4b23      	ldr	r3, [pc, #140]	; (800219c <HAL_TIM_Base_MspInit+0xbc>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002118:	4b20      	ldr	r3, [pc, #128]	; (800219c <HAL_TIM_Base_MspInit+0xbc>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	4a1f      	ldr	r2, [pc, #124]	; (800219c <HAL_TIM_Base_MspInit+0xbc>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	6193      	str	r3, [r2, #24]
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <HAL_TIM_Base_MspInit+0xbc>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213e:	f107 0318 	add.w	r3, r7, #24
 8002142:	4619      	mov	r1, r3
 8002144:	4816      	ldr	r0, [pc, #88]	; (80021a0 <HAL_TIM_Base_MspInit+0xc0>)
 8002146:	f000 fb07 	bl	8002758 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	201b      	movs	r0, #27
 8002150:	f000 facb 	bl	80026ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002154:	201b      	movs	r0, #27
 8002156:	f000 fae4 	bl	8002722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800215a:	e018      	b.n	800218e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <HAL_TIM_Base_MspInit+0xc4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d113      	bne.n	800218e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <HAL_TIM_Base_MspInit+0xbc>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	4a0c      	ldr	r2, [pc, #48]	; (800219c <HAL_TIM_Base_MspInit+0xbc>)
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	61d3      	str	r3, [r2, #28]
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_TIM_Base_MspInit+0xbc>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	201d      	movs	r0, #29
 8002184:	f000 fab1 	bl	80026ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002188:	201d      	movs	r0, #29
 800218a:	f000 faca 	bl	8002722 <HAL_NVIC_EnableIRQ>
}
 800218e:	bf00      	nop
 8002190:	3728      	adds	r7, #40	; 0x28
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40012c00 	.word	0x40012c00
 800219c:	40021000 	.word	0x40021000
 80021a0:	40010800 	.word	0x40010800
 80021a4:	40000400 	.word	0x40000400

080021a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021ac:	e7fe      	b.n	80021ac <NMI_Handler+0x4>

080021ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b2:	e7fe      	b.n	80021b2 <HardFault_Handler+0x4>

080021b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <MemManage_Handler+0x4>

080021ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021be:	e7fe      	b.n	80021be <BusFault_Handler+0x4>

080021c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <UsageFault_Handler+0x4>

080021c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ee:	f000 f965 	bl	80024bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 80021fa:	2001      	movs	r0, #1
 80021fc:	f000 fc48 	bl	8002a90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002208:	2002      	movs	r0, #2
 800220a:	f000 fc41 	bl	8002a90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}

08002212 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8002216:	2010      	movs	r0, #16
 8002218:	f000 fc3a 	bl	8002a90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}

08002220 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <TIM1_CC_IRQHandler+0x10>)
 8002226:	f001 ffc1 	bl	80041ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000274 	.word	0x20000274

08002234 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <TIM3_IRQHandler+0x10>)
 800223a:	f001 ffb7 	bl	80041ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200002bc 	.word	0x200002bc

08002248 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 800224c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002250:	f000 fc1e 	bl	8002a90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}

08002258 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
	return 1;
 800225c:	2301      	movs	r3, #1
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <_kill>:

int _kill(int pid, int sig)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002270:	f002 fcfe 	bl	8004c70 <__errno>
 8002274:	4603      	mov	r3, r0
 8002276:	2216      	movs	r2, #22
 8002278:	601a      	str	r2, [r3, #0]
	return -1;
 800227a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <_exit>:

void _exit (int status)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800228e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ffe7 	bl	8002266 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002298:	e7fe      	b.n	8002298 <_exit+0x12>

0800229a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e00a      	b.n	80022c2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022ac:	f3af 8000 	nop.w
 80022b0:	4601      	mov	r1, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	60ba      	str	r2, [r7, #8]
 80022b8:	b2ca      	uxtb	r2, r1
 80022ba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	3301      	adds	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	dbf0      	blt.n	80022ac <_read+0x12>
	}

return len;
 80022ca:	687b      	ldr	r3, [r7, #4]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e009      	b.n	80022fa <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	60ba      	str	r2, [r7, #8]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	3301      	adds	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	429a      	cmp	r2, r3
 8002300:	dbf1      	blt.n	80022e6 <_write+0x12>
	}
	return len;
 8002302:	687b      	ldr	r3, [r7, #4]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <_close>:

int _close(int file)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	return -1;
 8002314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002332:	605a      	str	r2, [r3, #4]
	return 0;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <_isatty>:

int _isatty(int file)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	return 1;
 8002348:	2301      	movs	r3, #1
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
	return 0;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <_sbrk+0x5c>)
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <_sbrk+0x60>)
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <_sbrk+0x64>)
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <_sbrk+0x68>)
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	429a      	cmp	r2, r3
 800239a:	d207      	bcs.n	80023ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800239c:	f002 fc68 	bl	8004c70 <__errno>
 80023a0:	4603      	mov	r3, r0
 80023a2:	220c      	movs	r2, #12
 80023a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023aa:	e009      	b.n	80023c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <_sbrk+0x64>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <_sbrk+0x64>)
 80023bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20005000 	.word	0x20005000
 80023cc:	00000400 	.word	0x00000400
 80023d0:	20000714 	.word	0x20000714
 80023d4:	20000730 	.word	0x20000730

080023d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023e4:	480c      	ldr	r0, [pc, #48]	; (8002418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023e6:	490d      	ldr	r1, [pc, #52]	; (800241c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023e8:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023ec:	e002      	b.n	80023f4 <LoopCopyDataInit>

080023ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f2:	3304      	adds	r3, #4

080023f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f8:	d3f9      	bcc.n	80023ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023fc:	4c0a      	ldr	r4, [pc, #40]	; (8002428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002400:	e001      	b.n	8002406 <LoopFillZerobss>

08002402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002404:	3204      	adds	r2, #4

08002406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002408:	d3fb      	bcc.n	8002402 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800240a:	f7ff ffe5 	bl	80023d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800240e:	f002 fc35 	bl	8004c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002412:	f7ff f88b 	bl	800152c <main>
  bx lr
 8002416:	4770      	bx	lr
  ldr r0, =_sdata
 8002418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800241c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002420:	0800a1c4 	.word	0x0800a1c4
  ldr r2, =_sbss
 8002424:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002428:	2000072c 	.word	0x2000072c

0800242c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800242c:	e7fe      	b.n	800242c <ADC1_2_IRQHandler>
	...

08002430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <HAL_Init+0x28>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a07      	ldr	r2, [pc, #28]	; (8002458 <HAL_Init+0x28>)
 800243a:	f043 0310 	orr.w	r3, r3, #16
 800243e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002440:	2003      	movs	r0, #3
 8002442:	f000 f947 	bl	80026d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002446:	200f      	movs	r0, #15
 8002448:	f000 f808 	bl	800245c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800244c:	f7ff fdd6 	bl	8001ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40022000 	.word	0x40022000

0800245c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_InitTick+0x54>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <HAL_InitTick+0x58>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	4619      	mov	r1, r3
 800246e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002472:	fbb3 f3f1 	udiv	r3, r3, r1
 8002476:	fbb2 f3f3 	udiv	r3, r2, r3
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f95f 	bl	800273e <HAL_SYSTICK_Config>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e00e      	b.n	80024a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b0f      	cmp	r3, #15
 800248e:	d80a      	bhi.n	80024a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002490:	2200      	movs	r2, #0
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002498:	f000 f927 	bl	80026ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800249c:	4a06      	ldr	r2, [pc, #24]	; (80024b8 <HAL_InitTick+0x5c>)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e000      	b.n	80024a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000008 	.word	0x20000008
 80024b4:	20000010 	.word	0x20000010
 80024b8:	2000000c 	.word	0x2000000c

080024bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_IncTick+0x1c>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_IncTick+0x20>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	4a03      	ldr	r2, [pc, #12]	; (80024dc <HAL_IncTick+0x20>)
 80024ce:	6013      	str	r3, [r2, #0]
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	20000010 	.word	0x20000010
 80024dc:	20000718 	.word	0x20000718

080024e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return uwTick;
 80024e4:	4b02      	ldr	r3, [pc, #8]	; (80024f0 <HAL_GetTick+0x10>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	20000718 	.word	0x20000718

080024f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff fff0 	bl	80024e0 <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800250c:	d005      	beq.n	800251a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_Delay+0x44>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800251a:	bf00      	nop
 800251c:	f7ff ffe0 	bl	80024e0 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8f7      	bhi.n	800251c <HAL_Delay+0x28>
  {
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000010 	.word	0x20000010

0800253c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002558:	4013      	ands	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256e:	4a04      	ldr	r2, [pc, #16]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	60d3      	str	r3, [r2, #12]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <__NVIC_GetPriorityGrouping+0x18>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	f003 0307 	and.w	r3, r3, #7
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	db0b      	blt.n	80025ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	f003 021f 	and.w	r2, r3, #31
 80025b8:	4906      	ldr	r1, [pc, #24]	; (80025d4 <__NVIC_EnableIRQ+0x34>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	2001      	movs	r0, #1
 80025c2:	fa00 f202 	lsl.w	r2, r0, r2
 80025c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	e000e100 	.word	0xe000e100

080025d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	db0a      	blt.n	8002602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	490c      	ldr	r1, [pc, #48]	; (8002624 <__NVIC_SetPriority+0x4c>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	440b      	add	r3, r1
 80025fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002600:	e00a      	b.n	8002618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4908      	ldr	r1, [pc, #32]	; (8002628 <__NVIC_SetPriority+0x50>)
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	3b04      	subs	r3, #4
 8002610:	0112      	lsls	r2, r2, #4
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	440b      	add	r3, r1
 8002616:	761a      	strb	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	; 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f1c3 0307 	rsb	r3, r3, #7
 8002646:	2b04      	cmp	r3, #4
 8002648:	bf28      	it	cs
 800264a:	2304      	movcs	r3, #4
 800264c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3304      	adds	r3, #4
 8002652:	2b06      	cmp	r3, #6
 8002654:	d902      	bls.n	800265c <NVIC_EncodePriority+0x30>
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3b03      	subs	r3, #3
 800265a:	e000      	b.n	800265e <NVIC_EncodePriority+0x32>
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	401a      	ands	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002674:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	43d9      	mvns	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	4313      	orrs	r3, r2
         );
}
 8002686:	4618      	mov	r0, r3
 8002688:	3724      	adds	r7, #36	; 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a0:	d301      	bcc.n	80026a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00f      	b.n	80026c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <SysTick_Config+0x40>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ae:	210f      	movs	r1, #15
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026b4:	f7ff ff90 	bl	80025d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <SysTick_Config+0x40>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026be:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <SysTick_Config+0x40>)
 80026c0:	2207      	movs	r2, #7
 80026c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	e000e010 	.word	0xe000e010

080026d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff ff2d 	bl	800253c <__NVIC_SetPriorityGrouping>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026fc:	f7ff ff42 	bl	8002584 <__NVIC_GetPriorityGrouping>
 8002700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	6978      	ldr	r0, [r7, #20]
 8002708:	f7ff ff90 	bl	800262c <NVIC_EncodePriority>
 800270c:	4602      	mov	r2, r0
 800270e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff5f 	bl	80025d8 <__NVIC_SetPriority>
}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff35 	bl	80025a0 <__NVIC_EnableIRQ>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ffa2 	bl	8002690 <SysTick_Config>
 800274c:	4603      	mov	r3, r0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002758:	b480      	push	{r7}
 800275a:	b08b      	sub	sp, #44	; 0x2c
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002762:	2300      	movs	r3, #0
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002766:	2300      	movs	r3, #0
 8002768:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276a:	e169      	b.n	8002a40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800276c:	2201      	movs	r2, #1
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	429a      	cmp	r2, r3
 8002786:	f040 8158 	bne.w	8002a3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4a9a      	ldr	r2, [pc, #616]	; (80029f8 <HAL_GPIO_Init+0x2a0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d05e      	beq.n	8002852 <HAL_GPIO_Init+0xfa>
 8002794:	4a98      	ldr	r2, [pc, #608]	; (80029f8 <HAL_GPIO_Init+0x2a0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d875      	bhi.n	8002886 <HAL_GPIO_Init+0x12e>
 800279a:	4a98      	ldr	r2, [pc, #608]	; (80029fc <HAL_GPIO_Init+0x2a4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d058      	beq.n	8002852 <HAL_GPIO_Init+0xfa>
 80027a0:	4a96      	ldr	r2, [pc, #600]	; (80029fc <HAL_GPIO_Init+0x2a4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d86f      	bhi.n	8002886 <HAL_GPIO_Init+0x12e>
 80027a6:	4a96      	ldr	r2, [pc, #600]	; (8002a00 <HAL_GPIO_Init+0x2a8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d052      	beq.n	8002852 <HAL_GPIO_Init+0xfa>
 80027ac:	4a94      	ldr	r2, [pc, #592]	; (8002a00 <HAL_GPIO_Init+0x2a8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d869      	bhi.n	8002886 <HAL_GPIO_Init+0x12e>
 80027b2:	4a94      	ldr	r2, [pc, #592]	; (8002a04 <HAL_GPIO_Init+0x2ac>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d04c      	beq.n	8002852 <HAL_GPIO_Init+0xfa>
 80027b8:	4a92      	ldr	r2, [pc, #584]	; (8002a04 <HAL_GPIO_Init+0x2ac>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d863      	bhi.n	8002886 <HAL_GPIO_Init+0x12e>
 80027be:	4a92      	ldr	r2, [pc, #584]	; (8002a08 <HAL_GPIO_Init+0x2b0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d046      	beq.n	8002852 <HAL_GPIO_Init+0xfa>
 80027c4:	4a90      	ldr	r2, [pc, #576]	; (8002a08 <HAL_GPIO_Init+0x2b0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d85d      	bhi.n	8002886 <HAL_GPIO_Init+0x12e>
 80027ca:	2b12      	cmp	r3, #18
 80027cc:	d82a      	bhi.n	8002824 <HAL_GPIO_Init+0xcc>
 80027ce:	2b12      	cmp	r3, #18
 80027d0:	d859      	bhi.n	8002886 <HAL_GPIO_Init+0x12e>
 80027d2:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <HAL_GPIO_Init+0x80>)
 80027d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d8:	08002853 	.word	0x08002853
 80027dc:	0800282d 	.word	0x0800282d
 80027e0:	0800283f 	.word	0x0800283f
 80027e4:	08002881 	.word	0x08002881
 80027e8:	08002887 	.word	0x08002887
 80027ec:	08002887 	.word	0x08002887
 80027f0:	08002887 	.word	0x08002887
 80027f4:	08002887 	.word	0x08002887
 80027f8:	08002887 	.word	0x08002887
 80027fc:	08002887 	.word	0x08002887
 8002800:	08002887 	.word	0x08002887
 8002804:	08002887 	.word	0x08002887
 8002808:	08002887 	.word	0x08002887
 800280c:	08002887 	.word	0x08002887
 8002810:	08002887 	.word	0x08002887
 8002814:	08002887 	.word	0x08002887
 8002818:	08002887 	.word	0x08002887
 800281c:	08002835 	.word	0x08002835
 8002820:	08002849 	.word	0x08002849
 8002824:	4a79      	ldr	r2, [pc, #484]	; (8002a0c <HAL_GPIO_Init+0x2b4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d013      	beq.n	8002852 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800282a:	e02c      	b.n	8002886 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	623b      	str	r3, [r7, #32]
          break;
 8002832:	e029      	b.n	8002888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	3304      	adds	r3, #4
 800283a:	623b      	str	r3, [r7, #32]
          break;
 800283c:	e024      	b.n	8002888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	3308      	adds	r3, #8
 8002844:	623b      	str	r3, [r7, #32]
          break;
 8002846:	e01f      	b.n	8002888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	330c      	adds	r3, #12
 800284e:	623b      	str	r3, [r7, #32]
          break;
 8002850:	e01a      	b.n	8002888 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d102      	bne.n	8002860 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800285a:	2304      	movs	r3, #4
 800285c:	623b      	str	r3, [r7, #32]
          break;
 800285e:	e013      	b.n	8002888 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d105      	bne.n	8002874 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002868:	2308      	movs	r3, #8
 800286a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	611a      	str	r2, [r3, #16]
          break;
 8002872:	e009      	b.n	8002888 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002874:	2308      	movs	r3, #8
 8002876:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	615a      	str	r2, [r3, #20]
          break;
 800287e:	e003      	b.n	8002888 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002880:	2300      	movs	r3, #0
 8002882:	623b      	str	r3, [r7, #32]
          break;
 8002884:	e000      	b.n	8002888 <HAL_GPIO_Init+0x130>
          break;
 8002886:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2bff      	cmp	r3, #255	; 0xff
 800288c:	d801      	bhi.n	8002892 <HAL_GPIO_Init+0x13a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	e001      	b.n	8002896 <HAL_GPIO_Init+0x13e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3304      	adds	r3, #4
 8002896:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	2bff      	cmp	r3, #255	; 0xff
 800289c:	d802      	bhi.n	80028a4 <HAL_GPIO_Init+0x14c>
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	e002      	b.n	80028aa <HAL_GPIO_Init+0x152>
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	3b08      	subs	r3, #8
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	210f      	movs	r1, #15
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	fa01 f303 	lsl.w	r3, r1, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	401a      	ands	r2, r3
 80028bc:	6a39      	ldr	r1, [r7, #32]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	fa01 f303 	lsl.w	r3, r1, r3
 80028c4:	431a      	orrs	r2, r3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80b1 	beq.w	8002a3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028d8:	4b4d      	ldr	r3, [pc, #308]	; (8002a10 <HAL_GPIO_Init+0x2b8>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	4a4c      	ldr	r2, [pc, #304]	; (8002a10 <HAL_GPIO_Init+0x2b8>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6193      	str	r3, [r2, #24]
 80028e4:	4b4a      	ldr	r3, [pc, #296]	; (8002a10 <HAL_GPIO_Init+0x2b8>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028f0:	4a48      	ldr	r2, [pc, #288]	; (8002a14 <HAL_GPIO_Init+0x2bc>)
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	089b      	lsrs	r3, r3, #2
 80028f6:	3302      	adds	r3, #2
 80028f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	220f      	movs	r2, #15
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4013      	ands	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a40      	ldr	r2, [pc, #256]	; (8002a18 <HAL_GPIO_Init+0x2c0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d013      	beq.n	8002944 <HAL_GPIO_Init+0x1ec>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a3f      	ldr	r2, [pc, #252]	; (8002a1c <HAL_GPIO_Init+0x2c4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00d      	beq.n	8002940 <HAL_GPIO_Init+0x1e8>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a3e      	ldr	r2, [pc, #248]	; (8002a20 <HAL_GPIO_Init+0x2c8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d007      	beq.n	800293c <HAL_GPIO_Init+0x1e4>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a3d      	ldr	r2, [pc, #244]	; (8002a24 <HAL_GPIO_Init+0x2cc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d101      	bne.n	8002938 <HAL_GPIO_Init+0x1e0>
 8002934:	2303      	movs	r3, #3
 8002936:	e006      	b.n	8002946 <HAL_GPIO_Init+0x1ee>
 8002938:	2304      	movs	r3, #4
 800293a:	e004      	b.n	8002946 <HAL_GPIO_Init+0x1ee>
 800293c:	2302      	movs	r3, #2
 800293e:	e002      	b.n	8002946 <HAL_GPIO_Init+0x1ee>
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <HAL_GPIO_Init+0x1ee>
 8002944:	2300      	movs	r3, #0
 8002946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002948:	f002 0203 	and.w	r2, r2, #3
 800294c:	0092      	lsls	r2, r2, #2
 800294e:	4093      	lsls	r3, r2
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4313      	orrs	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002956:	492f      	ldr	r1, [pc, #188]	; (8002a14 <HAL_GPIO_Init+0x2bc>)
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	089b      	lsrs	r3, r3, #2
 800295c:	3302      	adds	r3, #2
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d006      	beq.n	800297e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002970:	4b2d      	ldr	r3, [pc, #180]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	492c      	ldr	r1, [pc, #176]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	600b      	str	r3, [r1, #0]
 800297c:	e006      	b.n	800298c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800297e:	4b2a      	ldr	r3, [pc, #168]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	43db      	mvns	r3, r3
 8002986:	4928      	ldr	r1, [pc, #160]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 8002988:	4013      	ands	r3, r2
 800298a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d006      	beq.n	80029a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002998:	4b23      	ldr	r3, [pc, #140]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	4922      	ldr	r1, [pc, #136]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
 80029a4:	e006      	b.n	80029b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029a6:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	491e      	ldr	r1, [pc, #120]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d006      	beq.n	80029ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	4918      	ldr	r1, [pc, #96]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	608b      	str	r3, [r1, #8]
 80029cc:	e006      	b.n	80029dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029ce:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	4914      	ldr	r1, [pc, #80]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 80029d8:	4013      	ands	r3, r2
 80029da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d021      	beq.n	8002a2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029e8:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	490e      	ldr	r1, [pc, #56]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	60cb      	str	r3, [r1, #12]
 80029f4:	e021      	b.n	8002a3a <HAL_GPIO_Init+0x2e2>
 80029f6:	bf00      	nop
 80029f8:	10320000 	.word	0x10320000
 80029fc:	10310000 	.word	0x10310000
 8002a00:	10220000 	.word	0x10220000
 8002a04:	10210000 	.word	0x10210000
 8002a08:	10120000 	.word	0x10120000
 8002a0c:	10110000 	.word	0x10110000
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40010000 	.word	0x40010000
 8002a18:	40010800 	.word	0x40010800
 8002a1c:	40010c00 	.word	0x40010c00
 8002a20:	40011000 	.word	0x40011000
 8002a24:	40011400 	.word	0x40011400
 8002a28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_GPIO_Init+0x304>)
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	4909      	ldr	r1, [pc, #36]	; (8002a5c <HAL_GPIO_Init+0x304>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f47f ae8e 	bne.w	800276c <HAL_GPIO_Init+0x14>
  }
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	372c      	adds	r7, #44	; 0x2c
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	40010400 	.word	0x40010400

08002a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a70:	787b      	ldrb	r3, [r7, #1]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a7c:	e003      	b.n	8002a86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a7e:	887b      	ldrh	r3, [r7, #2]
 8002a80:	041a      	lsls	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	611a      	str	r2, [r3, #16]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a9a:	4b08      	ldr	r3, [pc, #32]	; (8002abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d006      	beq.n	8002ab4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aa6:	4a05      	ldr	r2, [pc, #20]	; (8002abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe ffb4 	bl	8001a1c <HAL_GPIO_EXTI_Callback>
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40010400 	.word	0x40010400

08002ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e12b      	b.n	8002d2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d106      	bne.n	8002aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff faaa 	bl	8002040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2224      	movs	r2, #36	; 0x24
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b24:	f001 f918 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
 8002b28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4a81      	ldr	r2, [pc, #516]	; (8002d34 <HAL_I2C_Init+0x274>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d807      	bhi.n	8002b44 <HAL_I2C_Init+0x84>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4a80      	ldr	r2, [pc, #512]	; (8002d38 <HAL_I2C_Init+0x278>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	bf94      	ite	ls
 8002b3c:	2301      	movls	r3, #1
 8002b3e:	2300      	movhi	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	e006      	b.n	8002b52 <HAL_I2C_Init+0x92>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4a7d      	ldr	r2, [pc, #500]	; (8002d3c <HAL_I2C_Init+0x27c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	bf94      	ite	ls
 8002b4c:	2301      	movls	r3, #1
 8002b4e:	2300      	movhi	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e0e7      	b.n	8002d2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4a78      	ldr	r2, [pc, #480]	; (8002d40 <HAL_I2C_Init+0x280>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	0c9b      	lsrs	r3, r3, #18
 8002b64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4a6a      	ldr	r2, [pc, #424]	; (8002d34 <HAL_I2C_Init+0x274>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d802      	bhi.n	8002b94 <HAL_I2C_Init+0xd4>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	3301      	adds	r3, #1
 8002b92:	e009      	b.n	8002ba8 <HAL_I2C_Init+0xe8>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	4a69      	ldr	r2, [pc, #420]	; (8002d44 <HAL_I2C_Init+0x284>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	099b      	lsrs	r3, r3, #6
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	430b      	orrs	r3, r1
 8002bae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	495c      	ldr	r1, [pc, #368]	; (8002d34 <HAL_I2C_Init+0x274>)
 8002bc4:	428b      	cmp	r3, r1
 8002bc6:	d819      	bhi.n	8002bfc <HAL_I2C_Init+0x13c>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	1e59      	subs	r1, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bd6:	1c59      	adds	r1, r3, #1
 8002bd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bdc:	400b      	ands	r3, r1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_I2C_Init+0x138>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1e59      	subs	r1, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf6:	e051      	b.n	8002c9c <HAL_I2C_Init+0x1dc>
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	e04f      	b.n	8002c9c <HAL_I2C_Init+0x1dc>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d111      	bne.n	8002c28 <HAL_I2C_Init+0x168>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	1e58      	subs	r0, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6859      	ldr	r1, [r3, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	440b      	add	r3, r1
 8002c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c16:	3301      	adds	r3, #1
 8002c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	e012      	b.n	8002c4e <HAL_I2C_Init+0x18e>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1e58      	subs	r0, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	0099      	lsls	r1, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3e:	3301      	adds	r3, #1
 8002c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_I2C_Init+0x196>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e022      	b.n	8002c9c <HAL_I2C_Init+0x1dc>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10e      	bne.n	8002c7c <HAL_I2C_Init+0x1bc>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1e58      	subs	r0, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6859      	ldr	r1, [r3, #4]
 8002c66:	460b      	mov	r3, r1
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	440b      	add	r3, r1
 8002c6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c7a:	e00f      	b.n	8002c9c <HAL_I2C_Init+0x1dc>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1e58      	subs	r0, r3, #1
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6859      	ldr	r1, [r3, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	0099      	lsls	r1, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c92:	3301      	adds	r3, #1
 8002c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	6809      	ldr	r1, [r1, #0]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69da      	ldr	r2, [r3, #28]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6911      	ldr	r1, [r2, #16]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68d2      	ldr	r2, [r2, #12]
 8002cd6:	4311      	orrs	r1, r2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	000186a0 	.word	0x000186a0
 8002d38:	001e847f 	.word	0x001e847f
 8002d3c:	003d08ff 	.word	0x003d08ff
 8002d40:	431bde83 	.word	0x431bde83
 8002d44:	10624dd3 	.word	0x10624dd3

08002d48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	607a      	str	r2, [r7, #4]
 8002d52:	461a      	mov	r2, r3
 8002d54:	460b      	mov	r3, r1
 8002d56:	817b      	strh	r3, [r7, #10]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d5c:	f7ff fbc0 	bl	80024e0 <HAL_GetTick>
 8002d60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	f040 80e0 	bne.w	8002f30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	2319      	movs	r3, #25
 8002d76:	2201      	movs	r2, #1
 8002d78:	4970      	ldr	r1, [pc, #448]	; (8002f3c <HAL_I2C_Master_Transmit+0x1f4>)
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fa92 	bl	80032a4 <I2C_WaitOnFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d86:	2302      	movs	r3, #2
 8002d88:	e0d3      	b.n	8002f32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_I2C_Master_Transmit+0x50>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e0cc      	b.n	8002f32 <HAL_I2C_Master_Transmit+0x1ea>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d007      	beq.n	8002dbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0201 	orr.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2221      	movs	r2, #33	; 0x21
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2210      	movs	r2, #16
 8002dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	893a      	ldrh	r2, [r7, #8]
 8002dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4a50      	ldr	r2, [pc, #320]	; (8002f40 <HAL_I2C_Master_Transmit+0x1f8>)
 8002dfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e00:	8979      	ldrh	r1, [r7, #10]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	6a3a      	ldr	r2, [r7, #32]
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f9ca 	bl	80031a0 <I2C_MasterRequestWrite>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e08d      	b.n	8002f32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e2c:	e066      	b.n	8002efc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	6a39      	ldr	r1, [r7, #32]
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fb0c 	bl	8003450 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00d      	beq.n	8002e5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d107      	bne.n	8002e56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e06b      	b.n	8002f32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	781a      	ldrb	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d11b      	bne.n	8002ed0 <HAL_I2C_Master_Transmit+0x188>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d017      	beq.n	8002ed0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	781a      	ldrb	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	6a39      	ldr	r1, [r7, #32]
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fafc 	bl	80034d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00d      	beq.n	8002efc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d107      	bne.n	8002ef8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e01a      	b.n	8002f32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d194      	bne.n	8002e2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e000      	b.n	8002f32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f30:	2302      	movs	r3, #2
  }
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	00100002 	.word	0x00100002
 8002f40:	ffff0000 	.word	0xffff0000

08002f44 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08a      	sub	sp, #40	; 0x28
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	460b      	mov	r3, r1
 8002f52:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f54:	f7ff fac4 	bl	80024e0 <HAL_GetTick>
 8002f58:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b20      	cmp	r3, #32
 8002f68:	f040 8111 	bne.w	800318e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	2319      	movs	r3, #25
 8002f72:	2201      	movs	r2, #1
 8002f74:	4988      	ldr	r1, [pc, #544]	; (8003198 <HAL_I2C_IsDeviceReady+0x254>)
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f994 	bl	80032a4 <I2C_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f82:	2302      	movs	r3, #2
 8002f84:	e104      	b.n	8003190 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_I2C_IsDeviceReady+0x50>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e0fd      	b.n	8003190 <HAL_I2C_IsDeviceReady+0x24c>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d007      	beq.n	8002fba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0201 	orr.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2224      	movs	r2, #36	; 0x24
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4a70      	ldr	r2, [pc, #448]	; (800319c <HAL_I2C_IsDeviceReady+0x258>)
 8002fdc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f952 	bl	80032a4 <I2C_WaitOnFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00d      	beq.n	8003022 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003014:	d103      	bne.n	800301e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e0b6      	b.n	8003190 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003022:	897b      	ldrh	r3, [r7, #10]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	461a      	mov	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003030:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003032:	f7ff fa55 	bl	80024e0 <HAL_GetTick>
 8003036:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b02      	cmp	r3, #2
 8003044:	bf0c      	ite	eq
 8003046:	2301      	moveq	r3, #1
 8003048:	2300      	movne	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305c:	bf0c      	ite	eq
 800305e:	2301      	moveq	r3, #1
 8003060:	2300      	movne	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003066:	e025      	b.n	80030b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003068:	f7ff fa3a 	bl	80024e0 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d302      	bcc.n	800307e <HAL_I2C_IsDeviceReady+0x13a>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d103      	bne.n	8003086 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	22a0      	movs	r2, #160	; 0xa0
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b02      	cmp	r3, #2
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030aa:	bf0c      	ite	eq
 80030ac:	2301      	moveq	r3, #1
 80030ae:	2300      	movne	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2ba0      	cmp	r3, #160	; 0xa0
 80030be:	d005      	beq.n	80030cc <HAL_I2C_IsDeviceReady+0x188>
 80030c0:	7dfb      	ldrb	r3, [r7, #23]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <HAL_I2C_IsDeviceReady+0x188>
 80030c6:	7dbb      	ldrb	r3, [r7, #22]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0cd      	beq.n	8003068 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d129      	bne.n	8003136 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	2319      	movs	r3, #25
 800310e:	2201      	movs	r2, #1
 8003110:	4921      	ldr	r1, [pc, #132]	; (8003198 <HAL_I2C_IsDeviceReady+0x254>)
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f8c6 	bl	80032a4 <I2C_WaitOnFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e036      	b.n	8003190 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	e02c      	b.n	8003190 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003144:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800314e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2319      	movs	r3, #25
 8003156:	2201      	movs	r2, #1
 8003158:	490f      	ldr	r1, [pc, #60]	; (8003198 <HAL_I2C_IsDeviceReady+0x254>)
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f8a2 	bl	80032a4 <I2C_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e012      	b.n	8003190 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	3301      	adds	r3, #1
 800316e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	429a      	cmp	r2, r3
 8003176:	f4ff af32 	bcc.w	8002fde <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800318e:	2302      	movs	r3, #2
  }
}
 8003190:	4618      	mov	r0, r3
 8003192:	3720      	adds	r7, #32
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	00100002 	.word	0x00100002
 800319c:	ffff0000 	.word	0xffff0000

080031a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af02      	add	r7, sp, #8
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	460b      	mov	r3, r1
 80031ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d006      	beq.n	80031ca <I2C_MasterRequestWrite+0x2a>
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d003      	beq.n	80031ca <I2C_MasterRequestWrite+0x2a>
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031c8:	d108      	bne.n	80031dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	e00b      	b.n	80031f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	2b12      	cmp	r3, #18
 80031e2:	d107      	bne.n	80031f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f84f 	bl	80032a4 <I2C_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00d      	beq.n	8003228 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800321a:	d103      	bne.n	8003224 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003222:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e035      	b.n	8003294 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003230:	d108      	bne.n	8003244 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003232:	897b      	ldrh	r3, [r7, #10]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	461a      	mov	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003240:	611a      	str	r2, [r3, #16]
 8003242:	e01b      	b.n	800327c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003244:	897b      	ldrh	r3, [r7, #10]
 8003246:	11db      	asrs	r3, r3, #7
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f003 0306 	and.w	r3, r3, #6
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f063 030f 	orn	r3, r3, #15
 8003254:	b2da      	uxtb	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	490e      	ldr	r1, [pc, #56]	; (800329c <I2C_MasterRequestWrite+0xfc>)
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f875 	bl	8003352 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e010      	b.n	8003294 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003272:	897b      	ldrh	r3, [r7, #10]
 8003274:	b2da      	uxtb	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	4907      	ldr	r1, [pc, #28]	; (80032a0 <I2C_MasterRequestWrite+0x100>)
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f865 	bl	8003352 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	00010008 	.word	0x00010008
 80032a0:	00010002 	.word	0x00010002

080032a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	4613      	mov	r3, r2
 80032b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032b4:	e025      	b.n	8003302 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032bc:	d021      	beq.n	8003302 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032be:	f7ff f90f 	bl	80024e0 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d302      	bcc.n	80032d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d116      	bne.n	8003302 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f043 0220 	orr.w	r2, r3, #32
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e023      	b.n	800334a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	0c1b      	lsrs	r3, r3, #16
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d10d      	bne.n	8003328 <I2C_WaitOnFlagUntilTimeout+0x84>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	43da      	mvns	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4013      	ands	r3, r2
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	bf0c      	ite	eq
 800331e:	2301      	moveq	r3, #1
 8003320:	2300      	movne	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	e00c      	b.n	8003342 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	43da      	mvns	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4013      	ands	r3, r2
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	bf0c      	ite	eq
 800333a:	2301      	moveq	r3, #1
 800333c:	2300      	movne	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	461a      	mov	r2, r3
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	429a      	cmp	r2, r3
 8003346:	d0b6      	beq.n	80032b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003360:	e051      	b.n	8003406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003370:	d123      	bne.n	80033ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003380:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800338a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f043 0204 	orr.w	r2, r3, #4
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e046      	b.n	8003448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033c0:	d021      	beq.n	8003406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c2:	f7ff f88d 	bl	80024e0 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d302      	bcc.n	80033d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d116      	bne.n	8003406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f043 0220 	orr.w	r2, r3, #32
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e020      	b.n	8003448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	0c1b      	lsrs	r3, r3, #16
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d10c      	bne.n	800342a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	43da      	mvns	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4013      	ands	r3, r2
 800341c:	b29b      	uxth	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	bf14      	ite	ne
 8003422:	2301      	movne	r3, #1
 8003424:	2300      	moveq	r3, #0
 8003426:	b2db      	uxtb	r3, r3
 8003428:	e00b      	b.n	8003442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	43da      	mvns	r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	4013      	ands	r3, r2
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	bf14      	ite	ne
 800343c:	2301      	movne	r3, #1
 800343e:	2300      	moveq	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d18d      	bne.n	8003362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800345c:	e02d      	b.n	80034ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f878 	bl	8003554 <I2C_IsAcknowledgeFailed>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e02d      	b.n	80034ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003474:	d021      	beq.n	80034ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7ff f833 	bl	80024e0 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d116      	bne.n	80034ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f043 0220 	orr.w	r2, r3, #32
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e007      	b.n	80034ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	2b80      	cmp	r3, #128	; 0x80
 80034c6:	d1ca      	bne.n	800345e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034de:	e02d      	b.n	800353c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f837 	bl	8003554 <I2C_IsAcknowledgeFailed>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e02d      	b.n	800354c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034f6:	d021      	beq.n	800353c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f8:	f7fe fff2 	bl	80024e0 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	429a      	cmp	r2, r3
 8003506:	d302      	bcc.n	800350e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d116      	bne.n	800353c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	f043 0220 	orr.w	r2, r3, #32
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e007      	b.n	800354c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b04      	cmp	r3, #4
 8003548:	d1ca      	bne.n	80034e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800356a:	d11b      	bne.n	80035a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003574:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f043 0204 	orr.w	r2, r3, #4
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e272      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 8087 	beq.w	80036de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035d0:	4b92      	ldr	r3, [pc, #584]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d00c      	beq.n	80035f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035dc:	4b8f      	ldr	r3, [pc, #572]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 030c 	and.w	r3, r3, #12
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d112      	bne.n	800360e <HAL_RCC_OscConfig+0x5e>
 80035e8:	4b8c      	ldr	r3, [pc, #560]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f4:	d10b      	bne.n	800360e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f6:	4b89      	ldr	r3, [pc, #548]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d06c      	beq.n	80036dc <HAL_RCC_OscConfig+0x12c>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d168      	bne.n	80036dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e24c      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003616:	d106      	bne.n	8003626 <HAL_RCC_OscConfig+0x76>
 8003618:	4b80      	ldr	r3, [pc, #512]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a7f      	ldr	r2, [pc, #508]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 800361e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	e02e      	b.n	8003684 <HAL_RCC_OscConfig+0xd4>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10c      	bne.n	8003648 <HAL_RCC_OscConfig+0x98>
 800362e:	4b7b      	ldr	r3, [pc, #492]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a7a      	ldr	r2, [pc, #488]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 8003634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	4b78      	ldr	r3, [pc, #480]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a77      	ldr	r2, [pc, #476]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 8003640:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	e01d      	b.n	8003684 <HAL_RCC_OscConfig+0xd4>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003650:	d10c      	bne.n	800366c <HAL_RCC_OscConfig+0xbc>
 8003652:	4b72      	ldr	r3, [pc, #456]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a71      	ldr	r2, [pc, #452]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 8003658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	4b6f      	ldr	r3, [pc, #444]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a6e      	ldr	r2, [pc, #440]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 8003664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	e00b      	b.n	8003684 <HAL_RCC_OscConfig+0xd4>
 800366c:	4b6b      	ldr	r3, [pc, #428]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a6a      	ldr	r2, [pc, #424]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 8003672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	4b68      	ldr	r3, [pc, #416]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a67      	ldr	r2, [pc, #412]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 800367e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003682:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d013      	beq.n	80036b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368c:	f7fe ff28 	bl	80024e0 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003694:	f7fe ff24 	bl	80024e0 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	; 0x64
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e200      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a6:	4b5d      	ldr	r3, [pc, #372]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCC_OscConfig+0xe4>
 80036b2:	e014      	b.n	80036de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fe ff14 	bl	80024e0 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036bc:	f7fe ff10 	bl	80024e0 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b64      	cmp	r3, #100	; 0x64
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e1ec      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ce:	4b53      	ldr	r3, [pc, #332]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x10c>
 80036da:	e000      	b.n	80036de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d063      	beq.n	80037b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036ea:	4b4c      	ldr	r3, [pc, #304]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00b      	beq.n	800370e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036f6:	4b49      	ldr	r3, [pc, #292]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d11c      	bne.n	800373c <HAL_RCC_OscConfig+0x18c>
 8003702:	4b46      	ldr	r3, [pc, #280]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d116      	bne.n	800373c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370e:	4b43      	ldr	r3, [pc, #268]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_RCC_OscConfig+0x176>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d001      	beq.n	8003726 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e1c0      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003726:	4b3d      	ldr	r3, [pc, #244]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4939      	ldr	r1, [pc, #228]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373a:	e03a      	b.n	80037b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d020      	beq.n	8003786 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003744:	4b36      	ldr	r3, [pc, #216]	; (8003820 <HAL_RCC_OscConfig+0x270>)
 8003746:	2201      	movs	r2, #1
 8003748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374a:	f7fe fec9 	bl	80024e0 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003752:	f7fe fec5 	bl	80024e0 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e1a1      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003764:	4b2d      	ldr	r3, [pc, #180]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f0      	beq.n	8003752 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003770:	4b2a      	ldr	r3, [pc, #168]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	4927      	ldr	r1, [pc, #156]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 8003780:	4313      	orrs	r3, r2
 8003782:	600b      	str	r3, [r1, #0]
 8003784:	e015      	b.n	80037b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003786:	4b26      	ldr	r3, [pc, #152]	; (8003820 <HAL_RCC_OscConfig+0x270>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe fea8 	bl	80024e0 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003794:	f7fe fea4 	bl	80024e0 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e180      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a6:	4b1d      	ldr	r3, [pc, #116]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d03a      	beq.n	8003834 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d019      	beq.n	80037fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c6:	4b17      	ldr	r3, [pc, #92]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037cc:	f7fe fe88 	bl	80024e0 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d4:	f7fe fe84 	bl	80024e0 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e160      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e6:	4b0d      	ldr	r3, [pc, #52]	; (800381c <HAL_RCC_OscConfig+0x26c>)
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037f2:	2001      	movs	r0, #1
 80037f4:	f000 fac4 	bl	8003d80 <RCC_Delay>
 80037f8:	e01c      	b.n	8003834 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037fa:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003800:	f7fe fe6e 	bl	80024e0 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003806:	e00f      	b.n	8003828 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003808:	f7fe fe6a 	bl	80024e0 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d908      	bls.n	8003828 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e146      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4f8>
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000
 8003820:	42420000 	.word	0x42420000
 8003824:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003828:	4b92      	ldr	r3, [pc, #584]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e9      	bne.n	8003808 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80a6 	beq.w	800398e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003842:	2300      	movs	r3, #0
 8003844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003846:	4b8b      	ldr	r3, [pc, #556]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10d      	bne.n	800386e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003852:	4b88      	ldr	r3, [pc, #544]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	4a87      	ldr	r2, [pc, #540]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 8003858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385c:	61d3      	str	r3, [r2, #28]
 800385e:	4b85      	ldr	r3, [pc, #532]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800386a:	2301      	movs	r3, #1
 800386c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386e:	4b82      	ldr	r3, [pc, #520]	; (8003a78 <HAL_RCC_OscConfig+0x4c8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003876:	2b00      	cmp	r3, #0
 8003878:	d118      	bne.n	80038ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800387a:	4b7f      	ldr	r3, [pc, #508]	; (8003a78 <HAL_RCC_OscConfig+0x4c8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a7e      	ldr	r2, [pc, #504]	; (8003a78 <HAL_RCC_OscConfig+0x4c8>)
 8003880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003886:	f7fe fe2b 	bl	80024e0 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388e:	f7fe fe27 	bl	80024e0 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b64      	cmp	r3, #100	; 0x64
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e103      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a0:	4b75      	ldr	r3, [pc, #468]	; (8003a78 <HAL_RCC_OscConfig+0x4c8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d106      	bne.n	80038c2 <HAL_RCC_OscConfig+0x312>
 80038b4:	4b6f      	ldr	r3, [pc, #444]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	4a6e      	ldr	r2, [pc, #440]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	6213      	str	r3, [r2, #32]
 80038c0:	e02d      	b.n	800391e <HAL_RCC_OscConfig+0x36e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10c      	bne.n	80038e4 <HAL_RCC_OscConfig+0x334>
 80038ca:	4b6a      	ldr	r3, [pc, #424]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	4a69      	ldr	r2, [pc, #420]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 80038d0:	f023 0301 	bic.w	r3, r3, #1
 80038d4:	6213      	str	r3, [r2, #32]
 80038d6:	4b67      	ldr	r3, [pc, #412]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	4a66      	ldr	r2, [pc, #408]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 80038dc:	f023 0304 	bic.w	r3, r3, #4
 80038e0:	6213      	str	r3, [r2, #32]
 80038e2:	e01c      	b.n	800391e <HAL_RCC_OscConfig+0x36e>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	2b05      	cmp	r3, #5
 80038ea:	d10c      	bne.n	8003906 <HAL_RCC_OscConfig+0x356>
 80038ec:	4b61      	ldr	r3, [pc, #388]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	4a60      	ldr	r2, [pc, #384]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	f043 0304 	orr.w	r3, r3, #4
 80038f6:	6213      	str	r3, [r2, #32]
 80038f8:	4b5e      	ldr	r3, [pc, #376]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	4a5d      	ldr	r2, [pc, #372]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	6213      	str	r3, [r2, #32]
 8003904:	e00b      	b.n	800391e <HAL_RCC_OscConfig+0x36e>
 8003906:	4b5b      	ldr	r3, [pc, #364]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	4a5a      	ldr	r2, [pc, #360]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	6213      	str	r3, [r2, #32]
 8003912:	4b58      	ldr	r3, [pc, #352]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	4a57      	ldr	r2, [pc, #348]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 8003918:	f023 0304 	bic.w	r3, r3, #4
 800391c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d015      	beq.n	8003952 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003926:	f7fe fddb 	bl	80024e0 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392c:	e00a      	b.n	8003944 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392e:	f7fe fdd7 	bl	80024e0 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	f241 3288 	movw	r2, #5000	; 0x1388
 800393c:	4293      	cmp	r3, r2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e0b1      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003944:	4b4b      	ldr	r3, [pc, #300]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0ee      	beq.n	800392e <HAL_RCC_OscConfig+0x37e>
 8003950:	e014      	b.n	800397c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003952:	f7fe fdc5 	bl	80024e0 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003958:	e00a      	b.n	8003970 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395a:	f7fe fdc1 	bl	80024e0 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	f241 3288 	movw	r2, #5000	; 0x1388
 8003968:	4293      	cmp	r3, r2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e09b      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003970:	4b40      	ldr	r3, [pc, #256]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1ee      	bne.n	800395a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d105      	bne.n	800398e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003982:	4b3c      	ldr	r3, [pc, #240]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	4a3b      	ldr	r2, [pc, #236]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 8003988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 8087 	beq.w	8003aa6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003998:	4b36      	ldr	r3, [pc, #216]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 030c 	and.w	r3, r3, #12
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d061      	beq.n	8003a68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d146      	bne.n	8003a3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ac:	4b33      	ldr	r3, [pc, #204]	; (8003a7c <HAL_RCC_OscConfig+0x4cc>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b2:	f7fe fd95 	bl	80024e0 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ba:	f7fe fd91 	bl	80024e0 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e06d      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039cc:	4b29      	ldr	r3, [pc, #164]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f0      	bne.n	80039ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e0:	d108      	bne.n	80039f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039e2:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	4921      	ldr	r1, [pc, #132]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039f4:	4b1f      	ldr	r3, [pc, #124]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a19      	ldr	r1, [r3, #32]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	430b      	orrs	r3, r1
 8003a06:	491b      	ldr	r1, [pc, #108]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a0c:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <HAL_RCC_OscConfig+0x4cc>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a12:	f7fe fd65 	bl	80024e0 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1a:	f7fe fd61 	bl	80024e0 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e03d      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a2c:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCC_OscConfig+0x46a>
 8003a38:	e035      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <HAL_RCC_OscConfig+0x4cc>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fe fd4e 	bl	80024e0 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a48:	f7fe fd4a 	bl	80024e0 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e026      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_RCC_OscConfig+0x4c4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x498>
 8003a66:	e01e      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d107      	bne.n	8003a80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e019      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4f8>
 8003a74:	40021000 	.word	0x40021000
 8003a78:	40007000 	.word	0x40007000
 8003a7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_RCC_OscConfig+0x500>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d106      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40021000 	.word	0x40021000

08003ab4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0d0      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b6a      	ldr	r3, [pc, #424]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d910      	bls.n	8003af8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b67      	ldr	r3, [pc, #412]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 0207 	bic.w	r2, r3, #7
 8003ade:	4965      	ldr	r1, [pc, #404]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b63      	ldr	r3, [pc, #396]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0b8      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d020      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b10:	4b59      	ldr	r3, [pc, #356]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	4a58      	ldr	r2, [pc, #352]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b28:	4b53      	ldr	r3, [pc, #332]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4a52      	ldr	r2, [pc, #328]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b34:	4b50      	ldr	r3, [pc, #320]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	494d      	ldr	r1, [pc, #308]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d040      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d107      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	4b47      	ldr	r3, [pc, #284]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d115      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e07f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d107      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b72:	4b41      	ldr	r3, [pc, #260]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e073      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b82:	4b3d      	ldr	r3, [pc, #244]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e06b      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b92:	4b39      	ldr	r3, [pc, #228]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f023 0203 	bic.w	r2, r3, #3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4936      	ldr	r1, [pc, #216]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ba4:	f7fe fc9c 	bl	80024e0 <HAL_GetTick>
 8003ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bac:	f7fe fc98 	bl	80024e0 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e053      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc2:	4b2d      	ldr	r3, [pc, #180]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f003 020c 	and.w	r2, r3, #12
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d1eb      	bne.n	8003bac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bd4:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d210      	bcs.n	8003c04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be2:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f023 0207 	bic.w	r2, r3, #7
 8003bea:	4922      	ldr	r1, [pc, #136]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf2:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e032      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c10:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	4916      	ldr	r1, [pc, #88]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c2e:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	490e      	ldr	r1, [pc, #56]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c42:	f000 f821 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8003c46:	4602      	mov	r2, r0
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	490a      	ldr	r1, [pc, #40]	; (8003c7c <HAL_RCC_ClockConfig+0x1c8>)
 8003c54:	5ccb      	ldrb	r3, [r1, r3]
 8003c56:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5a:	4a09      	ldr	r2, [pc, #36]	; (8003c80 <HAL_RCC_ClockConfig+0x1cc>)
 8003c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <HAL_RCC_ClockConfig+0x1d0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe fbfa 	bl	800245c <HAL_InitTick>

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40022000 	.word	0x40022000
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	08009d00 	.word	0x08009d00
 8003c80:	20000008 	.word	0x20000008
 8003c84:	2000000c 	.word	0x2000000c

08003c88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c88:	b490      	push	{r4, r7}
 8003c8a:	b08a      	sub	sp, #40	; 0x28
 8003c8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c8e:	4b29      	ldr	r3, [pc, #164]	; (8003d34 <HAL_RCC_GetSysClockFreq+0xac>)
 8003c90:	1d3c      	adds	r4, r7, #4
 8003c92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c98:	f240 2301 	movw	r3, #513	; 0x201
 8003c9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8003caa:	2300      	movs	r3, #0
 8003cac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cb2:	4b21      	ldr	r3, [pc, #132]	; (8003d38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d002      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d003      	beq.n	8003cce <HAL_RCC_GetSysClockFreq+0x46>
 8003cc6:	e02b      	b.n	8003d20 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cc8:	4b1c      	ldr	r3, [pc, #112]	; (8003d3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cca:	623b      	str	r3, [r7, #32]
      break;
 8003ccc:	e02b      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	0c9b      	lsrs	r3, r3, #18
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	3328      	adds	r3, #40	; 0x28
 8003cd8:	443b      	add	r3, r7
 8003cda:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003cde:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d012      	beq.n	8003d10 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cea:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	0c5b      	lsrs	r3, r3, #17
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	3328      	adds	r3, #40	; 0x28
 8003cf6:	443b      	add	r3, r7
 8003cf8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003cfc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	4a0e      	ldr	r2, [pc, #56]	; (8003d3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d02:	fb03 f202 	mul.w	r2, r3, r2
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0e:	e004      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	4a0b      	ldr	r2, [pc, #44]	; (8003d40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d14:	fb02 f303 	mul.w	r3, r2, r3
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	623b      	str	r3, [r7, #32]
      break;
 8003d1e:	e002      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d20:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d22:	623b      	str	r3, [r7, #32]
      break;
 8003d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d26:	6a3b      	ldr	r3, [r7, #32]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3728      	adds	r7, #40	; 0x28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc90      	pop	{r4, r7}
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	08009584 	.word	0x08009584
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	007a1200 	.word	0x007a1200
 8003d40:	003d0900 	.word	0x003d0900

08003d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d48:	4b02      	ldr	r3, [pc, #8]	; (8003d54 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr
 8003d54:	20000008 	.word	0x20000008

08003d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d5c:	f7ff fff2 	bl	8003d44 <HAL_RCC_GetHCLKFreq>
 8003d60:	4602      	mov	r2, r0
 8003d62:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	0a1b      	lsrs	r3, r3, #8
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	4903      	ldr	r1, [pc, #12]	; (8003d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d6e:	5ccb      	ldrb	r3, [r1, r3]
 8003d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	08009d10 	.word	0x08009d10

08003d80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d88:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <RCC_Delay+0x34>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <RCC_Delay+0x38>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	0a5b      	lsrs	r3, r3, #9
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	fb02 f303 	mul.w	r3, r2, r3
 8003d9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d9c:	bf00      	nop
  }
  while (Delay --);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1e5a      	subs	r2, r3, #1
 8003da2:	60fa      	str	r2, [r7, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f9      	bne.n	8003d9c <RCC_Delay+0x1c>
}
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr
 8003db4:	20000008 	.word	0x20000008
 8003db8:	10624dd3 	.word	0x10624dd3

08003dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e041      	b.n	8003e52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fe f97c 	bl	80020e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3304      	adds	r3, #4
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	f000 fc9e 	bl	800473c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d001      	beq.n	8003e74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e032      	b.n	8003eda <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a18      	ldr	r2, [pc, #96]	; (8003ee4 <HAL_TIM_Base_Start+0x88>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00e      	beq.n	8003ea4 <HAL_TIM_Base_Start+0x48>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8e:	d009      	beq.n	8003ea4 <HAL_TIM_Base_Start+0x48>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a14      	ldr	r2, [pc, #80]	; (8003ee8 <HAL_TIM_Base_Start+0x8c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <HAL_TIM_Base_Start+0x48>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a13      	ldr	r2, [pc, #76]	; (8003eec <HAL_TIM_Base_Start+0x90>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d111      	bne.n	8003ec8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b06      	cmp	r3, #6
 8003eb4:	d010      	beq.n	8003ed8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0201 	orr.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec6:	e007      	b.n	8003ed8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr
 8003ee4:	40012c00 	.word	0x40012c00
 8003ee8:	40000400 	.word	0x40000400
 8003eec:	40000800 	.word	0x40000800

08003ef0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e041      	b.n	8003f86 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f839 	bl	8003f8e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4610      	mov	r0, r2
 8003f30:	f000 fc04 	bl	800473c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d104      	bne.n	8003fba <HAL_TIM_IC_Start_IT+0x1a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	e013      	b.n	8003fe2 <HAL_TIM_IC_Start_IT+0x42>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d104      	bne.n	8003fca <HAL_TIM_IC_Start_IT+0x2a>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	e00b      	b.n	8003fe2 <HAL_TIM_IC_Start_IT+0x42>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d104      	bne.n	8003fda <HAL_TIM_IC_Start_IT+0x3a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	e003      	b.n	8003fe2 <HAL_TIM_IC_Start_IT+0x42>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d104      	bne.n	8003ff4 <HAL_TIM_IC_Start_IT+0x54>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e013      	b.n	800401c <HAL_TIM_IC_Start_IT+0x7c>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d104      	bne.n	8004004 <HAL_TIM_IC_Start_IT+0x64>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004000:	b2db      	uxtb	r3, r3
 8004002:	e00b      	b.n	800401c <HAL_TIM_IC_Start_IT+0x7c>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b08      	cmp	r3, #8
 8004008:	d104      	bne.n	8004014 <HAL_TIM_IC_Start_IT+0x74>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004010:	b2db      	uxtb	r3, r3
 8004012:	e003      	b.n	800401c <HAL_TIM_IC_Start_IT+0x7c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800401a:	b2db      	uxtb	r3, r3
 800401c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800401e:	7bfb      	ldrb	r3, [r7, #15]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d102      	bne.n	800402a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004024:	7bbb      	ldrb	r3, [r7, #14]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d001      	beq.n	800402e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e0b3      	b.n	8004196 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d104      	bne.n	800403e <HAL_TIM_IC_Start_IT+0x9e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800403c:	e013      	b.n	8004066 <HAL_TIM_IC_Start_IT+0xc6>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b04      	cmp	r3, #4
 8004042:	d104      	bne.n	800404e <HAL_TIM_IC_Start_IT+0xae>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800404c:	e00b      	b.n	8004066 <HAL_TIM_IC_Start_IT+0xc6>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b08      	cmp	r3, #8
 8004052:	d104      	bne.n	800405e <HAL_TIM_IC_Start_IT+0xbe>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800405c:	e003      	b.n	8004066 <HAL_TIM_IC_Start_IT+0xc6>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2202      	movs	r2, #2
 8004062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d104      	bne.n	8004076 <HAL_TIM_IC_Start_IT+0xd6>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004074:	e013      	b.n	800409e <HAL_TIM_IC_Start_IT+0xfe>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b04      	cmp	r3, #4
 800407a:	d104      	bne.n	8004086 <HAL_TIM_IC_Start_IT+0xe6>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004084:	e00b      	b.n	800409e <HAL_TIM_IC_Start_IT+0xfe>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b08      	cmp	r3, #8
 800408a:	d104      	bne.n	8004096 <HAL_TIM_IC_Start_IT+0xf6>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004094:	e003      	b.n	800409e <HAL_TIM_IC_Start_IT+0xfe>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2202      	movs	r2, #2
 800409a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b0c      	cmp	r3, #12
 80040a2:	d841      	bhi.n	8004128 <HAL_TIM_IC_Start_IT+0x188>
 80040a4:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <HAL_TIM_IC_Start_IT+0x10c>)
 80040a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040aa:	bf00      	nop
 80040ac:	080040e1 	.word	0x080040e1
 80040b0:	08004129 	.word	0x08004129
 80040b4:	08004129 	.word	0x08004129
 80040b8:	08004129 	.word	0x08004129
 80040bc:	080040f3 	.word	0x080040f3
 80040c0:	08004129 	.word	0x08004129
 80040c4:	08004129 	.word	0x08004129
 80040c8:	08004129 	.word	0x08004129
 80040cc:	08004105 	.word	0x08004105
 80040d0:	08004129 	.word	0x08004129
 80040d4:	08004129 	.word	0x08004129
 80040d8:	08004129 	.word	0x08004129
 80040dc:	08004117 	.word	0x08004117
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0202 	orr.w	r2, r2, #2
 80040ee:	60da      	str	r2, [r3, #12]
      break;
 80040f0:	e01b      	b.n	800412a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 0204 	orr.w	r2, r2, #4
 8004100:	60da      	str	r2, [r3, #12]
      break;
 8004102:	e012      	b.n	800412a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0208 	orr.w	r2, r2, #8
 8004112:	60da      	str	r2, [r3, #12]
      break;
 8004114:	e009      	b.n	800412a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0210 	orr.w	r2, r2, #16
 8004124:	60da      	str	r2, [r3, #12]
      break;
 8004126:	e000      	b.n	800412a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004128:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2201      	movs	r2, #1
 8004130:	6839      	ldr	r1, [r7, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fd07 	bl	8004b46 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a18      	ldr	r2, [pc, #96]	; (80041a0 <HAL_TIM_IC_Start_IT+0x200>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00e      	beq.n	8004160 <HAL_TIM_IC_Start_IT+0x1c0>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414a:	d009      	beq.n	8004160 <HAL_TIM_IC_Start_IT+0x1c0>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a14      	ldr	r2, [pc, #80]	; (80041a4 <HAL_TIM_IC_Start_IT+0x204>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <HAL_TIM_IC_Start_IT+0x1c0>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a13      	ldr	r2, [pc, #76]	; (80041a8 <HAL_TIM_IC_Start_IT+0x208>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d111      	bne.n	8004184 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b06      	cmp	r3, #6
 8004170:	d010      	beq.n	8004194 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0201 	orr.w	r2, r2, #1
 8004180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004182:	e007      	b.n	8004194 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40012c00 	.word	0x40012c00
 80041a4:	40000400 	.word	0x40000400
 80041a8:	40000800 	.word	0x40000800

080041ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d122      	bne.n	8004208 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d11b      	bne.n	8004208 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0202 	mvn.w	r2, #2
 80041d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fd f8da 	bl	80013a8 <HAL_TIM_IC_CaptureCallback>
 80041f4:	e005      	b.n	8004202 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fa85 	bl	8004706 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fa8b 	bl	8004718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b04      	cmp	r3, #4
 8004214:	d122      	bne.n	800425c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b04      	cmp	r3, #4
 8004222:	d11b      	bne.n	800425c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f06f 0204 	mvn.w	r2, #4
 800422c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2202      	movs	r2, #2
 8004232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7fd f8b0 	bl	80013a8 <HAL_TIM_IC_CaptureCallback>
 8004248:	e005      	b.n	8004256 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fa5b 	bl	8004706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 fa61 	bl	8004718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b08      	cmp	r3, #8
 8004268:	d122      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b08      	cmp	r3, #8
 8004276:	d11b      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0208 	mvn.w	r2, #8
 8004280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2204      	movs	r2, #4
 8004286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fd f886 	bl	80013a8 <HAL_TIM_IC_CaptureCallback>
 800429c:	e005      	b.n	80042aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fa31 	bl	8004706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fa37 	bl	8004718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b10      	cmp	r3, #16
 80042bc:	d122      	bne.n	8004304 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d11b      	bne.n	8004304 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0210 	mvn.w	r2, #16
 80042d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2208      	movs	r2, #8
 80042da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7fd f85c 	bl	80013a8 <HAL_TIM_IC_CaptureCallback>
 80042f0:	e005      	b.n	80042fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fa07 	bl	8004706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fa0d 	bl	8004718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b01      	cmp	r3, #1
 8004310:	d10e      	bne.n	8004330 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b01      	cmp	r3, #1
 800431e:	d107      	bne.n	8004330 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0201 	mvn.w	r2, #1
 8004328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f9e2 	bl	80046f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433a:	2b80      	cmp	r3, #128	; 0x80
 800433c:	d10e      	bne.n	800435c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004348:	2b80      	cmp	r3, #128	; 0x80
 800434a:	d107      	bne.n	800435c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fc81 	bl	8004c5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004366:	2b40      	cmp	r3, #64	; 0x40
 8004368:	d10e      	bne.n	8004388 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004374:	2b40      	cmp	r3, #64	; 0x40
 8004376:	d107      	bne.n	8004388 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f9d1 	bl	800472a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b20      	cmp	r3, #32
 8004394:	d10e      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	d107      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0220 	mvn.w	r2, #32
 80043ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fc4c 	bl	8004c4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043b4:	bf00      	nop
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e082      	b.n	80044dc <HAL_TIM_IC_ConfigChannel+0x120>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d11b      	bne.n	800441c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	6819      	ldr	r1, [r3, #0]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f000 fa04 	bl	8004800 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699a      	ldr	r2, [r3, #24]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 020c 	bic.w	r2, r2, #12
 8004406:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6999      	ldr	r1, [r3, #24]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	619a      	str	r2, [r3, #24]
 800441a:	e05a      	b.n	80044d2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b04      	cmp	r3, #4
 8004420:	d11c      	bne.n	800445c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	6819      	ldr	r1, [r3, #0]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f000 fa6d 	bl	8004910 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699a      	ldr	r2, [r3, #24]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004444:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6999      	ldr	r1, [r3, #24]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	021a      	lsls	r2, r3, #8
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	619a      	str	r2, [r3, #24]
 800445a:	e03a      	b.n	80044d2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b08      	cmp	r3, #8
 8004460:	d11b      	bne.n	800449a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	6819      	ldr	r1, [r3, #0]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f000 fab8 	bl	80049e6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 020c 	bic.w	r2, r2, #12
 8004484:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69d9      	ldr	r1, [r3, #28]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	61da      	str	r2, [r3, #28]
 8004498:	e01b      	b.n	80044d2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	6819      	ldr	r1, [r3, #0]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f000 fad7 	bl	8004a5c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80044bc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69d9      	ldr	r1, [r3, #28]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	021a      	lsls	r2, r3, #8
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_TIM_ConfigClockSource+0x18>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e0b3      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x180>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800451a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004522:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004534:	d03e      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0xd0>
 8004536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800453a:	f200 8087 	bhi.w	800464c <HAL_TIM_ConfigClockSource+0x168>
 800453e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004542:	f000 8085 	beq.w	8004650 <HAL_TIM_ConfigClockSource+0x16c>
 8004546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454a:	d87f      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 800454c:	2b70      	cmp	r3, #112	; 0x70
 800454e:	d01a      	beq.n	8004586 <HAL_TIM_ConfigClockSource+0xa2>
 8004550:	2b70      	cmp	r3, #112	; 0x70
 8004552:	d87b      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 8004554:	2b60      	cmp	r3, #96	; 0x60
 8004556:	d050      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0x116>
 8004558:	2b60      	cmp	r3, #96	; 0x60
 800455a:	d877      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 800455c:	2b50      	cmp	r3, #80	; 0x50
 800455e:	d03c      	beq.n	80045da <HAL_TIM_ConfigClockSource+0xf6>
 8004560:	2b50      	cmp	r3, #80	; 0x50
 8004562:	d873      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 8004564:	2b40      	cmp	r3, #64	; 0x40
 8004566:	d058      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x136>
 8004568:	2b40      	cmp	r3, #64	; 0x40
 800456a:	d86f      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 800456c:	2b30      	cmp	r3, #48	; 0x30
 800456e:	d064      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x156>
 8004570:	2b30      	cmp	r3, #48	; 0x30
 8004572:	d86b      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 8004574:	2b20      	cmp	r3, #32
 8004576:	d060      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x156>
 8004578:	2b20      	cmp	r3, #32
 800457a:	d867      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 800457c:	2b00      	cmp	r3, #0
 800457e:	d05c      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x156>
 8004580:	2b10      	cmp	r3, #16
 8004582:	d05a      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004584:	e062      	b.n	800464c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	6899      	ldr	r1, [r3, #8]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f000 fab7 	bl	8004b08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	609a      	str	r2, [r3, #8]
      break;
 80045b2:	e04e      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	6899      	ldr	r1, [r3, #8]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f000 faa0 	bl	8004b08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045d6:	609a      	str	r2, [r3, #8]
      break;
 80045d8:	e03b      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6859      	ldr	r1, [r3, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f000 f964 	bl	80048b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2150      	movs	r1, #80	; 0x50
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fa6e 	bl	8004ad4 <TIM_ITRx_SetConfig>
      break;
 80045f8:	e02b      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6859      	ldr	r1, [r3, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	461a      	mov	r2, r3
 8004608:	f000 f9be 	bl	8004988 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2160      	movs	r1, #96	; 0x60
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fa5e 	bl	8004ad4 <TIM_ITRx_SetConfig>
      break;
 8004618:	e01b      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6859      	ldr	r1, [r3, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	461a      	mov	r2, r3
 8004628:	f000 f944 	bl	80048b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2140      	movs	r1, #64	; 0x40
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fa4e 	bl	8004ad4 <TIM_ITRx_SetConfig>
      break;
 8004638:	e00b      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4619      	mov	r1, r3
 8004644:	4610      	mov	r0, r2
 8004646:	f000 fa45 	bl	8004ad4 <TIM_ITRx_SetConfig>
        break;
 800464a:	e002      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800464c:	bf00      	nop
 800464e:	e000      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004650:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b0c      	cmp	r3, #12
 800467e:	d831      	bhi.n	80046e4 <HAL_TIM_ReadCapturedValue+0x78>
 8004680:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004686:	bf00      	nop
 8004688:	080046bd 	.word	0x080046bd
 800468c:	080046e5 	.word	0x080046e5
 8004690:	080046e5 	.word	0x080046e5
 8004694:	080046e5 	.word	0x080046e5
 8004698:	080046c7 	.word	0x080046c7
 800469c:	080046e5 	.word	0x080046e5
 80046a0:	080046e5 	.word	0x080046e5
 80046a4:	080046e5 	.word	0x080046e5
 80046a8:	080046d1 	.word	0x080046d1
 80046ac:	080046e5 	.word	0x080046e5
 80046b0:	080046e5 	.word	0x080046e5
 80046b4:	080046e5 	.word	0x080046e5
 80046b8:	080046db 	.word	0x080046db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c2:	60fb      	str	r3, [r7, #12]

      break;
 80046c4:	e00f      	b.n	80046e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	60fb      	str	r3, [r7, #12]

      break;
 80046ce:	e00a      	b.n	80046e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d6:	60fb      	str	r3, [r7, #12]

      break;
 80046d8:	e005      	b.n	80046e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	60fb      	str	r3, [r7, #12]

      break;
 80046e2:	e000      	b.n	80046e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80046e4:	bf00      	nop
  }

  return tmpreg;
 80046e6:	68fb      	ldr	r3, [r7, #12]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop

080046f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr

08004706 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	bc80      	pop	{r7}
 8004716:	4770      	bx	lr

08004718 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	bc80      	pop	{r7}
 8004728:	4770      	bx	lr

0800472a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr

0800473c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a29      	ldr	r2, [pc, #164]	; (80047f4 <TIM_Base_SetConfig+0xb8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d00b      	beq.n	800476c <TIM_Base_SetConfig+0x30>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475a:	d007      	beq.n	800476c <TIM_Base_SetConfig+0x30>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a26      	ldr	r2, [pc, #152]	; (80047f8 <TIM_Base_SetConfig+0xbc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d003      	beq.n	800476c <TIM_Base_SetConfig+0x30>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a25      	ldr	r2, [pc, #148]	; (80047fc <TIM_Base_SetConfig+0xc0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d108      	bne.n	800477e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <TIM_Base_SetConfig+0xb8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00b      	beq.n	800479e <TIM_Base_SetConfig+0x62>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478c:	d007      	beq.n	800479e <TIM_Base_SetConfig+0x62>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a19      	ldr	r2, [pc, #100]	; (80047f8 <TIM_Base_SetConfig+0xbc>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d003      	beq.n	800479e <TIM_Base_SetConfig+0x62>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a18      	ldr	r2, [pc, #96]	; (80047fc <TIM_Base_SetConfig+0xc0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d108      	bne.n	80047b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a07      	ldr	r2, [pc, #28]	; (80047f4 <TIM_Base_SetConfig+0xb8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d103      	bne.n	80047e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	615a      	str	r2, [r3, #20]
}
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr
 80047f4:	40012c00 	.word	0x40012c00
 80047f8:	40000400 	.word	0x40000400
 80047fc:	40000800 	.word	0x40000800

08004800 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f023 0201 	bic.w	r2, r3, #1
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4a1f      	ldr	r2, [pc, #124]	; (80048a8 <TIM_TI1_SetConfig+0xa8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d00b      	beq.n	8004846 <TIM_TI1_SetConfig+0x46>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004834:	d007      	beq.n	8004846 <TIM_TI1_SetConfig+0x46>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4a1c      	ldr	r2, [pc, #112]	; (80048ac <TIM_TI1_SetConfig+0xac>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d003      	beq.n	8004846 <TIM_TI1_SetConfig+0x46>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4a1b      	ldr	r2, [pc, #108]	; (80048b0 <TIM_TI1_SetConfig+0xb0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d101      	bne.n	800484a <TIM_TI1_SetConfig+0x4a>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <TIM_TI1_SetConfig+0x4c>
 800484a:	2300      	movs	r3, #0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d008      	beq.n	8004862 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f023 0303 	bic.w	r3, r3, #3
 8004856:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	e003      	b.n	800486a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004870:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	b2db      	uxtb	r3, r3
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f023 030a 	bic.w	r3, r3, #10
 8004884:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f003 030a 	and.w	r3, r3, #10
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	621a      	str	r2, [r3, #32]
}
 800489e:	bf00      	nop
 80048a0:	371c      	adds	r7, #28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr
 80048a8:	40012c00 	.word	0x40012c00
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800

080048b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	f023 0201 	bic.w	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f023 030a 	bic.w	r3, r3, #10
 80048f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	621a      	str	r2, [r3, #32]
}
 8004906:	bf00      	nop
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr

08004910 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f023 0210 	bic.w	r2, r3, #16
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800493c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	021b      	lsls	r3, r3, #8
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	4313      	orrs	r3, r2
 8004946:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800494e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	031b      	lsls	r3, r3, #12
 8004954:	b29b      	uxth	r3, r3
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004962:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	621a      	str	r2, [r3, #32]
}
 800497e:	bf00      	nop
 8004980:	371c      	adds	r7, #28
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	f023 0210 	bic.w	r2, r3, #16
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	031b      	lsls	r3, r3, #12
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	621a      	str	r2, [r3, #32]
}
 80049dc:	bf00      	nop
 80049de:	371c      	adds	r7, #28
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bc80      	pop	{r7}
 80049e4:	4770      	bx	lr

080049e6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b087      	sub	sp, #28
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	607a      	str	r2, [r7, #4]
 80049f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f023 0303 	bic.w	r3, r3, #3
 8004a12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a22:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a36:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	021b      	lsls	r3, r3, #8
 8004a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	621a      	str	r2, [r3, #32]
}
 8004a52:	bf00      	nop
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr

08004a5c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	021b      	lsls	r3, r3, #8
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a9a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	031b      	lsls	r3, r3, #12
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	031b      	lsls	r3, r3, #12
 8004ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	621a      	str	r2, [r3, #32]
}
 8004aca:	bf00      	nop
 8004acc:	371c      	adds	r7, #28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bc80      	pop	{r7}
 8004ad2:	4770      	bx	lr

08004ad4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f043 0307 	orr.w	r3, r3, #7
 8004af6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	609a      	str	r2, [r3, #8]
}
 8004afe:	bf00      	nop
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr

08004b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	021a      	lsls	r2, r3, #8
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	609a      	str	r2, [r3, #8]
}
 8004b3c:	bf00      	nop
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr

08004b46 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b087      	sub	sp, #28
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f003 031f 	and.w	r3, r3, #31
 8004b58:	2201      	movs	r2, #1
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a1a      	ldr	r2, [r3, #32]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	43db      	mvns	r3, r3
 8004b68:	401a      	ands	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a1a      	ldr	r2, [r3, #32]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	621a      	str	r2, [r3, #32]
}
 8004b84:	bf00      	nop
 8004b86:	371c      	adds	r7, #28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bc80      	pop	{r7}
 8004b8c:	4770      	bx	lr
	...

08004b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e046      	b.n	8004c36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a16      	ldr	r2, [pc, #88]	; (8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00e      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf4:	d009      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a12      	ldr	r2, [pc, #72]	; (8004c44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a10      	ldr	r2, [pc, #64]	; (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d10c      	bne.n	8004c24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr
 8004c40:	40012c00 	.word	0x40012c00
 8004c44:	40000400 	.word	0x40000400
 8004c48:	40000800 	.word	0x40000800

08004c4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc80      	pop	{r7}
 8004c5c:	4770      	bx	lr

08004c5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr

08004c70 <__errno>:
 8004c70:	4b01      	ldr	r3, [pc, #4]	; (8004c78 <__errno+0x8>)
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000014 	.word	0x20000014

08004c7c <__libc_init_array>:
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	2600      	movs	r6, #0
 8004c80:	4d0c      	ldr	r5, [pc, #48]	; (8004cb4 <__libc_init_array+0x38>)
 8004c82:	4c0d      	ldr	r4, [pc, #52]	; (8004cb8 <__libc_init_array+0x3c>)
 8004c84:	1b64      	subs	r4, r4, r5
 8004c86:	10a4      	asrs	r4, r4, #2
 8004c88:	42a6      	cmp	r6, r4
 8004c8a:	d109      	bne.n	8004ca0 <__libc_init_array+0x24>
 8004c8c:	f004 fc52 	bl	8009534 <_init>
 8004c90:	2600      	movs	r6, #0
 8004c92:	4d0a      	ldr	r5, [pc, #40]	; (8004cbc <__libc_init_array+0x40>)
 8004c94:	4c0a      	ldr	r4, [pc, #40]	; (8004cc0 <__libc_init_array+0x44>)
 8004c96:	1b64      	subs	r4, r4, r5
 8004c98:	10a4      	asrs	r4, r4, #2
 8004c9a:	42a6      	cmp	r6, r4
 8004c9c:	d105      	bne.n	8004caa <__libc_init_array+0x2e>
 8004c9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ca4:	4798      	blx	r3
 8004ca6:	3601      	adds	r6, #1
 8004ca8:	e7ee      	b.n	8004c88 <__libc_init_array+0xc>
 8004caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cae:	4798      	blx	r3
 8004cb0:	3601      	adds	r6, #1
 8004cb2:	e7f2      	b.n	8004c9a <__libc_init_array+0x1e>
 8004cb4:	0800a1bc 	.word	0x0800a1bc
 8004cb8:	0800a1bc 	.word	0x0800a1bc
 8004cbc:	0800a1bc 	.word	0x0800a1bc
 8004cc0:	0800a1c0 	.word	0x0800a1c0

08004cc4 <memset>:
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	4402      	add	r2, r0
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d100      	bne.n	8004cce <memset+0xa>
 8004ccc:	4770      	bx	lr
 8004cce:	f803 1b01 	strb.w	r1, [r3], #1
 8004cd2:	e7f9      	b.n	8004cc8 <memset+0x4>

08004cd4 <__cvt>:
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cda:	461f      	mov	r7, r3
 8004cdc:	bfbb      	ittet	lt
 8004cde:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004ce2:	461f      	movlt	r7, r3
 8004ce4:	2300      	movge	r3, #0
 8004ce6:	232d      	movlt	r3, #45	; 0x2d
 8004ce8:	b088      	sub	sp, #32
 8004cea:	4614      	mov	r4, r2
 8004cec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004cee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004cf0:	7013      	strb	r3, [r2, #0]
 8004cf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004cf4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004cf8:	f023 0820 	bic.w	r8, r3, #32
 8004cfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d00:	d005      	beq.n	8004d0e <__cvt+0x3a>
 8004d02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d06:	d100      	bne.n	8004d0a <__cvt+0x36>
 8004d08:	3501      	adds	r5, #1
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e000      	b.n	8004d10 <__cvt+0x3c>
 8004d0e:	2303      	movs	r3, #3
 8004d10:	aa07      	add	r2, sp, #28
 8004d12:	9204      	str	r2, [sp, #16]
 8004d14:	aa06      	add	r2, sp, #24
 8004d16:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004d1a:	e9cd 3500 	strd	r3, r5, [sp]
 8004d1e:	4622      	mov	r2, r4
 8004d20:	463b      	mov	r3, r7
 8004d22:	f001 fd85 	bl	8006830 <_dtoa_r>
 8004d26:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d2a:	4606      	mov	r6, r0
 8004d2c:	d102      	bne.n	8004d34 <__cvt+0x60>
 8004d2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d30:	07db      	lsls	r3, r3, #31
 8004d32:	d522      	bpl.n	8004d7a <__cvt+0xa6>
 8004d34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d38:	eb06 0905 	add.w	r9, r6, r5
 8004d3c:	d110      	bne.n	8004d60 <__cvt+0x8c>
 8004d3e:	7833      	ldrb	r3, [r6, #0]
 8004d40:	2b30      	cmp	r3, #48	; 0x30
 8004d42:	d10a      	bne.n	8004d5a <__cvt+0x86>
 8004d44:	2200      	movs	r2, #0
 8004d46:	2300      	movs	r3, #0
 8004d48:	4620      	mov	r0, r4
 8004d4a:	4639      	mov	r1, r7
 8004d4c:	f7fb fe2c 	bl	80009a8 <__aeabi_dcmpeq>
 8004d50:	b918      	cbnz	r0, 8004d5a <__cvt+0x86>
 8004d52:	f1c5 0501 	rsb	r5, r5, #1
 8004d56:	f8ca 5000 	str.w	r5, [sl]
 8004d5a:	f8da 3000 	ldr.w	r3, [sl]
 8004d5e:	4499      	add	r9, r3
 8004d60:	2200      	movs	r2, #0
 8004d62:	2300      	movs	r3, #0
 8004d64:	4620      	mov	r0, r4
 8004d66:	4639      	mov	r1, r7
 8004d68:	f7fb fe1e 	bl	80009a8 <__aeabi_dcmpeq>
 8004d6c:	b108      	cbz	r0, 8004d72 <__cvt+0x9e>
 8004d6e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d72:	2230      	movs	r2, #48	; 0x30
 8004d74:	9b07      	ldr	r3, [sp, #28]
 8004d76:	454b      	cmp	r3, r9
 8004d78:	d307      	bcc.n	8004d8a <__cvt+0xb6>
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	9b07      	ldr	r3, [sp, #28]
 8004d7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004d80:	1b9b      	subs	r3, r3, r6
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	b008      	add	sp, #32
 8004d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d8a:	1c59      	adds	r1, r3, #1
 8004d8c:	9107      	str	r1, [sp, #28]
 8004d8e:	701a      	strb	r2, [r3, #0]
 8004d90:	e7f0      	b.n	8004d74 <__cvt+0xa0>

08004d92 <__exponent>:
 8004d92:	4603      	mov	r3, r0
 8004d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d96:	2900      	cmp	r1, #0
 8004d98:	f803 2b02 	strb.w	r2, [r3], #2
 8004d9c:	bfb6      	itet	lt
 8004d9e:	222d      	movlt	r2, #45	; 0x2d
 8004da0:	222b      	movge	r2, #43	; 0x2b
 8004da2:	4249      	neglt	r1, r1
 8004da4:	2909      	cmp	r1, #9
 8004da6:	7042      	strb	r2, [r0, #1]
 8004da8:	dd2b      	ble.n	8004e02 <__exponent+0x70>
 8004daa:	f10d 0407 	add.w	r4, sp, #7
 8004dae:	46a4      	mov	ip, r4
 8004db0:	270a      	movs	r7, #10
 8004db2:	fb91 f6f7 	sdiv	r6, r1, r7
 8004db6:	460a      	mov	r2, r1
 8004db8:	46a6      	mov	lr, r4
 8004dba:	fb07 1516 	mls	r5, r7, r6, r1
 8004dbe:	2a63      	cmp	r2, #99	; 0x63
 8004dc0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004dc4:	4631      	mov	r1, r6
 8004dc6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004dca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004dce:	dcf0      	bgt.n	8004db2 <__exponent+0x20>
 8004dd0:	3130      	adds	r1, #48	; 0x30
 8004dd2:	f1ae 0502 	sub.w	r5, lr, #2
 8004dd6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004dda:	4629      	mov	r1, r5
 8004ddc:	1c44      	adds	r4, r0, #1
 8004dde:	4561      	cmp	r1, ip
 8004de0:	d30a      	bcc.n	8004df8 <__exponent+0x66>
 8004de2:	f10d 0209 	add.w	r2, sp, #9
 8004de6:	eba2 020e 	sub.w	r2, r2, lr
 8004dea:	4565      	cmp	r5, ip
 8004dec:	bf88      	it	hi
 8004dee:	2200      	movhi	r2, #0
 8004df0:	4413      	add	r3, r2
 8004df2:	1a18      	subs	r0, r3, r0
 8004df4:	b003      	add	sp, #12
 8004df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004df8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dfc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e00:	e7ed      	b.n	8004dde <__exponent+0x4c>
 8004e02:	2330      	movs	r3, #48	; 0x30
 8004e04:	3130      	adds	r1, #48	; 0x30
 8004e06:	7083      	strb	r3, [r0, #2]
 8004e08:	70c1      	strb	r1, [r0, #3]
 8004e0a:	1d03      	adds	r3, r0, #4
 8004e0c:	e7f1      	b.n	8004df2 <__exponent+0x60>
	...

08004e10 <_printf_float>:
 8004e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e14:	b091      	sub	sp, #68	; 0x44
 8004e16:	460c      	mov	r4, r1
 8004e18:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004e1c:	4616      	mov	r6, r2
 8004e1e:	461f      	mov	r7, r3
 8004e20:	4605      	mov	r5, r0
 8004e22:	f002 fe59 	bl	8007ad8 <_localeconv_r>
 8004e26:	6803      	ldr	r3, [r0, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e2c:	f7fb f990 	bl	8000150 <strlen>
 8004e30:	2300      	movs	r3, #0
 8004e32:	930e      	str	r3, [sp, #56]	; 0x38
 8004e34:	f8d8 3000 	ldr.w	r3, [r8]
 8004e38:	900a      	str	r0, [sp, #40]	; 0x28
 8004e3a:	3307      	adds	r3, #7
 8004e3c:	f023 0307 	bic.w	r3, r3, #7
 8004e40:	f103 0208 	add.w	r2, r3, #8
 8004e44:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004e48:	f8d4 b000 	ldr.w	fp, [r4]
 8004e4c:	f8c8 2000 	str.w	r2, [r8]
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e58:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004e5c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004e60:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e66:	4640      	mov	r0, r8
 8004e68:	4b9c      	ldr	r3, [pc, #624]	; (80050dc <_printf_float+0x2cc>)
 8004e6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e6c:	f7fb fdce 	bl	8000a0c <__aeabi_dcmpun>
 8004e70:	bb70      	cbnz	r0, 8004ed0 <_printf_float+0xc0>
 8004e72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e76:	4640      	mov	r0, r8
 8004e78:	4b98      	ldr	r3, [pc, #608]	; (80050dc <_printf_float+0x2cc>)
 8004e7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e7c:	f7fb fda8 	bl	80009d0 <__aeabi_dcmple>
 8004e80:	bb30      	cbnz	r0, 8004ed0 <_printf_float+0xc0>
 8004e82:	2200      	movs	r2, #0
 8004e84:	2300      	movs	r3, #0
 8004e86:	4640      	mov	r0, r8
 8004e88:	4651      	mov	r1, sl
 8004e8a:	f7fb fd97 	bl	80009bc <__aeabi_dcmplt>
 8004e8e:	b110      	cbz	r0, 8004e96 <_printf_float+0x86>
 8004e90:	232d      	movs	r3, #45	; 0x2d
 8004e92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e96:	4b92      	ldr	r3, [pc, #584]	; (80050e0 <_printf_float+0x2d0>)
 8004e98:	4892      	ldr	r0, [pc, #584]	; (80050e4 <_printf_float+0x2d4>)
 8004e9a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004e9e:	bf94      	ite	ls
 8004ea0:	4698      	movls	r8, r3
 8004ea2:	4680      	movhi	r8, r0
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	f04f 0a00 	mov.w	sl, #0
 8004eaa:	6123      	str	r3, [r4, #16]
 8004eac:	f02b 0304 	bic.w	r3, fp, #4
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	4633      	mov	r3, r6
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	9700      	str	r7, [sp, #0]
 8004eba:	aa0f      	add	r2, sp, #60	; 0x3c
 8004ebc:	f000 f9d4 	bl	8005268 <_printf_common>
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	f040 8090 	bne.w	8004fe6 <_printf_float+0x1d6>
 8004ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004eca:	b011      	add	sp, #68	; 0x44
 8004ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	4653      	mov	r3, sl
 8004ed4:	4640      	mov	r0, r8
 8004ed6:	4651      	mov	r1, sl
 8004ed8:	f7fb fd98 	bl	8000a0c <__aeabi_dcmpun>
 8004edc:	b148      	cbz	r0, 8004ef2 <_printf_float+0xe2>
 8004ede:	f1ba 0f00 	cmp.w	sl, #0
 8004ee2:	bfb8      	it	lt
 8004ee4:	232d      	movlt	r3, #45	; 0x2d
 8004ee6:	4880      	ldr	r0, [pc, #512]	; (80050e8 <_printf_float+0x2d8>)
 8004ee8:	bfb8      	it	lt
 8004eea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004eee:	4b7f      	ldr	r3, [pc, #508]	; (80050ec <_printf_float+0x2dc>)
 8004ef0:	e7d3      	b.n	8004e9a <_printf_float+0x8a>
 8004ef2:	6863      	ldr	r3, [r4, #4]
 8004ef4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	d142      	bne.n	8004f82 <_printf_float+0x172>
 8004efc:	2306      	movs	r3, #6
 8004efe:	6063      	str	r3, [r4, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	9206      	str	r2, [sp, #24]
 8004f04:	aa0e      	add	r2, sp, #56	; 0x38
 8004f06:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004f0a:	aa0d      	add	r2, sp, #52	; 0x34
 8004f0c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004f10:	9203      	str	r2, [sp, #12]
 8004f12:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004f16:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004f1a:	6023      	str	r3, [r4, #0]
 8004f1c:	6863      	ldr	r3, [r4, #4]
 8004f1e:	4642      	mov	r2, r8
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	4628      	mov	r0, r5
 8004f24:	4653      	mov	r3, sl
 8004f26:	910b      	str	r1, [sp, #44]	; 0x2c
 8004f28:	f7ff fed4 	bl	8004cd4 <__cvt>
 8004f2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f2e:	4680      	mov	r8, r0
 8004f30:	2947      	cmp	r1, #71	; 0x47
 8004f32:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f34:	d108      	bne.n	8004f48 <_printf_float+0x138>
 8004f36:	1cc8      	adds	r0, r1, #3
 8004f38:	db02      	blt.n	8004f40 <_printf_float+0x130>
 8004f3a:	6863      	ldr	r3, [r4, #4]
 8004f3c:	4299      	cmp	r1, r3
 8004f3e:	dd40      	ble.n	8004fc2 <_printf_float+0x1b2>
 8004f40:	f1a9 0902 	sub.w	r9, r9, #2
 8004f44:	fa5f f989 	uxtb.w	r9, r9
 8004f48:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f4c:	d81f      	bhi.n	8004f8e <_printf_float+0x17e>
 8004f4e:	464a      	mov	r2, r9
 8004f50:	3901      	subs	r1, #1
 8004f52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f56:	910d      	str	r1, [sp, #52]	; 0x34
 8004f58:	f7ff ff1b 	bl	8004d92 <__exponent>
 8004f5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f5e:	4682      	mov	sl, r0
 8004f60:	1813      	adds	r3, r2, r0
 8004f62:	2a01      	cmp	r2, #1
 8004f64:	6123      	str	r3, [r4, #16]
 8004f66:	dc02      	bgt.n	8004f6e <_printf_float+0x15e>
 8004f68:	6822      	ldr	r2, [r4, #0]
 8004f6a:	07d2      	lsls	r2, r2, #31
 8004f6c:	d501      	bpl.n	8004f72 <_printf_float+0x162>
 8004f6e:	3301      	adds	r3, #1
 8004f70:	6123      	str	r3, [r4, #16]
 8004f72:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d09b      	beq.n	8004eb2 <_printf_float+0xa2>
 8004f7a:	232d      	movs	r3, #45	; 0x2d
 8004f7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f80:	e797      	b.n	8004eb2 <_printf_float+0xa2>
 8004f82:	2947      	cmp	r1, #71	; 0x47
 8004f84:	d1bc      	bne.n	8004f00 <_printf_float+0xf0>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1ba      	bne.n	8004f00 <_printf_float+0xf0>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e7b7      	b.n	8004efe <_printf_float+0xee>
 8004f8e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004f92:	d118      	bne.n	8004fc6 <_printf_float+0x1b6>
 8004f94:	2900      	cmp	r1, #0
 8004f96:	6863      	ldr	r3, [r4, #4]
 8004f98:	dd0b      	ble.n	8004fb2 <_printf_float+0x1a2>
 8004f9a:	6121      	str	r1, [r4, #16]
 8004f9c:	b913      	cbnz	r3, 8004fa4 <_printf_float+0x194>
 8004f9e:	6822      	ldr	r2, [r4, #0]
 8004fa0:	07d0      	lsls	r0, r2, #31
 8004fa2:	d502      	bpl.n	8004faa <_printf_float+0x19a>
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	440b      	add	r3, r1
 8004fa8:	6123      	str	r3, [r4, #16]
 8004faa:	f04f 0a00 	mov.w	sl, #0
 8004fae:	65a1      	str	r1, [r4, #88]	; 0x58
 8004fb0:	e7df      	b.n	8004f72 <_printf_float+0x162>
 8004fb2:	b913      	cbnz	r3, 8004fba <_printf_float+0x1aa>
 8004fb4:	6822      	ldr	r2, [r4, #0]
 8004fb6:	07d2      	lsls	r2, r2, #31
 8004fb8:	d501      	bpl.n	8004fbe <_printf_float+0x1ae>
 8004fba:	3302      	adds	r3, #2
 8004fbc:	e7f4      	b.n	8004fa8 <_printf_float+0x198>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e7f2      	b.n	8004fa8 <_printf_float+0x198>
 8004fc2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fc8:	4299      	cmp	r1, r3
 8004fca:	db05      	blt.n	8004fd8 <_printf_float+0x1c8>
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	6121      	str	r1, [r4, #16]
 8004fd0:	07d8      	lsls	r0, r3, #31
 8004fd2:	d5ea      	bpl.n	8004faa <_printf_float+0x19a>
 8004fd4:	1c4b      	adds	r3, r1, #1
 8004fd6:	e7e7      	b.n	8004fa8 <_printf_float+0x198>
 8004fd8:	2900      	cmp	r1, #0
 8004fda:	bfcc      	ite	gt
 8004fdc:	2201      	movgt	r2, #1
 8004fde:	f1c1 0202 	rsble	r2, r1, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	e7e0      	b.n	8004fa8 <_printf_float+0x198>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	055a      	lsls	r2, r3, #21
 8004fea:	d407      	bmi.n	8004ffc <_printf_float+0x1ec>
 8004fec:	6923      	ldr	r3, [r4, #16]
 8004fee:	4642      	mov	r2, r8
 8004ff0:	4631      	mov	r1, r6
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	47b8      	blx	r7
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	d12b      	bne.n	8005052 <_printf_float+0x242>
 8004ffa:	e764      	b.n	8004ec6 <_printf_float+0xb6>
 8004ffc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005000:	f240 80dd 	bls.w	80051be <_printf_float+0x3ae>
 8005004:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005008:	2200      	movs	r2, #0
 800500a:	2300      	movs	r3, #0
 800500c:	f7fb fccc 	bl	80009a8 <__aeabi_dcmpeq>
 8005010:	2800      	cmp	r0, #0
 8005012:	d033      	beq.n	800507c <_printf_float+0x26c>
 8005014:	2301      	movs	r3, #1
 8005016:	4631      	mov	r1, r6
 8005018:	4628      	mov	r0, r5
 800501a:	4a35      	ldr	r2, [pc, #212]	; (80050f0 <_printf_float+0x2e0>)
 800501c:	47b8      	blx	r7
 800501e:	3001      	adds	r0, #1
 8005020:	f43f af51 	beq.w	8004ec6 <_printf_float+0xb6>
 8005024:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005028:	429a      	cmp	r2, r3
 800502a:	db02      	blt.n	8005032 <_printf_float+0x222>
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	07d8      	lsls	r0, r3, #31
 8005030:	d50f      	bpl.n	8005052 <_printf_float+0x242>
 8005032:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005036:	4631      	mov	r1, r6
 8005038:	4628      	mov	r0, r5
 800503a:	47b8      	blx	r7
 800503c:	3001      	adds	r0, #1
 800503e:	f43f af42 	beq.w	8004ec6 <_printf_float+0xb6>
 8005042:	f04f 0800 	mov.w	r8, #0
 8005046:	f104 091a 	add.w	r9, r4, #26
 800504a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800504c:	3b01      	subs	r3, #1
 800504e:	4543      	cmp	r3, r8
 8005050:	dc09      	bgt.n	8005066 <_printf_float+0x256>
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	079b      	lsls	r3, r3, #30
 8005056:	f100 8102 	bmi.w	800525e <_printf_float+0x44e>
 800505a:	68e0      	ldr	r0, [r4, #12]
 800505c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800505e:	4298      	cmp	r0, r3
 8005060:	bfb8      	it	lt
 8005062:	4618      	movlt	r0, r3
 8005064:	e731      	b.n	8004eca <_printf_float+0xba>
 8005066:	2301      	movs	r3, #1
 8005068:	464a      	mov	r2, r9
 800506a:	4631      	mov	r1, r6
 800506c:	4628      	mov	r0, r5
 800506e:	47b8      	blx	r7
 8005070:	3001      	adds	r0, #1
 8005072:	f43f af28 	beq.w	8004ec6 <_printf_float+0xb6>
 8005076:	f108 0801 	add.w	r8, r8, #1
 800507a:	e7e6      	b.n	800504a <_printf_float+0x23a>
 800507c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800507e:	2b00      	cmp	r3, #0
 8005080:	dc38      	bgt.n	80050f4 <_printf_float+0x2e4>
 8005082:	2301      	movs	r3, #1
 8005084:	4631      	mov	r1, r6
 8005086:	4628      	mov	r0, r5
 8005088:	4a19      	ldr	r2, [pc, #100]	; (80050f0 <_printf_float+0x2e0>)
 800508a:	47b8      	blx	r7
 800508c:	3001      	adds	r0, #1
 800508e:	f43f af1a 	beq.w	8004ec6 <_printf_float+0xb6>
 8005092:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005096:	4313      	orrs	r3, r2
 8005098:	d102      	bne.n	80050a0 <_printf_float+0x290>
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	07d9      	lsls	r1, r3, #31
 800509e:	d5d8      	bpl.n	8005052 <_printf_float+0x242>
 80050a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050a4:	4631      	mov	r1, r6
 80050a6:	4628      	mov	r0, r5
 80050a8:	47b8      	blx	r7
 80050aa:	3001      	adds	r0, #1
 80050ac:	f43f af0b 	beq.w	8004ec6 <_printf_float+0xb6>
 80050b0:	f04f 0900 	mov.w	r9, #0
 80050b4:	f104 0a1a 	add.w	sl, r4, #26
 80050b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050ba:	425b      	negs	r3, r3
 80050bc:	454b      	cmp	r3, r9
 80050be:	dc01      	bgt.n	80050c4 <_printf_float+0x2b4>
 80050c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050c2:	e794      	b.n	8004fee <_printf_float+0x1de>
 80050c4:	2301      	movs	r3, #1
 80050c6:	4652      	mov	r2, sl
 80050c8:	4631      	mov	r1, r6
 80050ca:	4628      	mov	r0, r5
 80050cc:	47b8      	blx	r7
 80050ce:	3001      	adds	r0, #1
 80050d0:	f43f aef9 	beq.w	8004ec6 <_printf_float+0xb6>
 80050d4:	f109 0901 	add.w	r9, r9, #1
 80050d8:	e7ee      	b.n	80050b8 <_printf_float+0x2a8>
 80050da:	bf00      	nop
 80050dc:	7fefffff 	.word	0x7fefffff
 80050e0:	08009d1c 	.word	0x08009d1c
 80050e4:	08009d20 	.word	0x08009d20
 80050e8:	08009d28 	.word	0x08009d28
 80050ec:	08009d24 	.word	0x08009d24
 80050f0:	08009d2c 	.word	0x08009d2c
 80050f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050f8:	429a      	cmp	r2, r3
 80050fa:	bfa8      	it	ge
 80050fc:	461a      	movge	r2, r3
 80050fe:	2a00      	cmp	r2, #0
 8005100:	4691      	mov	r9, r2
 8005102:	dc37      	bgt.n	8005174 <_printf_float+0x364>
 8005104:	f04f 0b00 	mov.w	fp, #0
 8005108:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800510c:	f104 021a 	add.w	r2, r4, #26
 8005110:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005114:	ebaa 0309 	sub.w	r3, sl, r9
 8005118:	455b      	cmp	r3, fp
 800511a:	dc33      	bgt.n	8005184 <_printf_float+0x374>
 800511c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005120:	429a      	cmp	r2, r3
 8005122:	db3b      	blt.n	800519c <_printf_float+0x38c>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	07da      	lsls	r2, r3, #31
 8005128:	d438      	bmi.n	800519c <_printf_float+0x38c>
 800512a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800512c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800512e:	eba3 020a 	sub.w	r2, r3, sl
 8005132:	eba3 0901 	sub.w	r9, r3, r1
 8005136:	4591      	cmp	r9, r2
 8005138:	bfa8      	it	ge
 800513a:	4691      	movge	r9, r2
 800513c:	f1b9 0f00 	cmp.w	r9, #0
 8005140:	dc34      	bgt.n	80051ac <_printf_float+0x39c>
 8005142:	f04f 0800 	mov.w	r8, #0
 8005146:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800514a:	f104 0a1a 	add.w	sl, r4, #26
 800514e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005152:	1a9b      	subs	r3, r3, r2
 8005154:	eba3 0309 	sub.w	r3, r3, r9
 8005158:	4543      	cmp	r3, r8
 800515a:	f77f af7a 	ble.w	8005052 <_printf_float+0x242>
 800515e:	2301      	movs	r3, #1
 8005160:	4652      	mov	r2, sl
 8005162:	4631      	mov	r1, r6
 8005164:	4628      	mov	r0, r5
 8005166:	47b8      	blx	r7
 8005168:	3001      	adds	r0, #1
 800516a:	f43f aeac 	beq.w	8004ec6 <_printf_float+0xb6>
 800516e:	f108 0801 	add.w	r8, r8, #1
 8005172:	e7ec      	b.n	800514e <_printf_float+0x33e>
 8005174:	4613      	mov	r3, r2
 8005176:	4631      	mov	r1, r6
 8005178:	4642      	mov	r2, r8
 800517a:	4628      	mov	r0, r5
 800517c:	47b8      	blx	r7
 800517e:	3001      	adds	r0, #1
 8005180:	d1c0      	bne.n	8005104 <_printf_float+0x2f4>
 8005182:	e6a0      	b.n	8004ec6 <_printf_float+0xb6>
 8005184:	2301      	movs	r3, #1
 8005186:	4631      	mov	r1, r6
 8005188:	4628      	mov	r0, r5
 800518a:	920b      	str	r2, [sp, #44]	; 0x2c
 800518c:	47b8      	blx	r7
 800518e:	3001      	adds	r0, #1
 8005190:	f43f ae99 	beq.w	8004ec6 <_printf_float+0xb6>
 8005194:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005196:	f10b 0b01 	add.w	fp, fp, #1
 800519a:	e7b9      	b.n	8005110 <_printf_float+0x300>
 800519c:	4631      	mov	r1, r6
 800519e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051a2:	4628      	mov	r0, r5
 80051a4:	47b8      	blx	r7
 80051a6:	3001      	adds	r0, #1
 80051a8:	d1bf      	bne.n	800512a <_printf_float+0x31a>
 80051aa:	e68c      	b.n	8004ec6 <_printf_float+0xb6>
 80051ac:	464b      	mov	r3, r9
 80051ae:	4631      	mov	r1, r6
 80051b0:	4628      	mov	r0, r5
 80051b2:	eb08 020a 	add.w	r2, r8, sl
 80051b6:	47b8      	blx	r7
 80051b8:	3001      	adds	r0, #1
 80051ba:	d1c2      	bne.n	8005142 <_printf_float+0x332>
 80051bc:	e683      	b.n	8004ec6 <_printf_float+0xb6>
 80051be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051c0:	2a01      	cmp	r2, #1
 80051c2:	dc01      	bgt.n	80051c8 <_printf_float+0x3b8>
 80051c4:	07db      	lsls	r3, r3, #31
 80051c6:	d537      	bpl.n	8005238 <_printf_float+0x428>
 80051c8:	2301      	movs	r3, #1
 80051ca:	4642      	mov	r2, r8
 80051cc:	4631      	mov	r1, r6
 80051ce:	4628      	mov	r0, r5
 80051d0:	47b8      	blx	r7
 80051d2:	3001      	adds	r0, #1
 80051d4:	f43f ae77 	beq.w	8004ec6 <_printf_float+0xb6>
 80051d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051dc:	4631      	mov	r1, r6
 80051de:	4628      	mov	r0, r5
 80051e0:	47b8      	blx	r7
 80051e2:	3001      	adds	r0, #1
 80051e4:	f43f ae6f 	beq.w	8004ec6 <_printf_float+0xb6>
 80051e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051ec:	2200      	movs	r2, #0
 80051ee:	2300      	movs	r3, #0
 80051f0:	f7fb fbda 	bl	80009a8 <__aeabi_dcmpeq>
 80051f4:	b9d8      	cbnz	r0, 800522e <_printf_float+0x41e>
 80051f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051f8:	f108 0201 	add.w	r2, r8, #1
 80051fc:	3b01      	subs	r3, #1
 80051fe:	4631      	mov	r1, r6
 8005200:	4628      	mov	r0, r5
 8005202:	47b8      	blx	r7
 8005204:	3001      	adds	r0, #1
 8005206:	d10e      	bne.n	8005226 <_printf_float+0x416>
 8005208:	e65d      	b.n	8004ec6 <_printf_float+0xb6>
 800520a:	2301      	movs	r3, #1
 800520c:	464a      	mov	r2, r9
 800520e:	4631      	mov	r1, r6
 8005210:	4628      	mov	r0, r5
 8005212:	47b8      	blx	r7
 8005214:	3001      	adds	r0, #1
 8005216:	f43f ae56 	beq.w	8004ec6 <_printf_float+0xb6>
 800521a:	f108 0801 	add.w	r8, r8, #1
 800521e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005220:	3b01      	subs	r3, #1
 8005222:	4543      	cmp	r3, r8
 8005224:	dcf1      	bgt.n	800520a <_printf_float+0x3fa>
 8005226:	4653      	mov	r3, sl
 8005228:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800522c:	e6e0      	b.n	8004ff0 <_printf_float+0x1e0>
 800522e:	f04f 0800 	mov.w	r8, #0
 8005232:	f104 091a 	add.w	r9, r4, #26
 8005236:	e7f2      	b.n	800521e <_printf_float+0x40e>
 8005238:	2301      	movs	r3, #1
 800523a:	4642      	mov	r2, r8
 800523c:	e7df      	b.n	80051fe <_printf_float+0x3ee>
 800523e:	2301      	movs	r3, #1
 8005240:	464a      	mov	r2, r9
 8005242:	4631      	mov	r1, r6
 8005244:	4628      	mov	r0, r5
 8005246:	47b8      	blx	r7
 8005248:	3001      	adds	r0, #1
 800524a:	f43f ae3c 	beq.w	8004ec6 <_printf_float+0xb6>
 800524e:	f108 0801 	add.w	r8, r8, #1
 8005252:	68e3      	ldr	r3, [r4, #12]
 8005254:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005256:	1a5b      	subs	r3, r3, r1
 8005258:	4543      	cmp	r3, r8
 800525a:	dcf0      	bgt.n	800523e <_printf_float+0x42e>
 800525c:	e6fd      	b.n	800505a <_printf_float+0x24a>
 800525e:	f04f 0800 	mov.w	r8, #0
 8005262:	f104 0919 	add.w	r9, r4, #25
 8005266:	e7f4      	b.n	8005252 <_printf_float+0x442>

08005268 <_printf_common>:
 8005268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800526c:	4616      	mov	r6, r2
 800526e:	4699      	mov	r9, r3
 8005270:	688a      	ldr	r2, [r1, #8]
 8005272:	690b      	ldr	r3, [r1, #16]
 8005274:	4607      	mov	r7, r0
 8005276:	4293      	cmp	r3, r2
 8005278:	bfb8      	it	lt
 800527a:	4613      	movlt	r3, r2
 800527c:	6033      	str	r3, [r6, #0]
 800527e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005282:	460c      	mov	r4, r1
 8005284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005288:	b10a      	cbz	r2, 800528e <_printf_common+0x26>
 800528a:	3301      	adds	r3, #1
 800528c:	6033      	str	r3, [r6, #0]
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	0699      	lsls	r1, r3, #26
 8005292:	bf42      	ittt	mi
 8005294:	6833      	ldrmi	r3, [r6, #0]
 8005296:	3302      	addmi	r3, #2
 8005298:	6033      	strmi	r3, [r6, #0]
 800529a:	6825      	ldr	r5, [r4, #0]
 800529c:	f015 0506 	ands.w	r5, r5, #6
 80052a0:	d106      	bne.n	80052b0 <_printf_common+0x48>
 80052a2:	f104 0a19 	add.w	sl, r4, #25
 80052a6:	68e3      	ldr	r3, [r4, #12]
 80052a8:	6832      	ldr	r2, [r6, #0]
 80052aa:	1a9b      	subs	r3, r3, r2
 80052ac:	42ab      	cmp	r3, r5
 80052ae:	dc28      	bgt.n	8005302 <_printf_common+0x9a>
 80052b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052b4:	1e13      	subs	r3, r2, #0
 80052b6:	6822      	ldr	r2, [r4, #0]
 80052b8:	bf18      	it	ne
 80052ba:	2301      	movne	r3, #1
 80052bc:	0692      	lsls	r2, r2, #26
 80052be:	d42d      	bmi.n	800531c <_printf_common+0xb4>
 80052c0:	4649      	mov	r1, r9
 80052c2:	4638      	mov	r0, r7
 80052c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052c8:	47c0      	blx	r8
 80052ca:	3001      	adds	r0, #1
 80052cc:	d020      	beq.n	8005310 <_printf_common+0xa8>
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	68e5      	ldr	r5, [r4, #12]
 80052d2:	f003 0306 	and.w	r3, r3, #6
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	bf18      	it	ne
 80052da:	2500      	movne	r5, #0
 80052dc:	6832      	ldr	r2, [r6, #0]
 80052de:	f04f 0600 	mov.w	r6, #0
 80052e2:	68a3      	ldr	r3, [r4, #8]
 80052e4:	bf08      	it	eq
 80052e6:	1aad      	subeq	r5, r5, r2
 80052e8:	6922      	ldr	r2, [r4, #16]
 80052ea:	bf08      	it	eq
 80052ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052f0:	4293      	cmp	r3, r2
 80052f2:	bfc4      	itt	gt
 80052f4:	1a9b      	subgt	r3, r3, r2
 80052f6:	18ed      	addgt	r5, r5, r3
 80052f8:	341a      	adds	r4, #26
 80052fa:	42b5      	cmp	r5, r6
 80052fc:	d11a      	bne.n	8005334 <_printf_common+0xcc>
 80052fe:	2000      	movs	r0, #0
 8005300:	e008      	b.n	8005314 <_printf_common+0xac>
 8005302:	2301      	movs	r3, #1
 8005304:	4652      	mov	r2, sl
 8005306:	4649      	mov	r1, r9
 8005308:	4638      	mov	r0, r7
 800530a:	47c0      	blx	r8
 800530c:	3001      	adds	r0, #1
 800530e:	d103      	bne.n	8005318 <_printf_common+0xb0>
 8005310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005318:	3501      	adds	r5, #1
 800531a:	e7c4      	b.n	80052a6 <_printf_common+0x3e>
 800531c:	2030      	movs	r0, #48	; 0x30
 800531e:	18e1      	adds	r1, r4, r3
 8005320:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800532a:	4422      	add	r2, r4
 800532c:	3302      	adds	r3, #2
 800532e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005332:	e7c5      	b.n	80052c0 <_printf_common+0x58>
 8005334:	2301      	movs	r3, #1
 8005336:	4622      	mov	r2, r4
 8005338:	4649      	mov	r1, r9
 800533a:	4638      	mov	r0, r7
 800533c:	47c0      	blx	r8
 800533e:	3001      	adds	r0, #1
 8005340:	d0e6      	beq.n	8005310 <_printf_common+0xa8>
 8005342:	3601      	adds	r6, #1
 8005344:	e7d9      	b.n	80052fa <_printf_common+0x92>
	...

08005348 <_printf_i>:
 8005348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800534c:	7e0f      	ldrb	r7, [r1, #24]
 800534e:	4691      	mov	r9, r2
 8005350:	2f78      	cmp	r7, #120	; 0x78
 8005352:	4680      	mov	r8, r0
 8005354:	460c      	mov	r4, r1
 8005356:	469a      	mov	sl, r3
 8005358:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800535a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800535e:	d807      	bhi.n	8005370 <_printf_i+0x28>
 8005360:	2f62      	cmp	r7, #98	; 0x62
 8005362:	d80a      	bhi.n	800537a <_printf_i+0x32>
 8005364:	2f00      	cmp	r7, #0
 8005366:	f000 80d9 	beq.w	800551c <_printf_i+0x1d4>
 800536a:	2f58      	cmp	r7, #88	; 0x58
 800536c:	f000 80a4 	beq.w	80054b8 <_printf_i+0x170>
 8005370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005378:	e03a      	b.n	80053f0 <_printf_i+0xa8>
 800537a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800537e:	2b15      	cmp	r3, #21
 8005380:	d8f6      	bhi.n	8005370 <_printf_i+0x28>
 8005382:	a101      	add	r1, pc, #4	; (adr r1, 8005388 <_printf_i+0x40>)
 8005384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005388:	080053e1 	.word	0x080053e1
 800538c:	080053f5 	.word	0x080053f5
 8005390:	08005371 	.word	0x08005371
 8005394:	08005371 	.word	0x08005371
 8005398:	08005371 	.word	0x08005371
 800539c:	08005371 	.word	0x08005371
 80053a0:	080053f5 	.word	0x080053f5
 80053a4:	08005371 	.word	0x08005371
 80053a8:	08005371 	.word	0x08005371
 80053ac:	08005371 	.word	0x08005371
 80053b0:	08005371 	.word	0x08005371
 80053b4:	08005503 	.word	0x08005503
 80053b8:	08005425 	.word	0x08005425
 80053bc:	080054e5 	.word	0x080054e5
 80053c0:	08005371 	.word	0x08005371
 80053c4:	08005371 	.word	0x08005371
 80053c8:	08005525 	.word	0x08005525
 80053cc:	08005371 	.word	0x08005371
 80053d0:	08005425 	.word	0x08005425
 80053d4:	08005371 	.word	0x08005371
 80053d8:	08005371 	.word	0x08005371
 80053dc:	080054ed 	.word	0x080054ed
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	1d1a      	adds	r2, r3, #4
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	602a      	str	r2, [r5, #0]
 80053e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053f0:	2301      	movs	r3, #1
 80053f2:	e0a4      	b.n	800553e <_printf_i+0x1f6>
 80053f4:	6820      	ldr	r0, [r4, #0]
 80053f6:	6829      	ldr	r1, [r5, #0]
 80053f8:	0606      	lsls	r6, r0, #24
 80053fa:	f101 0304 	add.w	r3, r1, #4
 80053fe:	d50a      	bpl.n	8005416 <_printf_i+0xce>
 8005400:	680e      	ldr	r6, [r1, #0]
 8005402:	602b      	str	r3, [r5, #0]
 8005404:	2e00      	cmp	r6, #0
 8005406:	da03      	bge.n	8005410 <_printf_i+0xc8>
 8005408:	232d      	movs	r3, #45	; 0x2d
 800540a:	4276      	negs	r6, r6
 800540c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005410:	230a      	movs	r3, #10
 8005412:	485e      	ldr	r0, [pc, #376]	; (800558c <_printf_i+0x244>)
 8005414:	e019      	b.n	800544a <_printf_i+0x102>
 8005416:	680e      	ldr	r6, [r1, #0]
 8005418:	f010 0f40 	tst.w	r0, #64	; 0x40
 800541c:	602b      	str	r3, [r5, #0]
 800541e:	bf18      	it	ne
 8005420:	b236      	sxthne	r6, r6
 8005422:	e7ef      	b.n	8005404 <_printf_i+0xbc>
 8005424:	682b      	ldr	r3, [r5, #0]
 8005426:	6820      	ldr	r0, [r4, #0]
 8005428:	1d19      	adds	r1, r3, #4
 800542a:	6029      	str	r1, [r5, #0]
 800542c:	0601      	lsls	r1, r0, #24
 800542e:	d501      	bpl.n	8005434 <_printf_i+0xec>
 8005430:	681e      	ldr	r6, [r3, #0]
 8005432:	e002      	b.n	800543a <_printf_i+0xf2>
 8005434:	0646      	lsls	r6, r0, #25
 8005436:	d5fb      	bpl.n	8005430 <_printf_i+0xe8>
 8005438:	881e      	ldrh	r6, [r3, #0]
 800543a:	2f6f      	cmp	r7, #111	; 0x6f
 800543c:	bf0c      	ite	eq
 800543e:	2308      	moveq	r3, #8
 8005440:	230a      	movne	r3, #10
 8005442:	4852      	ldr	r0, [pc, #328]	; (800558c <_printf_i+0x244>)
 8005444:	2100      	movs	r1, #0
 8005446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800544a:	6865      	ldr	r5, [r4, #4]
 800544c:	2d00      	cmp	r5, #0
 800544e:	bfa8      	it	ge
 8005450:	6821      	ldrge	r1, [r4, #0]
 8005452:	60a5      	str	r5, [r4, #8]
 8005454:	bfa4      	itt	ge
 8005456:	f021 0104 	bicge.w	r1, r1, #4
 800545a:	6021      	strge	r1, [r4, #0]
 800545c:	b90e      	cbnz	r6, 8005462 <_printf_i+0x11a>
 800545e:	2d00      	cmp	r5, #0
 8005460:	d04d      	beq.n	80054fe <_printf_i+0x1b6>
 8005462:	4615      	mov	r5, r2
 8005464:	fbb6 f1f3 	udiv	r1, r6, r3
 8005468:	fb03 6711 	mls	r7, r3, r1, r6
 800546c:	5dc7      	ldrb	r7, [r0, r7]
 800546e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005472:	4637      	mov	r7, r6
 8005474:	42bb      	cmp	r3, r7
 8005476:	460e      	mov	r6, r1
 8005478:	d9f4      	bls.n	8005464 <_printf_i+0x11c>
 800547a:	2b08      	cmp	r3, #8
 800547c:	d10b      	bne.n	8005496 <_printf_i+0x14e>
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	07de      	lsls	r6, r3, #31
 8005482:	d508      	bpl.n	8005496 <_printf_i+0x14e>
 8005484:	6923      	ldr	r3, [r4, #16]
 8005486:	6861      	ldr	r1, [r4, #4]
 8005488:	4299      	cmp	r1, r3
 800548a:	bfde      	ittt	le
 800548c:	2330      	movle	r3, #48	; 0x30
 800548e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005492:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005496:	1b52      	subs	r2, r2, r5
 8005498:	6122      	str	r2, [r4, #16]
 800549a:	464b      	mov	r3, r9
 800549c:	4621      	mov	r1, r4
 800549e:	4640      	mov	r0, r8
 80054a0:	f8cd a000 	str.w	sl, [sp]
 80054a4:	aa03      	add	r2, sp, #12
 80054a6:	f7ff fedf 	bl	8005268 <_printf_common>
 80054aa:	3001      	adds	r0, #1
 80054ac:	d14c      	bne.n	8005548 <_printf_i+0x200>
 80054ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054b2:	b004      	add	sp, #16
 80054b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b8:	4834      	ldr	r0, [pc, #208]	; (800558c <_printf_i+0x244>)
 80054ba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80054be:	6829      	ldr	r1, [r5, #0]
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	f851 6b04 	ldr.w	r6, [r1], #4
 80054c6:	6029      	str	r1, [r5, #0]
 80054c8:	061d      	lsls	r5, r3, #24
 80054ca:	d514      	bpl.n	80054f6 <_printf_i+0x1ae>
 80054cc:	07df      	lsls	r7, r3, #31
 80054ce:	bf44      	itt	mi
 80054d0:	f043 0320 	orrmi.w	r3, r3, #32
 80054d4:	6023      	strmi	r3, [r4, #0]
 80054d6:	b91e      	cbnz	r6, 80054e0 <_printf_i+0x198>
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	f023 0320 	bic.w	r3, r3, #32
 80054de:	6023      	str	r3, [r4, #0]
 80054e0:	2310      	movs	r3, #16
 80054e2:	e7af      	b.n	8005444 <_printf_i+0xfc>
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	f043 0320 	orr.w	r3, r3, #32
 80054ea:	6023      	str	r3, [r4, #0]
 80054ec:	2378      	movs	r3, #120	; 0x78
 80054ee:	4828      	ldr	r0, [pc, #160]	; (8005590 <_printf_i+0x248>)
 80054f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054f4:	e7e3      	b.n	80054be <_printf_i+0x176>
 80054f6:	0659      	lsls	r1, r3, #25
 80054f8:	bf48      	it	mi
 80054fa:	b2b6      	uxthmi	r6, r6
 80054fc:	e7e6      	b.n	80054cc <_printf_i+0x184>
 80054fe:	4615      	mov	r5, r2
 8005500:	e7bb      	b.n	800547a <_printf_i+0x132>
 8005502:	682b      	ldr	r3, [r5, #0]
 8005504:	6826      	ldr	r6, [r4, #0]
 8005506:	1d18      	adds	r0, r3, #4
 8005508:	6961      	ldr	r1, [r4, #20]
 800550a:	6028      	str	r0, [r5, #0]
 800550c:	0635      	lsls	r5, r6, #24
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	d501      	bpl.n	8005516 <_printf_i+0x1ce>
 8005512:	6019      	str	r1, [r3, #0]
 8005514:	e002      	b.n	800551c <_printf_i+0x1d4>
 8005516:	0670      	lsls	r0, r6, #25
 8005518:	d5fb      	bpl.n	8005512 <_printf_i+0x1ca>
 800551a:	8019      	strh	r1, [r3, #0]
 800551c:	2300      	movs	r3, #0
 800551e:	4615      	mov	r5, r2
 8005520:	6123      	str	r3, [r4, #16]
 8005522:	e7ba      	b.n	800549a <_printf_i+0x152>
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	2100      	movs	r1, #0
 8005528:	1d1a      	adds	r2, r3, #4
 800552a:	602a      	str	r2, [r5, #0]
 800552c:	681d      	ldr	r5, [r3, #0]
 800552e:	6862      	ldr	r2, [r4, #4]
 8005530:	4628      	mov	r0, r5
 8005532:	f002 faef 	bl	8007b14 <memchr>
 8005536:	b108      	cbz	r0, 800553c <_printf_i+0x1f4>
 8005538:	1b40      	subs	r0, r0, r5
 800553a:	6060      	str	r0, [r4, #4]
 800553c:	6863      	ldr	r3, [r4, #4]
 800553e:	6123      	str	r3, [r4, #16]
 8005540:	2300      	movs	r3, #0
 8005542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005546:	e7a8      	b.n	800549a <_printf_i+0x152>
 8005548:	462a      	mov	r2, r5
 800554a:	4649      	mov	r1, r9
 800554c:	4640      	mov	r0, r8
 800554e:	6923      	ldr	r3, [r4, #16]
 8005550:	47d0      	blx	sl
 8005552:	3001      	adds	r0, #1
 8005554:	d0ab      	beq.n	80054ae <_printf_i+0x166>
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	079b      	lsls	r3, r3, #30
 800555a:	d413      	bmi.n	8005584 <_printf_i+0x23c>
 800555c:	68e0      	ldr	r0, [r4, #12]
 800555e:	9b03      	ldr	r3, [sp, #12]
 8005560:	4298      	cmp	r0, r3
 8005562:	bfb8      	it	lt
 8005564:	4618      	movlt	r0, r3
 8005566:	e7a4      	b.n	80054b2 <_printf_i+0x16a>
 8005568:	2301      	movs	r3, #1
 800556a:	4632      	mov	r2, r6
 800556c:	4649      	mov	r1, r9
 800556e:	4640      	mov	r0, r8
 8005570:	47d0      	blx	sl
 8005572:	3001      	adds	r0, #1
 8005574:	d09b      	beq.n	80054ae <_printf_i+0x166>
 8005576:	3501      	adds	r5, #1
 8005578:	68e3      	ldr	r3, [r4, #12]
 800557a:	9903      	ldr	r1, [sp, #12]
 800557c:	1a5b      	subs	r3, r3, r1
 800557e:	42ab      	cmp	r3, r5
 8005580:	dcf2      	bgt.n	8005568 <_printf_i+0x220>
 8005582:	e7eb      	b.n	800555c <_printf_i+0x214>
 8005584:	2500      	movs	r5, #0
 8005586:	f104 0619 	add.w	r6, r4, #25
 800558a:	e7f5      	b.n	8005578 <_printf_i+0x230>
 800558c:	08009d2e 	.word	0x08009d2e
 8005590:	08009d3f 	.word	0x08009d3f

08005594 <_scanf_float>:
 8005594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005598:	b087      	sub	sp, #28
 800559a:	9303      	str	r3, [sp, #12]
 800559c:	688b      	ldr	r3, [r1, #8]
 800559e:	4617      	mov	r7, r2
 80055a0:	1e5a      	subs	r2, r3, #1
 80055a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80055a6:	bf85      	ittet	hi
 80055a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80055ac:	195b      	addhi	r3, r3, r5
 80055ae:	2300      	movls	r3, #0
 80055b0:	9302      	strhi	r3, [sp, #8]
 80055b2:	bf88      	it	hi
 80055b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80055b8:	468b      	mov	fp, r1
 80055ba:	f04f 0500 	mov.w	r5, #0
 80055be:	bf8c      	ite	hi
 80055c0:	608b      	strhi	r3, [r1, #8]
 80055c2:	9302      	strls	r3, [sp, #8]
 80055c4:	680b      	ldr	r3, [r1, #0]
 80055c6:	4680      	mov	r8, r0
 80055c8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80055cc:	f84b 3b1c 	str.w	r3, [fp], #28
 80055d0:	460c      	mov	r4, r1
 80055d2:	465e      	mov	r6, fp
 80055d4:	46aa      	mov	sl, r5
 80055d6:	46a9      	mov	r9, r5
 80055d8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80055dc:	9501      	str	r5, [sp, #4]
 80055de:	68a2      	ldr	r2, [r4, #8]
 80055e0:	b152      	cbz	r2, 80055f8 <_scanf_float+0x64>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b4e      	cmp	r3, #78	; 0x4e
 80055e8:	d864      	bhi.n	80056b4 <_scanf_float+0x120>
 80055ea:	2b40      	cmp	r3, #64	; 0x40
 80055ec:	d83c      	bhi.n	8005668 <_scanf_float+0xd4>
 80055ee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80055f2:	b2c8      	uxtb	r0, r1
 80055f4:	280e      	cmp	r0, #14
 80055f6:	d93a      	bls.n	800566e <_scanf_float+0xda>
 80055f8:	f1b9 0f00 	cmp.w	r9, #0
 80055fc:	d003      	beq.n	8005606 <_scanf_float+0x72>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800560a:	f1ba 0f01 	cmp.w	sl, #1
 800560e:	f200 8113 	bhi.w	8005838 <_scanf_float+0x2a4>
 8005612:	455e      	cmp	r6, fp
 8005614:	f200 8105 	bhi.w	8005822 <_scanf_float+0x28e>
 8005618:	2501      	movs	r5, #1
 800561a:	4628      	mov	r0, r5
 800561c:	b007      	add	sp, #28
 800561e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005622:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005626:	2a0d      	cmp	r2, #13
 8005628:	d8e6      	bhi.n	80055f8 <_scanf_float+0x64>
 800562a:	a101      	add	r1, pc, #4	; (adr r1, 8005630 <_scanf_float+0x9c>)
 800562c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005630:	0800576f 	.word	0x0800576f
 8005634:	080055f9 	.word	0x080055f9
 8005638:	080055f9 	.word	0x080055f9
 800563c:	080055f9 	.word	0x080055f9
 8005640:	080057cf 	.word	0x080057cf
 8005644:	080057a7 	.word	0x080057a7
 8005648:	080055f9 	.word	0x080055f9
 800564c:	080055f9 	.word	0x080055f9
 8005650:	0800577d 	.word	0x0800577d
 8005654:	080055f9 	.word	0x080055f9
 8005658:	080055f9 	.word	0x080055f9
 800565c:	080055f9 	.word	0x080055f9
 8005660:	080055f9 	.word	0x080055f9
 8005664:	08005735 	.word	0x08005735
 8005668:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800566c:	e7db      	b.n	8005626 <_scanf_float+0x92>
 800566e:	290e      	cmp	r1, #14
 8005670:	d8c2      	bhi.n	80055f8 <_scanf_float+0x64>
 8005672:	a001      	add	r0, pc, #4	; (adr r0, 8005678 <_scanf_float+0xe4>)
 8005674:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005678:	08005727 	.word	0x08005727
 800567c:	080055f9 	.word	0x080055f9
 8005680:	08005727 	.word	0x08005727
 8005684:	080057bb 	.word	0x080057bb
 8005688:	080055f9 	.word	0x080055f9
 800568c:	080056d5 	.word	0x080056d5
 8005690:	08005711 	.word	0x08005711
 8005694:	08005711 	.word	0x08005711
 8005698:	08005711 	.word	0x08005711
 800569c:	08005711 	.word	0x08005711
 80056a0:	08005711 	.word	0x08005711
 80056a4:	08005711 	.word	0x08005711
 80056a8:	08005711 	.word	0x08005711
 80056ac:	08005711 	.word	0x08005711
 80056b0:	08005711 	.word	0x08005711
 80056b4:	2b6e      	cmp	r3, #110	; 0x6e
 80056b6:	d809      	bhi.n	80056cc <_scanf_float+0x138>
 80056b8:	2b60      	cmp	r3, #96	; 0x60
 80056ba:	d8b2      	bhi.n	8005622 <_scanf_float+0x8e>
 80056bc:	2b54      	cmp	r3, #84	; 0x54
 80056be:	d077      	beq.n	80057b0 <_scanf_float+0x21c>
 80056c0:	2b59      	cmp	r3, #89	; 0x59
 80056c2:	d199      	bne.n	80055f8 <_scanf_float+0x64>
 80056c4:	2d07      	cmp	r5, #7
 80056c6:	d197      	bne.n	80055f8 <_scanf_float+0x64>
 80056c8:	2508      	movs	r5, #8
 80056ca:	e029      	b.n	8005720 <_scanf_float+0x18c>
 80056cc:	2b74      	cmp	r3, #116	; 0x74
 80056ce:	d06f      	beq.n	80057b0 <_scanf_float+0x21c>
 80056d0:	2b79      	cmp	r3, #121	; 0x79
 80056d2:	e7f6      	b.n	80056c2 <_scanf_float+0x12e>
 80056d4:	6821      	ldr	r1, [r4, #0]
 80056d6:	05c8      	lsls	r0, r1, #23
 80056d8:	d51a      	bpl.n	8005710 <_scanf_float+0x17c>
 80056da:	9b02      	ldr	r3, [sp, #8]
 80056dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80056e0:	6021      	str	r1, [r4, #0]
 80056e2:	f109 0901 	add.w	r9, r9, #1
 80056e6:	b11b      	cbz	r3, 80056f0 <_scanf_float+0x15c>
 80056e8:	3b01      	subs	r3, #1
 80056ea:	3201      	adds	r2, #1
 80056ec:	9302      	str	r3, [sp, #8]
 80056ee:	60a2      	str	r2, [r4, #8]
 80056f0:	68a3      	ldr	r3, [r4, #8]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	60a3      	str	r3, [r4, #8]
 80056f6:	6923      	ldr	r3, [r4, #16]
 80056f8:	3301      	adds	r3, #1
 80056fa:	6123      	str	r3, [r4, #16]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3b01      	subs	r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	607b      	str	r3, [r7, #4]
 8005704:	f340 8084 	ble.w	8005810 <_scanf_float+0x27c>
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	3301      	adds	r3, #1
 800570c:	603b      	str	r3, [r7, #0]
 800570e:	e766      	b.n	80055de <_scanf_float+0x4a>
 8005710:	eb1a 0f05 	cmn.w	sl, r5
 8005714:	f47f af70 	bne.w	80055f8 <_scanf_float+0x64>
 8005718:	6822      	ldr	r2, [r4, #0]
 800571a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800571e:	6022      	str	r2, [r4, #0]
 8005720:	f806 3b01 	strb.w	r3, [r6], #1
 8005724:	e7e4      	b.n	80056f0 <_scanf_float+0x15c>
 8005726:	6822      	ldr	r2, [r4, #0]
 8005728:	0610      	lsls	r0, r2, #24
 800572a:	f57f af65 	bpl.w	80055f8 <_scanf_float+0x64>
 800572e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005732:	e7f4      	b.n	800571e <_scanf_float+0x18a>
 8005734:	f1ba 0f00 	cmp.w	sl, #0
 8005738:	d10e      	bne.n	8005758 <_scanf_float+0x1c4>
 800573a:	f1b9 0f00 	cmp.w	r9, #0
 800573e:	d10e      	bne.n	800575e <_scanf_float+0x1ca>
 8005740:	6822      	ldr	r2, [r4, #0]
 8005742:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005746:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800574a:	d108      	bne.n	800575e <_scanf_float+0x1ca>
 800574c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005750:	f04f 0a01 	mov.w	sl, #1
 8005754:	6022      	str	r2, [r4, #0]
 8005756:	e7e3      	b.n	8005720 <_scanf_float+0x18c>
 8005758:	f1ba 0f02 	cmp.w	sl, #2
 800575c:	d055      	beq.n	800580a <_scanf_float+0x276>
 800575e:	2d01      	cmp	r5, #1
 8005760:	d002      	beq.n	8005768 <_scanf_float+0x1d4>
 8005762:	2d04      	cmp	r5, #4
 8005764:	f47f af48 	bne.w	80055f8 <_scanf_float+0x64>
 8005768:	3501      	adds	r5, #1
 800576a:	b2ed      	uxtb	r5, r5
 800576c:	e7d8      	b.n	8005720 <_scanf_float+0x18c>
 800576e:	f1ba 0f01 	cmp.w	sl, #1
 8005772:	f47f af41 	bne.w	80055f8 <_scanf_float+0x64>
 8005776:	f04f 0a02 	mov.w	sl, #2
 800577a:	e7d1      	b.n	8005720 <_scanf_float+0x18c>
 800577c:	b97d      	cbnz	r5, 800579e <_scanf_float+0x20a>
 800577e:	f1b9 0f00 	cmp.w	r9, #0
 8005782:	f47f af3c 	bne.w	80055fe <_scanf_float+0x6a>
 8005786:	6822      	ldr	r2, [r4, #0]
 8005788:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800578c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005790:	f47f af39 	bne.w	8005606 <_scanf_float+0x72>
 8005794:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005798:	2501      	movs	r5, #1
 800579a:	6022      	str	r2, [r4, #0]
 800579c:	e7c0      	b.n	8005720 <_scanf_float+0x18c>
 800579e:	2d03      	cmp	r5, #3
 80057a0:	d0e2      	beq.n	8005768 <_scanf_float+0x1d4>
 80057a2:	2d05      	cmp	r5, #5
 80057a4:	e7de      	b.n	8005764 <_scanf_float+0x1d0>
 80057a6:	2d02      	cmp	r5, #2
 80057a8:	f47f af26 	bne.w	80055f8 <_scanf_float+0x64>
 80057ac:	2503      	movs	r5, #3
 80057ae:	e7b7      	b.n	8005720 <_scanf_float+0x18c>
 80057b0:	2d06      	cmp	r5, #6
 80057b2:	f47f af21 	bne.w	80055f8 <_scanf_float+0x64>
 80057b6:	2507      	movs	r5, #7
 80057b8:	e7b2      	b.n	8005720 <_scanf_float+0x18c>
 80057ba:	6822      	ldr	r2, [r4, #0]
 80057bc:	0591      	lsls	r1, r2, #22
 80057be:	f57f af1b 	bpl.w	80055f8 <_scanf_float+0x64>
 80057c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80057c6:	6022      	str	r2, [r4, #0]
 80057c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80057cc:	e7a8      	b.n	8005720 <_scanf_float+0x18c>
 80057ce:	6822      	ldr	r2, [r4, #0]
 80057d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80057d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80057d8:	d006      	beq.n	80057e8 <_scanf_float+0x254>
 80057da:	0550      	lsls	r0, r2, #21
 80057dc:	f57f af0c 	bpl.w	80055f8 <_scanf_float+0x64>
 80057e0:	f1b9 0f00 	cmp.w	r9, #0
 80057e4:	f43f af0f 	beq.w	8005606 <_scanf_float+0x72>
 80057e8:	0591      	lsls	r1, r2, #22
 80057ea:	bf58      	it	pl
 80057ec:	9901      	ldrpl	r1, [sp, #4]
 80057ee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80057f2:	bf58      	it	pl
 80057f4:	eba9 0101 	subpl.w	r1, r9, r1
 80057f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80057fc:	f04f 0900 	mov.w	r9, #0
 8005800:	bf58      	it	pl
 8005802:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005806:	6022      	str	r2, [r4, #0]
 8005808:	e78a      	b.n	8005720 <_scanf_float+0x18c>
 800580a:	f04f 0a03 	mov.w	sl, #3
 800580e:	e787      	b.n	8005720 <_scanf_float+0x18c>
 8005810:	4639      	mov	r1, r7
 8005812:	4640      	mov	r0, r8
 8005814:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005818:	4798      	blx	r3
 800581a:	2800      	cmp	r0, #0
 800581c:	f43f aedf 	beq.w	80055de <_scanf_float+0x4a>
 8005820:	e6ea      	b.n	80055f8 <_scanf_float+0x64>
 8005822:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005826:	463a      	mov	r2, r7
 8005828:	4640      	mov	r0, r8
 800582a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800582e:	4798      	blx	r3
 8005830:	6923      	ldr	r3, [r4, #16]
 8005832:	3b01      	subs	r3, #1
 8005834:	6123      	str	r3, [r4, #16]
 8005836:	e6ec      	b.n	8005612 <_scanf_float+0x7e>
 8005838:	1e6b      	subs	r3, r5, #1
 800583a:	2b06      	cmp	r3, #6
 800583c:	d825      	bhi.n	800588a <_scanf_float+0x2f6>
 800583e:	2d02      	cmp	r5, #2
 8005840:	d836      	bhi.n	80058b0 <_scanf_float+0x31c>
 8005842:	455e      	cmp	r6, fp
 8005844:	f67f aee8 	bls.w	8005618 <_scanf_float+0x84>
 8005848:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800584c:	463a      	mov	r2, r7
 800584e:	4640      	mov	r0, r8
 8005850:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005854:	4798      	blx	r3
 8005856:	6923      	ldr	r3, [r4, #16]
 8005858:	3b01      	subs	r3, #1
 800585a:	6123      	str	r3, [r4, #16]
 800585c:	e7f1      	b.n	8005842 <_scanf_float+0x2ae>
 800585e:	9802      	ldr	r0, [sp, #8]
 8005860:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005864:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005868:	463a      	mov	r2, r7
 800586a:	9002      	str	r0, [sp, #8]
 800586c:	4640      	mov	r0, r8
 800586e:	4798      	blx	r3
 8005870:	6923      	ldr	r3, [r4, #16]
 8005872:	3b01      	subs	r3, #1
 8005874:	6123      	str	r3, [r4, #16]
 8005876:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800587a:	fa5f fa8a 	uxtb.w	sl, sl
 800587e:	f1ba 0f02 	cmp.w	sl, #2
 8005882:	d1ec      	bne.n	800585e <_scanf_float+0x2ca>
 8005884:	3d03      	subs	r5, #3
 8005886:	b2ed      	uxtb	r5, r5
 8005888:	1b76      	subs	r6, r6, r5
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	05da      	lsls	r2, r3, #23
 800588e:	d52f      	bpl.n	80058f0 <_scanf_float+0x35c>
 8005890:	055b      	lsls	r3, r3, #21
 8005892:	d510      	bpl.n	80058b6 <_scanf_float+0x322>
 8005894:	455e      	cmp	r6, fp
 8005896:	f67f aebf 	bls.w	8005618 <_scanf_float+0x84>
 800589a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800589e:	463a      	mov	r2, r7
 80058a0:	4640      	mov	r0, r8
 80058a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058a6:	4798      	blx	r3
 80058a8:	6923      	ldr	r3, [r4, #16]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	6123      	str	r3, [r4, #16]
 80058ae:	e7f1      	b.n	8005894 <_scanf_float+0x300>
 80058b0:	46aa      	mov	sl, r5
 80058b2:	9602      	str	r6, [sp, #8]
 80058b4:	e7df      	b.n	8005876 <_scanf_float+0x2e2>
 80058b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80058ba:	6923      	ldr	r3, [r4, #16]
 80058bc:	2965      	cmp	r1, #101	; 0x65
 80058be:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80058c2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80058c6:	6123      	str	r3, [r4, #16]
 80058c8:	d00c      	beq.n	80058e4 <_scanf_float+0x350>
 80058ca:	2945      	cmp	r1, #69	; 0x45
 80058cc:	d00a      	beq.n	80058e4 <_scanf_float+0x350>
 80058ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058d2:	463a      	mov	r2, r7
 80058d4:	4640      	mov	r0, r8
 80058d6:	4798      	blx	r3
 80058d8:	6923      	ldr	r3, [r4, #16]
 80058da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80058de:	3b01      	subs	r3, #1
 80058e0:	1eb5      	subs	r5, r6, #2
 80058e2:	6123      	str	r3, [r4, #16]
 80058e4:	463a      	mov	r2, r7
 80058e6:	4640      	mov	r0, r8
 80058e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058ec:	4798      	blx	r3
 80058ee:	462e      	mov	r6, r5
 80058f0:	6825      	ldr	r5, [r4, #0]
 80058f2:	f015 0510 	ands.w	r5, r5, #16
 80058f6:	d155      	bne.n	80059a4 <_scanf_float+0x410>
 80058f8:	7035      	strb	r5, [r6, #0]
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005904:	d11b      	bne.n	800593e <_scanf_float+0x3aa>
 8005906:	9b01      	ldr	r3, [sp, #4]
 8005908:	454b      	cmp	r3, r9
 800590a:	eba3 0209 	sub.w	r2, r3, r9
 800590e:	d123      	bne.n	8005958 <_scanf_float+0x3c4>
 8005910:	2200      	movs	r2, #0
 8005912:	4659      	mov	r1, fp
 8005914:	4640      	mov	r0, r8
 8005916:	f000 fe7b 	bl	8006610 <_strtod_r>
 800591a:	6822      	ldr	r2, [r4, #0]
 800591c:	9b03      	ldr	r3, [sp, #12]
 800591e:	f012 0f02 	tst.w	r2, #2
 8005922:	4606      	mov	r6, r0
 8005924:	460f      	mov	r7, r1
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	d021      	beq.n	800596e <_scanf_float+0x3da>
 800592a:	1d1a      	adds	r2, r3, #4
 800592c:	9903      	ldr	r1, [sp, #12]
 800592e:	600a      	str	r2, [r1, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	e9c3 6700 	strd	r6, r7, [r3]
 8005936:	68e3      	ldr	r3, [r4, #12]
 8005938:	3301      	adds	r3, #1
 800593a:	60e3      	str	r3, [r4, #12]
 800593c:	e66d      	b.n	800561a <_scanf_float+0x86>
 800593e:	9b04      	ldr	r3, [sp, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0e5      	beq.n	8005910 <_scanf_float+0x37c>
 8005944:	9905      	ldr	r1, [sp, #20]
 8005946:	230a      	movs	r3, #10
 8005948:	462a      	mov	r2, r5
 800594a:	4640      	mov	r0, r8
 800594c:	3101      	adds	r1, #1
 800594e:	f000 fee1 	bl	8006714 <_strtol_r>
 8005952:	9b04      	ldr	r3, [sp, #16]
 8005954:	9e05      	ldr	r6, [sp, #20]
 8005956:	1ac2      	subs	r2, r0, r3
 8005958:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800595c:	429e      	cmp	r6, r3
 800595e:	bf28      	it	cs
 8005960:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005964:	4630      	mov	r0, r6
 8005966:	4910      	ldr	r1, [pc, #64]	; (80059a8 <_scanf_float+0x414>)
 8005968:	f000 f826 	bl	80059b8 <siprintf>
 800596c:	e7d0      	b.n	8005910 <_scanf_float+0x37c>
 800596e:	f012 0f04 	tst.w	r2, #4
 8005972:	f103 0204 	add.w	r2, r3, #4
 8005976:	d1d9      	bne.n	800592c <_scanf_float+0x398>
 8005978:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800597c:	f8cc 2000 	str.w	r2, [ip]
 8005980:	f8d3 8000 	ldr.w	r8, [r3]
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	f7fb f840 	bl	8000a0c <__aeabi_dcmpun>
 800598c:	b128      	cbz	r0, 800599a <_scanf_float+0x406>
 800598e:	4807      	ldr	r0, [pc, #28]	; (80059ac <_scanf_float+0x418>)
 8005990:	f000 f80e 	bl	80059b0 <nanf>
 8005994:	f8c8 0000 	str.w	r0, [r8]
 8005998:	e7cd      	b.n	8005936 <_scanf_float+0x3a2>
 800599a:	4630      	mov	r0, r6
 800599c:	4639      	mov	r1, r7
 800599e:	f7fb f893 	bl	8000ac8 <__aeabi_d2f>
 80059a2:	e7f7      	b.n	8005994 <_scanf_float+0x400>
 80059a4:	2500      	movs	r5, #0
 80059a6:	e638      	b.n	800561a <_scanf_float+0x86>
 80059a8:	08009d50 	.word	0x08009d50
 80059ac:	0800a158 	.word	0x0800a158

080059b0 <nanf>:
 80059b0:	4800      	ldr	r0, [pc, #0]	; (80059b4 <nanf+0x4>)
 80059b2:	4770      	bx	lr
 80059b4:	7fc00000 	.word	0x7fc00000

080059b8 <siprintf>:
 80059b8:	b40e      	push	{r1, r2, r3}
 80059ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80059be:	b500      	push	{lr}
 80059c0:	b09c      	sub	sp, #112	; 0x70
 80059c2:	ab1d      	add	r3, sp, #116	; 0x74
 80059c4:	9002      	str	r0, [sp, #8]
 80059c6:	9006      	str	r0, [sp, #24]
 80059c8:	9107      	str	r1, [sp, #28]
 80059ca:	9104      	str	r1, [sp, #16]
 80059cc:	4808      	ldr	r0, [pc, #32]	; (80059f0 <siprintf+0x38>)
 80059ce:	4909      	ldr	r1, [pc, #36]	; (80059f4 <siprintf+0x3c>)
 80059d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80059d4:	9105      	str	r1, [sp, #20]
 80059d6:	6800      	ldr	r0, [r0, #0]
 80059d8:	a902      	add	r1, sp, #8
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	f002 feba 	bl	8008754 <_svfiprintf_r>
 80059e0:	2200      	movs	r2, #0
 80059e2:	9b02      	ldr	r3, [sp, #8]
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	b01c      	add	sp, #112	; 0x70
 80059e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80059ec:	b003      	add	sp, #12
 80059ee:	4770      	bx	lr
 80059f0:	20000014 	.word	0x20000014
 80059f4:	ffff0208 	.word	0xffff0208

080059f8 <sulp>:
 80059f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059fc:	460f      	mov	r7, r1
 80059fe:	4690      	mov	r8, r2
 8005a00:	f002 fc14 	bl	800822c <__ulp>
 8005a04:	4604      	mov	r4, r0
 8005a06:	460d      	mov	r5, r1
 8005a08:	f1b8 0f00 	cmp.w	r8, #0
 8005a0c:	d011      	beq.n	8005a32 <sulp+0x3a>
 8005a0e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005a12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	dd0b      	ble.n	8005a32 <sulp+0x3a>
 8005a1a:	2400      	movs	r4, #0
 8005a1c:	051b      	lsls	r3, r3, #20
 8005a1e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005a22:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005a26:	4622      	mov	r2, r4
 8005a28:	462b      	mov	r3, r5
 8005a2a:	f7fa fd55 	bl	80004d8 <__aeabi_dmul>
 8005a2e:	4604      	mov	r4, r0
 8005a30:	460d      	mov	r5, r1
 8005a32:	4620      	mov	r0, r4
 8005a34:	4629      	mov	r1, r5
 8005a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a3a:	0000      	movs	r0, r0
 8005a3c:	0000      	movs	r0, r0
	...

08005a40 <_strtod_l>:
 8005a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a44:	469b      	mov	fp, r3
 8005a46:	2300      	movs	r3, #0
 8005a48:	b09f      	sub	sp, #124	; 0x7c
 8005a4a:	931a      	str	r3, [sp, #104]	; 0x68
 8005a4c:	4b9e      	ldr	r3, [pc, #632]	; (8005cc8 <_strtod_l+0x288>)
 8005a4e:	4682      	mov	sl, r0
 8005a50:	681f      	ldr	r7, [r3, #0]
 8005a52:	460e      	mov	r6, r1
 8005a54:	4638      	mov	r0, r7
 8005a56:	9215      	str	r2, [sp, #84]	; 0x54
 8005a58:	f7fa fb7a 	bl	8000150 <strlen>
 8005a5c:	f04f 0800 	mov.w	r8, #0
 8005a60:	4604      	mov	r4, r0
 8005a62:	f04f 0900 	mov.w	r9, #0
 8005a66:	9619      	str	r6, [sp, #100]	; 0x64
 8005a68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a6a:	781a      	ldrb	r2, [r3, #0]
 8005a6c:	2a2b      	cmp	r2, #43	; 0x2b
 8005a6e:	d04c      	beq.n	8005b0a <_strtod_l+0xca>
 8005a70:	d83a      	bhi.n	8005ae8 <_strtod_l+0xa8>
 8005a72:	2a0d      	cmp	r2, #13
 8005a74:	d833      	bhi.n	8005ade <_strtod_l+0x9e>
 8005a76:	2a08      	cmp	r2, #8
 8005a78:	d833      	bhi.n	8005ae2 <_strtod_l+0xa2>
 8005a7a:	2a00      	cmp	r2, #0
 8005a7c:	d03d      	beq.n	8005afa <_strtod_l+0xba>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	930a      	str	r3, [sp, #40]	; 0x28
 8005a82:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005a84:	782b      	ldrb	r3, [r5, #0]
 8005a86:	2b30      	cmp	r3, #48	; 0x30
 8005a88:	f040 80aa 	bne.w	8005be0 <_strtod_l+0x1a0>
 8005a8c:	786b      	ldrb	r3, [r5, #1]
 8005a8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005a92:	2b58      	cmp	r3, #88	; 0x58
 8005a94:	d166      	bne.n	8005b64 <_strtod_l+0x124>
 8005a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a98:	4650      	mov	r0, sl
 8005a9a:	9301      	str	r3, [sp, #4]
 8005a9c:	ab1a      	add	r3, sp, #104	; 0x68
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	4a8a      	ldr	r2, [pc, #552]	; (8005ccc <_strtod_l+0x28c>)
 8005aa2:	f8cd b008 	str.w	fp, [sp, #8]
 8005aa6:	ab1b      	add	r3, sp, #108	; 0x6c
 8005aa8:	a919      	add	r1, sp, #100	; 0x64
 8005aaa:	f001 fd17 	bl	80074dc <__gethex>
 8005aae:	f010 0607 	ands.w	r6, r0, #7
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	d005      	beq.n	8005ac2 <_strtod_l+0x82>
 8005ab6:	2e06      	cmp	r6, #6
 8005ab8:	d129      	bne.n	8005b0e <_strtod_l+0xce>
 8005aba:	2300      	movs	r3, #0
 8005abc:	3501      	adds	r5, #1
 8005abe:	9519      	str	r5, [sp, #100]	; 0x64
 8005ac0:	930a      	str	r3, [sp, #40]	; 0x28
 8005ac2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f040 858a 	bne.w	80065de <_strtod_l+0xb9e>
 8005aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005acc:	b1d3      	cbz	r3, 8005b04 <_strtod_l+0xc4>
 8005ace:	4642      	mov	r2, r8
 8005ad0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	b01f      	add	sp, #124	; 0x7c
 8005ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ade:	2a20      	cmp	r2, #32
 8005ae0:	d1cd      	bne.n	8005a7e <_strtod_l+0x3e>
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	9319      	str	r3, [sp, #100]	; 0x64
 8005ae6:	e7bf      	b.n	8005a68 <_strtod_l+0x28>
 8005ae8:	2a2d      	cmp	r2, #45	; 0x2d
 8005aea:	d1c8      	bne.n	8005a7e <_strtod_l+0x3e>
 8005aec:	2201      	movs	r2, #1
 8005aee:	920a      	str	r2, [sp, #40]	; 0x28
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	9219      	str	r2, [sp, #100]	; 0x64
 8005af4:	785b      	ldrb	r3, [r3, #1]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1c3      	bne.n	8005a82 <_strtod_l+0x42>
 8005afa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005afc:	9619      	str	r6, [sp, #100]	; 0x64
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f040 856b 	bne.w	80065da <_strtod_l+0xb9a>
 8005b04:	4642      	mov	r2, r8
 8005b06:	464b      	mov	r3, r9
 8005b08:	e7e4      	b.n	8005ad4 <_strtod_l+0x94>
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	e7ef      	b.n	8005aee <_strtod_l+0xae>
 8005b0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005b10:	b13a      	cbz	r2, 8005b22 <_strtod_l+0xe2>
 8005b12:	2135      	movs	r1, #53	; 0x35
 8005b14:	a81c      	add	r0, sp, #112	; 0x70
 8005b16:	f002 fc8d 	bl	8008434 <__copybits>
 8005b1a:	4650      	mov	r0, sl
 8005b1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005b1e:	f002 f855 	bl	8007bcc <_Bfree>
 8005b22:	3e01      	subs	r6, #1
 8005b24:	2e04      	cmp	r6, #4
 8005b26:	d806      	bhi.n	8005b36 <_strtod_l+0xf6>
 8005b28:	e8df f006 	tbb	[pc, r6]
 8005b2c:	1714030a 	.word	0x1714030a
 8005b30:	0a          	.byte	0x0a
 8005b31:	00          	.byte	0x00
 8005b32:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005b36:	0721      	lsls	r1, r4, #28
 8005b38:	d5c3      	bpl.n	8005ac2 <_strtod_l+0x82>
 8005b3a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005b3e:	e7c0      	b.n	8005ac2 <_strtod_l+0x82>
 8005b40:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005b42:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005b46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005b4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b4e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005b52:	e7f0      	b.n	8005b36 <_strtod_l+0xf6>
 8005b54:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005cd0 <_strtod_l+0x290>
 8005b58:	e7ed      	b.n	8005b36 <_strtod_l+0xf6>
 8005b5a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005b5e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005b62:	e7e8      	b.n	8005b36 <_strtod_l+0xf6>
 8005b64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	9219      	str	r2, [sp, #100]	; 0x64
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	2b30      	cmp	r3, #48	; 0x30
 8005b6e:	d0f9      	beq.n	8005b64 <_strtod_l+0x124>
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0a6      	beq.n	8005ac2 <_strtod_l+0x82>
 8005b74:	2301      	movs	r3, #1
 8005b76:	9307      	str	r3, [sp, #28]
 8005b78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b7a:	220a      	movs	r2, #10
 8005b7c:	9308      	str	r3, [sp, #32]
 8005b7e:	2300      	movs	r3, #0
 8005b80:	469b      	mov	fp, r3
 8005b82:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005b86:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005b88:	7805      	ldrb	r5, [r0, #0]
 8005b8a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005b8e:	b2d9      	uxtb	r1, r3
 8005b90:	2909      	cmp	r1, #9
 8005b92:	d927      	bls.n	8005be4 <_strtod_l+0x1a4>
 8005b94:	4622      	mov	r2, r4
 8005b96:	4639      	mov	r1, r7
 8005b98:	f002 fef2 	bl	8008980 <strncmp>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d033      	beq.n	8005c08 <_strtod_l+0x1c8>
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	462a      	mov	r2, r5
 8005ba4:	465c      	mov	r4, fp
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	9004      	str	r0, [sp, #16]
 8005baa:	2a65      	cmp	r2, #101	; 0x65
 8005bac:	d001      	beq.n	8005bb2 <_strtod_l+0x172>
 8005bae:	2a45      	cmp	r2, #69	; 0x45
 8005bb0:	d114      	bne.n	8005bdc <_strtod_l+0x19c>
 8005bb2:	b91c      	cbnz	r4, 8005bbc <_strtod_l+0x17c>
 8005bb4:	9a07      	ldr	r2, [sp, #28]
 8005bb6:	4302      	orrs	r2, r0
 8005bb8:	d09f      	beq.n	8005afa <_strtod_l+0xba>
 8005bba:	2400      	movs	r4, #0
 8005bbc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005bbe:	1c72      	adds	r2, r6, #1
 8005bc0:	9219      	str	r2, [sp, #100]	; 0x64
 8005bc2:	7872      	ldrb	r2, [r6, #1]
 8005bc4:	2a2b      	cmp	r2, #43	; 0x2b
 8005bc6:	d079      	beq.n	8005cbc <_strtod_l+0x27c>
 8005bc8:	2a2d      	cmp	r2, #45	; 0x2d
 8005bca:	f000 8083 	beq.w	8005cd4 <_strtod_l+0x294>
 8005bce:	2700      	movs	r7, #0
 8005bd0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005bd4:	2909      	cmp	r1, #9
 8005bd6:	f240 8083 	bls.w	8005ce0 <_strtod_l+0x2a0>
 8005bda:	9619      	str	r6, [sp, #100]	; 0x64
 8005bdc:	2500      	movs	r5, #0
 8005bde:	e09f      	b.n	8005d20 <_strtod_l+0x2e0>
 8005be0:	2300      	movs	r3, #0
 8005be2:	e7c8      	b.n	8005b76 <_strtod_l+0x136>
 8005be4:	f1bb 0f08 	cmp.w	fp, #8
 8005be8:	bfd5      	itete	le
 8005bea:	9906      	ldrle	r1, [sp, #24]
 8005bec:	9905      	ldrgt	r1, [sp, #20]
 8005bee:	fb02 3301 	mlale	r3, r2, r1, r3
 8005bf2:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005bf6:	f100 0001 	add.w	r0, r0, #1
 8005bfa:	bfd4      	ite	le
 8005bfc:	9306      	strle	r3, [sp, #24]
 8005bfe:	9305      	strgt	r3, [sp, #20]
 8005c00:	f10b 0b01 	add.w	fp, fp, #1
 8005c04:	9019      	str	r0, [sp, #100]	; 0x64
 8005c06:	e7be      	b.n	8005b86 <_strtod_l+0x146>
 8005c08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c0a:	191a      	adds	r2, r3, r4
 8005c0c:	9219      	str	r2, [sp, #100]	; 0x64
 8005c0e:	5d1a      	ldrb	r2, [r3, r4]
 8005c10:	f1bb 0f00 	cmp.w	fp, #0
 8005c14:	d036      	beq.n	8005c84 <_strtod_l+0x244>
 8005c16:	465c      	mov	r4, fp
 8005c18:	9004      	str	r0, [sp, #16]
 8005c1a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005c1e:	2b09      	cmp	r3, #9
 8005c20:	d912      	bls.n	8005c48 <_strtod_l+0x208>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e7c1      	b.n	8005baa <_strtod_l+0x16a>
 8005c26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c28:	3001      	adds	r0, #1
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	9219      	str	r2, [sp, #100]	; 0x64
 8005c2e:	785a      	ldrb	r2, [r3, #1]
 8005c30:	2a30      	cmp	r2, #48	; 0x30
 8005c32:	d0f8      	beq.n	8005c26 <_strtod_l+0x1e6>
 8005c34:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	f200 84d5 	bhi.w	80065e8 <_strtod_l+0xba8>
 8005c3e:	9004      	str	r0, [sp, #16]
 8005c40:	2000      	movs	r0, #0
 8005c42:	4604      	mov	r4, r0
 8005c44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c46:	9308      	str	r3, [sp, #32]
 8005c48:	3a30      	subs	r2, #48	; 0x30
 8005c4a:	f100 0301 	add.w	r3, r0, #1
 8005c4e:	d013      	beq.n	8005c78 <_strtod_l+0x238>
 8005c50:	9904      	ldr	r1, [sp, #16]
 8005c52:	1905      	adds	r5, r0, r4
 8005c54:	4419      	add	r1, r3
 8005c56:	9104      	str	r1, [sp, #16]
 8005c58:	4623      	mov	r3, r4
 8005c5a:	210a      	movs	r1, #10
 8005c5c:	42ab      	cmp	r3, r5
 8005c5e:	d113      	bne.n	8005c88 <_strtod_l+0x248>
 8005c60:	1823      	adds	r3, r4, r0
 8005c62:	2b08      	cmp	r3, #8
 8005c64:	f104 0401 	add.w	r4, r4, #1
 8005c68:	4404      	add	r4, r0
 8005c6a:	dc1b      	bgt.n	8005ca4 <_strtod_l+0x264>
 8005c6c:	230a      	movs	r3, #10
 8005c6e:	9906      	ldr	r1, [sp, #24]
 8005c70:	fb03 2301 	mla	r3, r3, r1, r2
 8005c74:	9306      	str	r3, [sp, #24]
 8005c76:	2300      	movs	r3, #0
 8005c78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	1c51      	adds	r1, r2, #1
 8005c7e:	9119      	str	r1, [sp, #100]	; 0x64
 8005c80:	7852      	ldrb	r2, [r2, #1]
 8005c82:	e7ca      	b.n	8005c1a <_strtod_l+0x1da>
 8005c84:	4658      	mov	r0, fp
 8005c86:	e7d3      	b.n	8005c30 <_strtod_l+0x1f0>
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	dc04      	bgt.n	8005c96 <_strtod_l+0x256>
 8005c8c:	9f06      	ldr	r7, [sp, #24]
 8005c8e:	434f      	muls	r7, r1
 8005c90:	9706      	str	r7, [sp, #24]
 8005c92:	3301      	adds	r3, #1
 8005c94:	e7e2      	b.n	8005c5c <_strtod_l+0x21c>
 8005c96:	1c5f      	adds	r7, r3, #1
 8005c98:	2f10      	cmp	r7, #16
 8005c9a:	bfde      	ittt	le
 8005c9c:	9f05      	ldrle	r7, [sp, #20]
 8005c9e:	434f      	mulle	r7, r1
 8005ca0:	9705      	strle	r7, [sp, #20]
 8005ca2:	e7f6      	b.n	8005c92 <_strtod_l+0x252>
 8005ca4:	2c10      	cmp	r4, #16
 8005ca6:	bfdf      	itttt	le
 8005ca8:	230a      	movle	r3, #10
 8005caa:	9905      	ldrle	r1, [sp, #20]
 8005cac:	fb03 2301 	mlale	r3, r3, r1, r2
 8005cb0:	9305      	strle	r3, [sp, #20]
 8005cb2:	e7e0      	b.n	8005c76 <_strtod_l+0x236>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	9304      	str	r3, [sp, #16]
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e77b      	b.n	8005bb4 <_strtod_l+0x174>
 8005cbc:	2700      	movs	r7, #0
 8005cbe:	1cb2      	adds	r2, r6, #2
 8005cc0:	9219      	str	r2, [sp, #100]	; 0x64
 8005cc2:	78b2      	ldrb	r2, [r6, #2]
 8005cc4:	e784      	b.n	8005bd0 <_strtod_l+0x190>
 8005cc6:	bf00      	nop
 8005cc8:	08009fa0 	.word	0x08009fa0
 8005ccc:	08009d58 	.word	0x08009d58
 8005cd0:	7ff00000 	.word	0x7ff00000
 8005cd4:	2701      	movs	r7, #1
 8005cd6:	e7f2      	b.n	8005cbe <_strtod_l+0x27e>
 8005cd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005cda:	1c51      	adds	r1, r2, #1
 8005cdc:	9119      	str	r1, [sp, #100]	; 0x64
 8005cde:	7852      	ldrb	r2, [r2, #1]
 8005ce0:	2a30      	cmp	r2, #48	; 0x30
 8005ce2:	d0f9      	beq.n	8005cd8 <_strtod_l+0x298>
 8005ce4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005ce8:	2908      	cmp	r1, #8
 8005cea:	f63f af77 	bhi.w	8005bdc <_strtod_l+0x19c>
 8005cee:	f04f 0e0a 	mov.w	lr, #10
 8005cf2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005cf6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005cf8:	9209      	str	r2, [sp, #36]	; 0x24
 8005cfa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005cfc:	1c51      	adds	r1, r2, #1
 8005cfe:	9119      	str	r1, [sp, #100]	; 0x64
 8005d00:	7852      	ldrb	r2, [r2, #1]
 8005d02:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005d06:	2d09      	cmp	r5, #9
 8005d08:	d935      	bls.n	8005d76 <_strtod_l+0x336>
 8005d0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d0c:	1b49      	subs	r1, r1, r5
 8005d0e:	2908      	cmp	r1, #8
 8005d10:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005d14:	dc02      	bgt.n	8005d1c <_strtod_l+0x2dc>
 8005d16:	4565      	cmp	r5, ip
 8005d18:	bfa8      	it	ge
 8005d1a:	4665      	movge	r5, ip
 8005d1c:	b107      	cbz	r7, 8005d20 <_strtod_l+0x2e0>
 8005d1e:	426d      	negs	r5, r5
 8005d20:	2c00      	cmp	r4, #0
 8005d22:	d14c      	bne.n	8005dbe <_strtod_l+0x37e>
 8005d24:	9907      	ldr	r1, [sp, #28]
 8005d26:	4301      	orrs	r1, r0
 8005d28:	f47f aecb 	bne.w	8005ac2 <_strtod_l+0x82>
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f47f aee4 	bne.w	8005afa <_strtod_l+0xba>
 8005d32:	2a69      	cmp	r2, #105	; 0x69
 8005d34:	d026      	beq.n	8005d84 <_strtod_l+0x344>
 8005d36:	dc23      	bgt.n	8005d80 <_strtod_l+0x340>
 8005d38:	2a49      	cmp	r2, #73	; 0x49
 8005d3a:	d023      	beq.n	8005d84 <_strtod_l+0x344>
 8005d3c:	2a4e      	cmp	r2, #78	; 0x4e
 8005d3e:	f47f aedc 	bne.w	8005afa <_strtod_l+0xba>
 8005d42:	499d      	ldr	r1, [pc, #628]	; (8005fb8 <_strtod_l+0x578>)
 8005d44:	a819      	add	r0, sp, #100	; 0x64
 8005d46:	f001 fe17 	bl	8007978 <__match>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	f43f aed5 	beq.w	8005afa <_strtod_l+0xba>
 8005d50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b28      	cmp	r3, #40	; 0x28
 8005d56:	d12c      	bne.n	8005db2 <_strtod_l+0x372>
 8005d58:	4998      	ldr	r1, [pc, #608]	; (8005fbc <_strtod_l+0x57c>)
 8005d5a:	aa1c      	add	r2, sp, #112	; 0x70
 8005d5c:	a819      	add	r0, sp, #100	; 0x64
 8005d5e:	f001 fe1f 	bl	80079a0 <__hexnan>
 8005d62:	2805      	cmp	r0, #5
 8005d64:	d125      	bne.n	8005db2 <_strtod_l+0x372>
 8005d66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d68:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005d6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005d70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005d74:	e6a5      	b.n	8005ac2 <_strtod_l+0x82>
 8005d76:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005d7a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005d7e:	e7bc      	b.n	8005cfa <_strtod_l+0x2ba>
 8005d80:	2a6e      	cmp	r2, #110	; 0x6e
 8005d82:	e7dc      	b.n	8005d3e <_strtod_l+0x2fe>
 8005d84:	498e      	ldr	r1, [pc, #568]	; (8005fc0 <_strtod_l+0x580>)
 8005d86:	a819      	add	r0, sp, #100	; 0x64
 8005d88:	f001 fdf6 	bl	8007978 <__match>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	f43f aeb4 	beq.w	8005afa <_strtod_l+0xba>
 8005d92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d94:	498b      	ldr	r1, [pc, #556]	; (8005fc4 <_strtod_l+0x584>)
 8005d96:	3b01      	subs	r3, #1
 8005d98:	a819      	add	r0, sp, #100	; 0x64
 8005d9a:	9319      	str	r3, [sp, #100]	; 0x64
 8005d9c:	f001 fdec 	bl	8007978 <__match>
 8005da0:	b910      	cbnz	r0, 8005da8 <_strtod_l+0x368>
 8005da2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005da4:	3301      	adds	r3, #1
 8005da6:	9319      	str	r3, [sp, #100]	; 0x64
 8005da8:	f04f 0800 	mov.w	r8, #0
 8005dac:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005fc8 <_strtod_l+0x588>
 8005db0:	e687      	b.n	8005ac2 <_strtod_l+0x82>
 8005db2:	4886      	ldr	r0, [pc, #536]	; (8005fcc <_strtod_l+0x58c>)
 8005db4:	f002 fdce 	bl	8008954 <nan>
 8005db8:	4680      	mov	r8, r0
 8005dba:	4689      	mov	r9, r1
 8005dbc:	e681      	b.n	8005ac2 <_strtod_l+0x82>
 8005dbe:	9b04      	ldr	r3, [sp, #16]
 8005dc0:	f1bb 0f00 	cmp.w	fp, #0
 8005dc4:	bf08      	it	eq
 8005dc6:	46a3      	moveq	fp, r4
 8005dc8:	1aeb      	subs	r3, r5, r3
 8005dca:	2c10      	cmp	r4, #16
 8005dcc:	9806      	ldr	r0, [sp, #24]
 8005dce:	4626      	mov	r6, r4
 8005dd0:	9307      	str	r3, [sp, #28]
 8005dd2:	bfa8      	it	ge
 8005dd4:	2610      	movge	r6, #16
 8005dd6:	f7fa fb05 	bl	80003e4 <__aeabi_ui2d>
 8005dda:	2c09      	cmp	r4, #9
 8005ddc:	4680      	mov	r8, r0
 8005dde:	4689      	mov	r9, r1
 8005de0:	dd13      	ble.n	8005e0a <_strtod_l+0x3ca>
 8005de2:	4b7b      	ldr	r3, [pc, #492]	; (8005fd0 <_strtod_l+0x590>)
 8005de4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005de8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005dec:	f7fa fb74 	bl	80004d8 <__aeabi_dmul>
 8005df0:	4680      	mov	r8, r0
 8005df2:	9805      	ldr	r0, [sp, #20]
 8005df4:	4689      	mov	r9, r1
 8005df6:	f7fa faf5 	bl	80003e4 <__aeabi_ui2d>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	4640      	mov	r0, r8
 8005e00:	4649      	mov	r1, r9
 8005e02:	f7fa f9b3 	bl	800016c <__adddf3>
 8005e06:	4680      	mov	r8, r0
 8005e08:	4689      	mov	r9, r1
 8005e0a:	2c0f      	cmp	r4, #15
 8005e0c:	dc36      	bgt.n	8005e7c <_strtod_l+0x43c>
 8005e0e:	9b07      	ldr	r3, [sp, #28]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f43f ae56 	beq.w	8005ac2 <_strtod_l+0x82>
 8005e16:	dd22      	ble.n	8005e5e <_strtod_l+0x41e>
 8005e18:	2b16      	cmp	r3, #22
 8005e1a:	dc09      	bgt.n	8005e30 <_strtod_l+0x3f0>
 8005e1c:	496c      	ldr	r1, [pc, #432]	; (8005fd0 <_strtod_l+0x590>)
 8005e1e:	4642      	mov	r2, r8
 8005e20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e24:	464b      	mov	r3, r9
 8005e26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e2a:	f7fa fb55 	bl	80004d8 <__aeabi_dmul>
 8005e2e:	e7c3      	b.n	8005db8 <_strtod_l+0x378>
 8005e30:	9a07      	ldr	r2, [sp, #28]
 8005e32:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005e36:	4293      	cmp	r3, r2
 8005e38:	db20      	blt.n	8005e7c <_strtod_l+0x43c>
 8005e3a:	4d65      	ldr	r5, [pc, #404]	; (8005fd0 <_strtod_l+0x590>)
 8005e3c:	f1c4 040f 	rsb	r4, r4, #15
 8005e40:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005e44:	4642      	mov	r2, r8
 8005e46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e4a:	464b      	mov	r3, r9
 8005e4c:	f7fa fb44 	bl	80004d8 <__aeabi_dmul>
 8005e50:	9b07      	ldr	r3, [sp, #28]
 8005e52:	1b1c      	subs	r4, r3, r4
 8005e54:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005e58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e5c:	e7e5      	b.n	8005e2a <_strtod_l+0x3ea>
 8005e5e:	9b07      	ldr	r3, [sp, #28]
 8005e60:	3316      	adds	r3, #22
 8005e62:	db0b      	blt.n	8005e7c <_strtod_l+0x43c>
 8005e64:	9b04      	ldr	r3, [sp, #16]
 8005e66:	4640      	mov	r0, r8
 8005e68:	1b5d      	subs	r5, r3, r5
 8005e6a:	4b59      	ldr	r3, [pc, #356]	; (8005fd0 <_strtod_l+0x590>)
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005e72:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e76:	f7fa fc59 	bl	800072c <__aeabi_ddiv>
 8005e7a:	e79d      	b.n	8005db8 <_strtod_l+0x378>
 8005e7c:	9b07      	ldr	r3, [sp, #28]
 8005e7e:	1ba6      	subs	r6, r4, r6
 8005e80:	441e      	add	r6, r3
 8005e82:	2e00      	cmp	r6, #0
 8005e84:	dd74      	ble.n	8005f70 <_strtod_l+0x530>
 8005e86:	f016 030f 	ands.w	r3, r6, #15
 8005e8a:	d00a      	beq.n	8005ea2 <_strtod_l+0x462>
 8005e8c:	4950      	ldr	r1, [pc, #320]	; (8005fd0 <_strtod_l+0x590>)
 8005e8e:	4642      	mov	r2, r8
 8005e90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e98:	464b      	mov	r3, r9
 8005e9a:	f7fa fb1d 	bl	80004d8 <__aeabi_dmul>
 8005e9e:	4680      	mov	r8, r0
 8005ea0:	4689      	mov	r9, r1
 8005ea2:	f036 060f 	bics.w	r6, r6, #15
 8005ea6:	d052      	beq.n	8005f4e <_strtod_l+0x50e>
 8005ea8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005eac:	dd27      	ble.n	8005efe <_strtod_l+0x4be>
 8005eae:	f04f 0b00 	mov.w	fp, #0
 8005eb2:	f8cd b010 	str.w	fp, [sp, #16]
 8005eb6:	f8cd b020 	str.w	fp, [sp, #32]
 8005eba:	f8cd b018 	str.w	fp, [sp, #24]
 8005ebe:	2322      	movs	r3, #34	; 0x22
 8005ec0:	f04f 0800 	mov.w	r8, #0
 8005ec4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005fc8 <_strtod_l+0x588>
 8005ec8:	f8ca 3000 	str.w	r3, [sl]
 8005ecc:	9b08      	ldr	r3, [sp, #32]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f43f adf7 	beq.w	8005ac2 <_strtod_l+0x82>
 8005ed4:	4650      	mov	r0, sl
 8005ed6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005ed8:	f001 fe78 	bl	8007bcc <_Bfree>
 8005edc:	4650      	mov	r0, sl
 8005ede:	9906      	ldr	r1, [sp, #24]
 8005ee0:	f001 fe74 	bl	8007bcc <_Bfree>
 8005ee4:	4650      	mov	r0, sl
 8005ee6:	9904      	ldr	r1, [sp, #16]
 8005ee8:	f001 fe70 	bl	8007bcc <_Bfree>
 8005eec:	4650      	mov	r0, sl
 8005eee:	9908      	ldr	r1, [sp, #32]
 8005ef0:	f001 fe6c 	bl	8007bcc <_Bfree>
 8005ef4:	4659      	mov	r1, fp
 8005ef6:	4650      	mov	r0, sl
 8005ef8:	f001 fe68 	bl	8007bcc <_Bfree>
 8005efc:	e5e1      	b.n	8005ac2 <_strtod_l+0x82>
 8005efe:	4b35      	ldr	r3, [pc, #212]	; (8005fd4 <_strtod_l+0x594>)
 8005f00:	4640      	mov	r0, r8
 8005f02:	9305      	str	r3, [sp, #20]
 8005f04:	2300      	movs	r3, #0
 8005f06:	4649      	mov	r1, r9
 8005f08:	461f      	mov	r7, r3
 8005f0a:	1136      	asrs	r6, r6, #4
 8005f0c:	2e01      	cmp	r6, #1
 8005f0e:	dc21      	bgt.n	8005f54 <_strtod_l+0x514>
 8005f10:	b10b      	cbz	r3, 8005f16 <_strtod_l+0x4d6>
 8005f12:	4680      	mov	r8, r0
 8005f14:	4689      	mov	r9, r1
 8005f16:	4b2f      	ldr	r3, [pc, #188]	; (8005fd4 <_strtod_l+0x594>)
 8005f18:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005f1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005f20:	4642      	mov	r2, r8
 8005f22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f26:	464b      	mov	r3, r9
 8005f28:	f7fa fad6 	bl	80004d8 <__aeabi_dmul>
 8005f2c:	4b26      	ldr	r3, [pc, #152]	; (8005fc8 <_strtod_l+0x588>)
 8005f2e:	460a      	mov	r2, r1
 8005f30:	400b      	ands	r3, r1
 8005f32:	4929      	ldr	r1, [pc, #164]	; (8005fd8 <_strtod_l+0x598>)
 8005f34:	4680      	mov	r8, r0
 8005f36:	428b      	cmp	r3, r1
 8005f38:	d8b9      	bhi.n	8005eae <_strtod_l+0x46e>
 8005f3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005f3e:	428b      	cmp	r3, r1
 8005f40:	bf86      	itte	hi
 8005f42:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8005f46:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005fdc <_strtod_l+0x59c>
 8005f4a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005f4e:	2300      	movs	r3, #0
 8005f50:	9305      	str	r3, [sp, #20]
 8005f52:	e07f      	b.n	8006054 <_strtod_l+0x614>
 8005f54:	07f2      	lsls	r2, r6, #31
 8005f56:	d505      	bpl.n	8005f64 <_strtod_l+0x524>
 8005f58:	9b05      	ldr	r3, [sp, #20]
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	f7fa fabb 	bl	80004d8 <__aeabi_dmul>
 8005f62:	2301      	movs	r3, #1
 8005f64:	9a05      	ldr	r2, [sp, #20]
 8005f66:	3701      	adds	r7, #1
 8005f68:	3208      	adds	r2, #8
 8005f6a:	1076      	asrs	r6, r6, #1
 8005f6c:	9205      	str	r2, [sp, #20]
 8005f6e:	e7cd      	b.n	8005f0c <_strtod_l+0x4cc>
 8005f70:	d0ed      	beq.n	8005f4e <_strtod_l+0x50e>
 8005f72:	4276      	negs	r6, r6
 8005f74:	f016 020f 	ands.w	r2, r6, #15
 8005f78:	d00a      	beq.n	8005f90 <_strtod_l+0x550>
 8005f7a:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <_strtod_l+0x590>)
 8005f7c:	4640      	mov	r0, r8
 8005f7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f82:	4649      	mov	r1, r9
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	f7fa fbd0 	bl	800072c <__aeabi_ddiv>
 8005f8c:	4680      	mov	r8, r0
 8005f8e:	4689      	mov	r9, r1
 8005f90:	1136      	asrs	r6, r6, #4
 8005f92:	d0dc      	beq.n	8005f4e <_strtod_l+0x50e>
 8005f94:	2e1f      	cmp	r6, #31
 8005f96:	dd23      	ble.n	8005fe0 <_strtod_l+0x5a0>
 8005f98:	f04f 0b00 	mov.w	fp, #0
 8005f9c:	f8cd b010 	str.w	fp, [sp, #16]
 8005fa0:	f8cd b020 	str.w	fp, [sp, #32]
 8005fa4:	f8cd b018 	str.w	fp, [sp, #24]
 8005fa8:	2322      	movs	r3, #34	; 0x22
 8005faa:	f04f 0800 	mov.w	r8, #0
 8005fae:	f04f 0900 	mov.w	r9, #0
 8005fb2:	f8ca 3000 	str.w	r3, [sl]
 8005fb6:	e789      	b.n	8005ecc <_strtod_l+0x48c>
 8005fb8:	08009d29 	.word	0x08009d29
 8005fbc:	08009d6c 	.word	0x08009d6c
 8005fc0:	08009d21 	.word	0x08009d21
 8005fc4:	08009eac 	.word	0x08009eac
 8005fc8:	7ff00000 	.word	0x7ff00000
 8005fcc:	0800a158 	.word	0x0800a158
 8005fd0:	0800a038 	.word	0x0800a038
 8005fd4:	0800a010 	.word	0x0800a010
 8005fd8:	7ca00000 	.word	0x7ca00000
 8005fdc:	7fefffff 	.word	0x7fefffff
 8005fe0:	f016 0310 	ands.w	r3, r6, #16
 8005fe4:	bf18      	it	ne
 8005fe6:	236a      	movne	r3, #106	; 0x6a
 8005fe8:	4640      	mov	r0, r8
 8005fea:	9305      	str	r3, [sp, #20]
 8005fec:	4649      	mov	r1, r9
 8005fee:	2300      	movs	r3, #0
 8005ff0:	4fb0      	ldr	r7, [pc, #704]	; (80062b4 <_strtod_l+0x874>)
 8005ff2:	07f2      	lsls	r2, r6, #31
 8005ff4:	d504      	bpl.n	8006000 <_strtod_l+0x5c0>
 8005ff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ffa:	f7fa fa6d 	bl	80004d8 <__aeabi_dmul>
 8005ffe:	2301      	movs	r3, #1
 8006000:	1076      	asrs	r6, r6, #1
 8006002:	f107 0708 	add.w	r7, r7, #8
 8006006:	d1f4      	bne.n	8005ff2 <_strtod_l+0x5b2>
 8006008:	b10b      	cbz	r3, 800600e <_strtod_l+0x5ce>
 800600a:	4680      	mov	r8, r0
 800600c:	4689      	mov	r9, r1
 800600e:	9b05      	ldr	r3, [sp, #20]
 8006010:	b1c3      	cbz	r3, 8006044 <_strtod_l+0x604>
 8006012:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006016:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800601a:	2b00      	cmp	r3, #0
 800601c:	4649      	mov	r1, r9
 800601e:	dd11      	ble.n	8006044 <_strtod_l+0x604>
 8006020:	2b1f      	cmp	r3, #31
 8006022:	f340 8127 	ble.w	8006274 <_strtod_l+0x834>
 8006026:	2b34      	cmp	r3, #52	; 0x34
 8006028:	bfd8      	it	le
 800602a:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800602e:	f04f 0800 	mov.w	r8, #0
 8006032:	bfcf      	iteee	gt
 8006034:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006038:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800603c:	fa03 f202 	lslle.w	r2, r3, r2
 8006040:	ea02 0901 	andle.w	r9, r2, r1
 8006044:	2200      	movs	r2, #0
 8006046:	2300      	movs	r3, #0
 8006048:	4640      	mov	r0, r8
 800604a:	4649      	mov	r1, r9
 800604c:	f7fa fcac 	bl	80009a8 <__aeabi_dcmpeq>
 8006050:	2800      	cmp	r0, #0
 8006052:	d1a1      	bne.n	8005f98 <_strtod_l+0x558>
 8006054:	9b06      	ldr	r3, [sp, #24]
 8006056:	465a      	mov	r2, fp
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	4650      	mov	r0, sl
 800605c:	4623      	mov	r3, r4
 800605e:	9908      	ldr	r1, [sp, #32]
 8006060:	f001 fe1c 	bl	8007c9c <__s2b>
 8006064:	9008      	str	r0, [sp, #32]
 8006066:	2800      	cmp	r0, #0
 8006068:	f43f af21 	beq.w	8005eae <_strtod_l+0x46e>
 800606c:	9b04      	ldr	r3, [sp, #16]
 800606e:	f04f 0b00 	mov.w	fp, #0
 8006072:	1b5d      	subs	r5, r3, r5
 8006074:	9b07      	ldr	r3, [sp, #28]
 8006076:	f8cd b010 	str.w	fp, [sp, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	bfb4      	ite	lt
 800607e:	462b      	movlt	r3, r5
 8006080:	2300      	movge	r3, #0
 8006082:	930e      	str	r3, [sp, #56]	; 0x38
 8006084:	9b07      	ldr	r3, [sp, #28]
 8006086:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800608a:	9314      	str	r3, [sp, #80]	; 0x50
 800608c:	9b08      	ldr	r3, [sp, #32]
 800608e:	4650      	mov	r0, sl
 8006090:	6859      	ldr	r1, [r3, #4]
 8006092:	f001 fd5b 	bl	8007b4c <_Balloc>
 8006096:	9006      	str	r0, [sp, #24]
 8006098:	2800      	cmp	r0, #0
 800609a:	f43f af10 	beq.w	8005ebe <_strtod_l+0x47e>
 800609e:	9b08      	ldr	r3, [sp, #32]
 80060a0:	300c      	adds	r0, #12
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	f103 010c 	add.w	r1, r3, #12
 80060a8:	3202      	adds	r2, #2
 80060aa:	0092      	lsls	r2, r2, #2
 80060ac:	f001 fd40 	bl	8007b30 <memcpy>
 80060b0:	ab1c      	add	r3, sp, #112	; 0x70
 80060b2:	9301      	str	r3, [sp, #4]
 80060b4:	ab1b      	add	r3, sp, #108	; 0x6c
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	4642      	mov	r2, r8
 80060ba:	464b      	mov	r3, r9
 80060bc:	4650      	mov	r0, sl
 80060be:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80060c2:	f002 f92d 	bl	8008320 <__d2b>
 80060c6:	901a      	str	r0, [sp, #104]	; 0x68
 80060c8:	2800      	cmp	r0, #0
 80060ca:	f43f aef8 	beq.w	8005ebe <_strtod_l+0x47e>
 80060ce:	2101      	movs	r1, #1
 80060d0:	4650      	mov	r0, sl
 80060d2:	f001 fe7b 	bl	8007dcc <__i2b>
 80060d6:	4603      	mov	r3, r0
 80060d8:	9004      	str	r0, [sp, #16]
 80060da:	2800      	cmp	r0, #0
 80060dc:	f43f aeef 	beq.w	8005ebe <_strtod_l+0x47e>
 80060e0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80060e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80060e4:	2d00      	cmp	r5, #0
 80060e6:	bfab      	itete	ge
 80060e8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80060ea:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80060ec:	18ee      	addge	r6, r5, r3
 80060ee:	1b5c      	sublt	r4, r3, r5
 80060f0:	9b05      	ldr	r3, [sp, #20]
 80060f2:	bfa8      	it	ge
 80060f4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80060f6:	eba5 0503 	sub.w	r5, r5, r3
 80060fa:	4415      	add	r5, r2
 80060fc:	4b6e      	ldr	r3, [pc, #440]	; (80062b8 <_strtod_l+0x878>)
 80060fe:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8006102:	bfb8      	it	lt
 8006104:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006106:	429d      	cmp	r5, r3
 8006108:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800610c:	f280 80c4 	bge.w	8006298 <_strtod_l+0x858>
 8006110:	1b5b      	subs	r3, r3, r5
 8006112:	2b1f      	cmp	r3, #31
 8006114:	f04f 0701 	mov.w	r7, #1
 8006118:	eba2 0203 	sub.w	r2, r2, r3
 800611c:	f300 80b1 	bgt.w	8006282 <_strtod_l+0x842>
 8006120:	2500      	movs	r5, #0
 8006122:	fa07 f303 	lsl.w	r3, r7, r3
 8006126:	930f      	str	r3, [sp, #60]	; 0x3c
 8006128:	18b7      	adds	r7, r6, r2
 800612a:	9b05      	ldr	r3, [sp, #20]
 800612c:	42be      	cmp	r6, r7
 800612e:	4414      	add	r4, r2
 8006130:	441c      	add	r4, r3
 8006132:	4633      	mov	r3, r6
 8006134:	bfa8      	it	ge
 8006136:	463b      	movge	r3, r7
 8006138:	42a3      	cmp	r3, r4
 800613a:	bfa8      	it	ge
 800613c:	4623      	movge	r3, r4
 800613e:	2b00      	cmp	r3, #0
 8006140:	bfc2      	ittt	gt
 8006142:	1aff      	subgt	r7, r7, r3
 8006144:	1ae4      	subgt	r4, r4, r3
 8006146:	1af6      	subgt	r6, r6, r3
 8006148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800614a:	2b00      	cmp	r3, #0
 800614c:	dd17      	ble.n	800617e <_strtod_l+0x73e>
 800614e:	461a      	mov	r2, r3
 8006150:	4650      	mov	r0, sl
 8006152:	9904      	ldr	r1, [sp, #16]
 8006154:	f001 fef8 	bl	8007f48 <__pow5mult>
 8006158:	9004      	str	r0, [sp, #16]
 800615a:	2800      	cmp	r0, #0
 800615c:	f43f aeaf 	beq.w	8005ebe <_strtod_l+0x47e>
 8006160:	4601      	mov	r1, r0
 8006162:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006164:	4650      	mov	r0, sl
 8006166:	f001 fe47 	bl	8007df8 <__multiply>
 800616a:	9009      	str	r0, [sp, #36]	; 0x24
 800616c:	2800      	cmp	r0, #0
 800616e:	f43f aea6 	beq.w	8005ebe <_strtod_l+0x47e>
 8006172:	4650      	mov	r0, sl
 8006174:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006176:	f001 fd29 	bl	8007bcc <_Bfree>
 800617a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800617c:	931a      	str	r3, [sp, #104]	; 0x68
 800617e:	2f00      	cmp	r7, #0
 8006180:	f300 808e 	bgt.w	80062a0 <_strtod_l+0x860>
 8006184:	9b07      	ldr	r3, [sp, #28]
 8006186:	2b00      	cmp	r3, #0
 8006188:	dd08      	ble.n	800619c <_strtod_l+0x75c>
 800618a:	4650      	mov	r0, sl
 800618c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800618e:	9906      	ldr	r1, [sp, #24]
 8006190:	f001 feda 	bl	8007f48 <__pow5mult>
 8006194:	9006      	str	r0, [sp, #24]
 8006196:	2800      	cmp	r0, #0
 8006198:	f43f ae91 	beq.w	8005ebe <_strtod_l+0x47e>
 800619c:	2c00      	cmp	r4, #0
 800619e:	dd08      	ble.n	80061b2 <_strtod_l+0x772>
 80061a0:	4622      	mov	r2, r4
 80061a2:	4650      	mov	r0, sl
 80061a4:	9906      	ldr	r1, [sp, #24]
 80061a6:	f001 ff29 	bl	8007ffc <__lshift>
 80061aa:	9006      	str	r0, [sp, #24]
 80061ac:	2800      	cmp	r0, #0
 80061ae:	f43f ae86 	beq.w	8005ebe <_strtod_l+0x47e>
 80061b2:	2e00      	cmp	r6, #0
 80061b4:	dd08      	ble.n	80061c8 <_strtod_l+0x788>
 80061b6:	4632      	mov	r2, r6
 80061b8:	4650      	mov	r0, sl
 80061ba:	9904      	ldr	r1, [sp, #16]
 80061bc:	f001 ff1e 	bl	8007ffc <__lshift>
 80061c0:	9004      	str	r0, [sp, #16]
 80061c2:	2800      	cmp	r0, #0
 80061c4:	f43f ae7b 	beq.w	8005ebe <_strtod_l+0x47e>
 80061c8:	4650      	mov	r0, sl
 80061ca:	9a06      	ldr	r2, [sp, #24]
 80061cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80061ce:	f001 ffa1 	bl	8008114 <__mdiff>
 80061d2:	4683      	mov	fp, r0
 80061d4:	2800      	cmp	r0, #0
 80061d6:	f43f ae72 	beq.w	8005ebe <_strtod_l+0x47e>
 80061da:	2400      	movs	r4, #0
 80061dc:	68c3      	ldr	r3, [r0, #12]
 80061de:	9904      	ldr	r1, [sp, #16]
 80061e0:	60c4      	str	r4, [r0, #12]
 80061e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80061e4:	f001 ff7a 	bl	80080dc <__mcmp>
 80061e8:	42a0      	cmp	r0, r4
 80061ea:	da6b      	bge.n	80062c4 <_strtod_l+0x884>
 80061ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061ee:	ea53 0308 	orrs.w	r3, r3, r8
 80061f2:	f040 8091 	bne.w	8006318 <_strtod_l+0x8d8>
 80061f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f040 808c 	bne.w	8006318 <_strtod_l+0x8d8>
 8006200:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006204:	0d1b      	lsrs	r3, r3, #20
 8006206:	051b      	lsls	r3, r3, #20
 8006208:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800620c:	f240 8084 	bls.w	8006318 <_strtod_l+0x8d8>
 8006210:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006214:	b91b      	cbnz	r3, 800621e <_strtod_l+0x7de>
 8006216:	f8db 3010 	ldr.w	r3, [fp, #16]
 800621a:	2b01      	cmp	r3, #1
 800621c:	dd7c      	ble.n	8006318 <_strtod_l+0x8d8>
 800621e:	4659      	mov	r1, fp
 8006220:	2201      	movs	r2, #1
 8006222:	4650      	mov	r0, sl
 8006224:	f001 feea 	bl	8007ffc <__lshift>
 8006228:	9904      	ldr	r1, [sp, #16]
 800622a:	4683      	mov	fp, r0
 800622c:	f001 ff56 	bl	80080dc <__mcmp>
 8006230:	2800      	cmp	r0, #0
 8006232:	dd71      	ble.n	8006318 <_strtod_l+0x8d8>
 8006234:	9905      	ldr	r1, [sp, #20]
 8006236:	464b      	mov	r3, r9
 8006238:	4a20      	ldr	r2, [pc, #128]	; (80062bc <_strtod_l+0x87c>)
 800623a:	2900      	cmp	r1, #0
 800623c:	f000 808c 	beq.w	8006358 <_strtod_l+0x918>
 8006240:	ea02 0109 	and.w	r1, r2, r9
 8006244:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006248:	f300 8086 	bgt.w	8006358 <_strtod_l+0x918>
 800624c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006250:	f77f aeaa 	ble.w	8005fa8 <_strtod_l+0x568>
 8006254:	4640      	mov	r0, r8
 8006256:	4649      	mov	r1, r9
 8006258:	4b19      	ldr	r3, [pc, #100]	; (80062c0 <_strtod_l+0x880>)
 800625a:	2200      	movs	r2, #0
 800625c:	f7fa f93c 	bl	80004d8 <__aeabi_dmul>
 8006260:	460b      	mov	r3, r1
 8006262:	4303      	orrs	r3, r0
 8006264:	bf08      	it	eq
 8006266:	2322      	moveq	r3, #34	; 0x22
 8006268:	4680      	mov	r8, r0
 800626a:	4689      	mov	r9, r1
 800626c:	bf08      	it	eq
 800626e:	f8ca 3000 	streq.w	r3, [sl]
 8006272:	e62f      	b.n	8005ed4 <_strtod_l+0x494>
 8006274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006278:	fa02 f303 	lsl.w	r3, r2, r3
 800627c:	ea03 0808 	and.w	r8, r3, r8
 8006280:	e6e0      	b.n	8006044 <_strtod_l+0x604>
 8006282:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006286:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800628a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800628e:	35e2      	adds	r5, #226	; 0xe2
 8006290:	fa07 f505 	lsl.w	r5, r7, r5
 8006294:	970f      	str	r7, [sp, #60]	; 0x3c
 8006296:	e747      	b.n	8006128 <_strtod_l+0x6e8>
 8006298:	2301      	movs	r3, #1
 800629a:	2500      	movs	r5, #0
 800629c:	930f      	str	r3, [sp, #60]	; 0x3c
 800629e:	e743      	b.n	8006128 <_strtod_l+0x6e8>
 80062a0:	463a      	mov	r2, r7
 80062a2:	4650      	mov	r0, sl
 80062a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80062a6:	f001 fea9 	bl	8007ffc <__lshift>
 80062aa:	901a      	str	r0, [sp, #104]	; 0x68
 80062ac:	2800      	cmp	r0, #0
 80062ae:	f47f af69 	bne.w	8006184 <_strtod_l+0x744>
 80062b2:	e604      	b.n	8005ebe <_strtod_l+0x47e>
 80062b4:	08009d80 	.word	0x08009d80
 80062b8:	fffffc02 	.word	0xfffffc02
 80062bc:	7ff00000 	.word	0x7ff00000
 80062c0:	39500000 	.word	0x39500000
 80062c4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80062c8:	d165      	bne.n	8006396 <_strtod_l+0x956>
 80062ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062d0:	b35a      	cbz	r2, 800632a <_strtod_l+0x8ea>
 80062d2:	4a99      	ldr	r2, [pc, #612]	; (8006538 <_strtod_l+0xaf8>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d12b      	bne.n	8006330 <_strtod_l+0x8f0>
 80062d8:	9b05      	ldr	r3, [sp, #20]
 80062da:	4641      	mov	r1, r8
 80062dc:	b303      	cbz	r3, 8006320 <_strtod_l+0x8e0>
 80062de:	464a      	mov	r2, r9
 80062e0:	4b96      	ldr	r3, [pc, #600]	; (800653c <_strtod_l+0xafc>)
 80062e2:	4013      	ands	r3, r2
 80062e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80062e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062ec:	d81b      	bhi.n	8006326 <_strtod_l+0x8e6>
 80062ee:	0d1b      	lsrs	r3, r3, #20
 80062f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80062f4:	fa02 f303 	lsl.w	r3, r2, r3
 80062f8:	4299      	cmp	r1, r3
 80062fa:	d119      	bne.n	8006330 <_strtod_l+0x8f0>
 80062fc:	4b90      	ldr	r3, [pc, #576]	; (8006540 <_strtod_l+0xb00>)
 80062fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006300:	429a      	cmp	r2, r3
 8006302:	d102      	bne.n	800630a <_strtod_l+0x8ca>
 8006304:	3101      	adds	r1, #1
 8006306:	f43f adda 	beq.w	8005ebe <_strtod_l+0x47e>
 800630a:	f04f 0800 	mov.w	r8, #0
 800630e:	4b8b      	ldr	r3, [pc, #556]	; (800653c <_strtod_l+0xafc>)
 8006310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006312:	401a      	ands	r2, r3
 8006314:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006318:	9b05      	ldr	r3, [sp, #20]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d19a      	bne.n	8006254 <_strtod_l+0x814>
 800631e:	e5d9      	b.n	8005ed4 <_strtod_l+0x494>
 8006320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006324:	e7e8      	b.n	80062f8 <_strtod_l+0x8b8>
 8006326:	4613      	mov	r3, r2
 8006328:	e7e6      	b.n	80062f8 <_strtod_l+0x8b8>
 800632a:	ea53 0308 	orrs.w	r3, r3, r8
 800632e:	d081      	beq.n	8006234 <_strtod_l+0x7f4>
 8006330:	b1e5      	cbz	r5, 800636c <_strtod_l+0x92c>
 8006332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006334:	421d      	tst	r5, r3
 8006336:	d0ef      	beq.n	8006318 <_strtod_l+0x8d8>
 8006338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800633a:	4640      	mov	r0, r8
 800633c:	4649      	mov	r1, r9
 800633e:	9a05      	ldr	r2, [sp, #20]
 8006340:	b1c3      	cbz	r3, 8006374 <_strtod_l+0x934>
 8006342:	f7ff fb59 	bl	80059f8 <sulp>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800634e:	f7f9 ff0d 	bl	800016c <__adddf3>
 8006352:	4680      	mov	r8, r0
 8006354:	4689      	mov	r9, r1
 8006356:	e7df      	b.n	8006318 <_strtod_l+0x8d8>
 8006358:	4013      	ands	r3, r2
 800635a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800635e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006362:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006366:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800636a:	e7d5      	b.n	8006318 <_strtod_l+0x8d8>
 800636c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800636e:	ea13 0f08 	tst.w	r3, r8
 8006372:	e7e0      	b.n	8006336 <_strtod_l+0x8f6>
 8006374:	f7ff fb40 	bl	80059f8 <sulp>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006380:	f7f9 fef2 	bl	8000168 <__aeabi_dsub>
 8006384:	2200      	movs	r2, #0
 8006386:	2300      	movs	r3, #0
 8006388:	4680      	mov	r8, r0
 800638a:	4689      	mov	r9, r1
 800638c:	f7fa fb0c 	bl	80009a8 <__aeabi_dcmpeq>
 8006390:	2800      	cmp	r0, #0
 8006392:	d0c1      	beq.n	8006318 <_strtod_l+0x8d8>
 8006394:	e608      	b.n	8005fa8 <_strtod_l+0x568>
 8006396:	4658      	mov	r0, fp
 8006398:	9904      	ldr	r1, [sp, #16]
 800639a:	f002 f81d 	bl	80083d8 <__ratio>
 800639e:	2200      	movs	r2, #0
 80063a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063a4:	4606      	mov	r6, r0
 80063a6:	460f      	mov	r7, r1
 80063a8:	f7fa fb12 	bl	80009d0 <__aeabi_dcmple>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	d070      	beq.n	8006492 <_strtod_l+0xa52>
 80063b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d042      	beq.n	800643c <_strtod_l+0x9fc>
 80063b6:	2600      	movs	r6, #0
 80063b8:	4f62      	ldr	r7, [pc, #392]	; (8006544 <_strtod_l+0xb04>)
 80063ba:	4d62      	ldr	r5, [pc, #392]	; (8006544 <_strtod_l+0xb04>)
 80063bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063c2:	0d1b      	lsrs	r3, r3, #20
 80063c4:	051b      	lsls	r3, r3, #20
 80063c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80063c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063ca:	4b5f      	ldr	r3, [pc, #380]	; (8006548 <_strtod_l+0xb08>)
 80063cc:	429a      	cmp	r2, r3
 80063ce:	f040 80c3 	bne.w	8006558 <_strtod_l+0xb18>
 80063d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d4:	4640      	mov	r0, r8
 80063d6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80063da:	4649      	mov	r1, r9
 80063dc:	f001 ff26 	bl	800822c <__ulp>
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	4630      	mov	r0, r6
 80063e6:	4639      	mov	r1, r7
 80063e8:	f7fa f876 	bl	80004d8 <__aeabi_dmul>
 80063ec:	4642      	mov	r2, r8
 80063ee:	464b      	mov	r3, r9
 80063f0:	f7f9 febc 	bl	800016c <__adddf3>
 80063f4:	460b      	mov	r3, r1
 80063f6:	4951      	ldr	r1, [pc, #324]	; (800653c <_strtod_l+0xafc>)
 80063f8:	4a54      	ldr	r2, [pc, #336]	; (800654c <_strtod_l+0xb0c>)
 80063fa:	4019      	ands	r1, r3
 80063fc:	4291      	cmp	r1, r2
 80063fe:	4680      	mov	r8, r0
 8006400:	d95d      	bls.n	80064be <_strtod_l+0xa7e>
 8006402:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006404:	4b4e      	ldr	r3, [pc, #312]	; (8006540 <_strtod_l+0xb00>)
 8006406:	429a      	cmp	r2, r3
 8006408:	d103      	bne.n	8006412 <_strtod_l+0x9d2>
 800640a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800640c:	3301      	adds	r3, #1
 800640e:	f43f ad56 	beq.w	8005ebe <_strtod_l+0x47e>
 8006412:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006416:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006540 <_strtod_l+0xb00>
 800641a:	4650      	mov	r0, sl
 800641c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800641e:	f001 fbd5 	bl	8007bcc <_Bfree>
 8006422:	4650      	mov	r0, sl
 8006424:	9906      	ldr	r1, [sp, #24]
 8006426:	f001 fbd1 	bl	8007bcc <_Bfree>
 800642a:	4650      	mov	r0, sl
 800642c:	9904      	ldr	r1, [sp, #16]
 800642e:	f001 fbcd 	bl	8007bcc <_Bfree>
 8006432:	4659      	mov	r1, fp
 8006434:	4650      	mov	r0, sl
 8006436:	f001 fbc9 	bl	8007bcc <_Bfree>
 800643a:	e627      	b.n	800608c <_strtod_l+0x64c>
 800643c:	f1b8 0f00 	cmp.w	r8, #0
 8006440:	d119      	bne.n	8006476 <_strtod_l+0xa36>
 8006442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006448:	b9e3      	cbnz	r3, 8006484 <_strtod_l+0xa44>
 800644a:	2200      	movs	r2, #0
 800644c:	4630      	mov	r0, r6
 800644e:	4639      	mov	r1, r7
 8006450:	4b3c      	ldr	r3, [pc, #240]	; (8006544 <_strtod_l+0xb04>)
 8006452:	f7fa fab3 	bl	80009bc <__aeabi_dcmplt>
 8006456:	b9c8      	cbnz	r0, 800648c <_strtod_l+0xa4c>
 8006458:	2200      	movs	r2, #0
 800645a:	4630      	mov	r0, r6
 800645c:	4639      	mov	r1, r7
 800645e:	4b3c      	ldr	r3, [pc, #240]	; (8006550 <_strtod_l+0xb10>)
 8006460:	f7fa f83a 	bl	80004d8 <__aeabi_dmul>
 8006464:	4604      	mov	r4, r0
 8006466:	460d      	mov	r5, r1
 8006468:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800646c:	9416      	str	r4, [sp, #88]	; 0x58
 800646e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006470:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006474:	e7a2      	b.n	80063bc <_strtod_l+0x97c>
 8006476:	f1b8 0f01 	cmp.w	r8, #1
 800647a:	d103      	bne.n	8006484 <_strtod_l+0xa44>
 800647c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800647e:	2b00      	cmp	r3, #0
 8006480:	f43f ad92 	beq.w	8005fa8 <_strtod_l+0x568>
 8006484:	2600      	movs	r6, #0
 8006486:	2400      	movs	r4, #0
 8006488:	4f32      	ldr	r7, [pc, #200]	; (8006554 <_strtod_l+0xb14>)
 800648a:	e796      	b.n	80063ba <_strtod_l+0x97a>
 800648c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800648e:	4d30      	ldr	r5, [pc, #192]	; (8006550 <_strtod_l+0xb10>)
 8006490:	e7ea      	b.n	8006468 <_strtod_l+0xa28>
 8006492:	4b2f      	ldr	r3, [pc, #188]	; (8006550 <_strtod_l+0xb10>)
 8006494:	2200      	movs	r2, #0
 8006496:	4630      	mov	r0, r6
 8006498:	4639      	mov	r1, r7
 800649a:	f7fa f81d 	bl	80004d8 <__aeabi_dmul>
 800649e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064a0:	4604      	mov	r4, r0
 80064a2:	460d      	mov	r5, r1
 80064a4:	b933      	cbnz	r3, 80064b4 <_strtod_l+0xa74>
 80064a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064aa:	9010      	str	r0, [sp, #64]	; 0x40
 80064ac:	9311      	str	r3, [sp, #68]	; 0x44
 80064ae:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80064b2:	e783      	b.n	80063bc <_strtod_l+0x97c>
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80064bc:	e7f7      	b.n	80064ae <_strtod_l+0xa6e>
 80064be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80064c2:	9b05      	ldr	r3, [sp, #20]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1a8      	bne.n	800641a <_strtod_l+0x9da>
 80064c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064ce:	0d1b      	lsrs	r3, r3, #20
 80064d0:	051b      	lsls	r3, r3, #20
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d1a1      	bne.n	800641a <_strtod_l+0x9da>
 80064d6:	4620      	mov	r0, r4
 80064d8:	4629      	mov	r1, r5
 80064da:	f7fa fe19 	bl	8001110 <__aeabi_d2lz>
 80064de:	f7f9 ffcd 	bl	800047c <__aeabi_l2d>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	4620      	mov	r0, r4
 80064e8:	4629      	mov	r1, r5
 80064ea:	f7f9 fe3d 	bl	8000168 <__aeabi_dsub>
 80064ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064f4:	ea43 0308 	orr.w	r3, r3, r8
 80064f8:	4313      	orrs	r3, r2
 80064fa:	4604      	mov	r4, r0
 80064fc:	460d      	mov	r5, r1
 80064fe:	d066      	beq.n	80065ce <_strtod_l+0xb8e>
 8006500:	a309      	add	r3, pc, #36	; (adr r3, 8006528 <_strtod_l+0xae8>)
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	f7fa fa59 	bl	80009bc <__aeabi_dcmplt>
 800650a:	2800      	cmp	r0, #0
 800650c:	f47f ace2 	bne.w	8005ed4 <_strtod_l+0x494>
 8006510:	a307      	add	r3, pc, #28	; (adr r3, 8006530 <_strtod_l+0xaf0>)
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	4620      	mov	r0, r4
 8006518:	4629      	mov	r1, r5
 800651a:	f7fa fa6d 	bl	80009f8 <__aeabi_dcmpgt>
 800651e:	2800      	cmp	r0, #0
 8006520:	f43f af7b 	beq.w	800641a <_strtod_l+0x9da>
 8006524:	e4d6      	b.n	8005ed4 <_strtod_l+0x494>
 8006526:	bf00      	nop
 8006528:	94a03595 	.word	0x94a03595
 800652c:	3fdfffff 	.word	0x3fdfffff
 8006530:	35afe535 	.word	0x35afe535
 8006534:	3fe00000 	.word	0x3fe00000
 8006538:	000fffff 	.word	0x000fffff
 800653c:	7ff00000 	.word	0x7ff00000
 8006540:	7fefffff 	.word	0x7fefffff
 8006544:	3ff00000 	.word	0x3ff00000
 8006548:	7fe00000 	.word	0x7fe00000
 800654c:	7c9fffff 	.word	0x7c9fffff
 8006550:	3fe00000 	.word	0x3fe00000
 8006554:	bff00000 	.word	0xbff00000
 8006558:	9b05      	ldr	r3, [sp, #20]
 800655a:	b313      	cbz	r3, 80065a2 <_strtod_l+0xb62>
 800655c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800655e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006562:	d81e      	bhi.n	80065a2 <_strtod_l+0xb62>
 8006564:	a326      	add	r3, pc, #152	; (adr r3, 8006600 <_strtod_l+0xbc0>)
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	4620      	mov	r0, r4
 800656c:	4629      	mov	r1, r5
 800656e:	f7fa fa2f 	bl	80009d0 <__aeabi_dcmple>
 8006572:	b190      	cbz	r0, 800659a <_strtod_l+0xb5a>
 8006574:	4629      	mov	r1, r5
 8006576:	4620      	mov	r0, r4
 8006578:	f7fa fa86 	bl	8000a88 <__aeabi_d2uiz>
 800657c:	2801      	cmp	r0, #1
 800657e:	bf38      	it	cc
 8006580:	2001      	movcc	r0, #1
 8006582:	f7f9 ff2f 	bl	80003e4 <__aeabi_ui2d>
 8006586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006588:	4604      	mov	r4, r0
 800658a:	460d      	mov	r5, r1
 800658c:	b9d3      	cbnz	r3, 80065c4 <_strtod_l+0xb84>
 800658e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006592:	9012      	str	r0, [sp, #72]	; 0x48
 8006594:	9313      	str	r3, [sp, #76]	; 0x4c
 8006596:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800659a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800659c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80065a0:	1a9f      	subs	r7, r3, r2
 80065a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065a6:	f001 fe41 	bl	800822c <__ulp>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4630      	mov	r0, r6
 80065b0:	4639      	mov	r1, r7
 80065b2:	f7f9 ff91 	bl	80004d8 <__aeabi_dmul>
 80065b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065ba:	f7f9 fdd7 	bl	800016c <__adddf3>
 80065be:	4680      	mov	r8, r0
 80065c0:	4689      	mov	r9, r1
 80065c2:	e77e      	b.n	80064c2 <_strtod_l+0xa82>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80065cc:	e7e3      	b.n	8006596 <_strtod_l+0xb56>
 80065ce:	a30e      	add	r3, pc, #56	; (adr r3, 8006608 <_strtod_l+0xbc8>)
 80065d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d4:	f7fa f9f2 	bl	80009bc <__aeabi_dcmplt>
 80065d8:	e7a1      	b.n	800651e <_strtod_l+0xade>
 80065da:	2300      	movs	r3, #0
 80065dc:	930a      	str	r3, [sp, #40]	; 0x28
 80065de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80065e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	f7ff ba71 	b.w	8005aca <_strtod_l+0x8a>
 80065e8:	2a65      	cmp	r2, #101	; 0x65
 80065ea:	f43f ab63 	beq.w	8005cb4 <_strtod_l+0x274>
 80065ee:	2a45      	cmp	r2, #69	; 0x45
 80065f0:	f43f ab60 	beq.w	8005cb4 <_strtod_l+0x274>
 80065f4:	2301      	movs	r3, #1
 80065f6:	f7ff bb95 	b.w	8005d24 <_strtod_l+0x2e4>
 80065fa:	bf00      	nop
 80065fc:	f3af 8000 	nop.w
 8006600:	ffc00000 	.word	0xffc00000
 8006604:	41dfffff 	.word	0x41dfffff
 8006608:	94a03595 	.word	0x94a03595
 800660c:	3fcfffff 	.word	0x3fcfffff

08006610 <_strtod_r>:
 8006610:	4b01      	ldr	r3, [pc, #4]	; (8006618 <_strtod_r+0x8>)
 8006612:	f7ff ba15 	b.w	8005a40 <_strtod_l>
 8006616:	bf00      	nop
 8006618:	2000007c 	.word	0x2000007c

0800661c <_strtol_l.constprop.0>:
 800661c:	2b01      	cmp	r3, #1
 800661e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006622:	4680      	mov	r8, r0
 8006624:	d001      	beq.n	800662a <_strtol_l.constprop.0+0xe>
 8006626:	2b24      	cmp	r3, #36	; 0x24
 8006628:	d906      	bls.n	8006638 <_strtol_l.constprop.0+0x1c>
 800662a:	f7fe fb21 	bl	8004c70 <__errno>
 800662e:	2316      	movs	r3, #22
 8006630:	6003      	str	r3, [r0, #0]
 8006632:	2000      	movs	r0, #0
 8006634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006638:	460d      	mov	r5, r1
 800663a:	4f35      	ldr	r7, [pc, #212]	; (8006710 <_strtol_l.constprop.0+0xf4>)
 800663c:	4628      	mov	r0, r5
 800663e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006642:	5de6      	ldrb	r6, [r4, r7]
 8006644:	f016 0608 	ands.w	r6, r6, #8
 8006648:	d1f8      	bne.n	800663c <_strtol_l.constprop.0+0x20>
 800664a:	2c2d      	cmp	r4, #45	; 0x2d
 800664c:	d12f      	bne.n	80066ae <_strtol_l.constprop.0+0x92>
 800664e:	2601      	movs	r6, #1
 8006650:	782c      	ldrb	r4, [r5, #0]
 8006652:	1c85      	adds	r5, r0, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d057      	beq.n	8006708 <_strtol_l.constprop.0+0xec>
 8006658:	2b10      	cmp	r3, #16
 800665a:	d109      	bne.n	8006670 <_strtol_l.constprop.0+0x54>
 800665c:	2c30      	cmp	r4, #48	; 0x30
 800665e:	d107      	bne.n	8006670 <_strtol_l.constprop.0+0x54>
 8006660:	7828      	ldrb	r0, [r5, #0]
 8006662:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006666:	2858      	cmp	r0, #88	; 0x58
 8006668:	d149      	bne.n	80066fe <_strtol_l.constprop.0+0xe2>
 800666a:	2310      	movs	r3, #16
 800666c:	786c      	ldrb	r4, [r5, #1]
 800666e:	3502      	adds	r5, #2
 8006670:	2700      	movs	r7, #0
 8006672:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006676:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800667a:	fbbe f9f3 	udiv	r9, lr, r3
 800667e:	4638      	mov	r0, r7
 8006680:	fb03 ea19 	mls	sl, r3, r9, lr
 8006684:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006688:	f1bc 0f09 	cmp.w	ip, #9
 800668c:	d814      	bhi.n	80066b8 <_strtol_l.constprop.0+0x9c>
 800668e:	4664      	mov	r4, ip
 8006690:	42a3      	cmp	r3, r4
 8006692:	dd22      	ble.n	80066da <_strtol_l.constprop.0+0xbe>
 8006694:	2f00      	cmp	r7, #0
 8006696:	db1d      	blt.n	80066d4 <_strtol_l.constprop.0+0xb8>
 8006698:	4581      	cmp	r9, r0
 800669a:	d31b      	bcc.n	80066d4 <_strtol_l.constprop.0+0xb8>
 800669c:	d101      	bne.n	80066a2 <_strtol_l.constprop.0+0x86>
 800669e:	45a2      	cmp	sl, r4
 80066a0:	db18      	blt.n	80066d4 <_strtol_l.constprop.0+0xb8>
 80066a2:	2701      	movs	r7, #1
 80066a4:	fb00 4003 	mla	r0, r0, r3, r4
 80066a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066ac:	e7ea      	b.n	8006684 <_strtol_l.constprop.0+0x68>
 80066ae:	2c2b      	cmp	r4, #43	; 0x2b
 80066b0:	bf04      	itt	eq
 80066b2:	782c      	ldrbeq	r4, [r5, #0]
 80066b4:	1c85      	addeq	r5, r0, #2
 80066b6:	e7cd      	b.n	8006654 <_strtol_l.constprop.0+0x38>
 80066b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80066bc:	f1bc 0f19 	cmp.w	ip, #25
 80066c0:	d801      	bhi.n	80066c6 <_strtol_l.constprop.0+0xaa>
 80066c2:	3c37      	subs	r4, #55	; 0x37
 80066c4:	e7e4      	b.n	8006690 <_strtol_l.constprop.0+0x74>
 80066c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80066ca:	f1bc 0f19 	cmp.w	ip, #25
 80066ce:	d804      	bhi.n	80066da <_strtol_l.constprop.0+0xbe>
 80066d0:	3c57      	subs	r4, #87	; 0x57
 80066d2:	e7dd      	b.n	8006690 <_strtol_l.constprop.0+0x74>
 80066d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80066d8:	e7e6      	b.n	80066a8 <_strtol_l.constprop.0+0x8c>
 80066da:	2f00      	cmp	r7, #0
 80066dc:	da07      	bge.n	80066ee <_strtol_l.constprop.0+0xd2>
 80066de:	2322      	movs	r3, #34	; 0x22
 80066e0:	4670      	mov	r0, lr
 80066e2:	f8c8 3000 	str.w	r3, [r8]
 80066e6:	2a00      	cmp	r2, #0
 80066e8:	d0a4      	beq.n	8006634 <_strtol_l.constprop.0+0x18>
 80066ea:	1e69      	subs	r1, r5, #1
 80066ec:	e005      	b.n	80066fa <_strtol_l.constprop.0+0xde>
 80066ee:	b106      	cbz	r6, 80066f2 <_strtol_l.constprop.0+0xd6>
 80066f0:	4240      	negs	r0, r0
 80066f2:	2a00      	cmp	r2, #0
 80066f4:	d09e      	beq.n	8006634 <_strtol_l.constprop.0+0x18>
 80066f6:	2f00      	cmp	r7, #0
 80066f8:	d1f7      	bne.n	80066ea <_strtol_l.constprop.0+0xce>
 80066fa:	6011      	str	r1, [r2, #0]
 80066fc:	e79a      	b.n	8006634 <_strtol_l.constprop.0+0x18>
 80066fe:	2430      	movs	r4, #48	; 0x30
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1b5      	bne.n	8006670 <_strtol_l.constprop.0+0x54>
 8006704:	2308      	movs	r3, #8
 8006706:	e7b3      	b.n	8006670 <_strtol_l.constprop.0+0x54>
 8006708:	2c30      	cmp	r4, #48	; 0x30
 800670a:	d0a9      	beq.n	8006660 <_strtol_l.constprop.0+0x44>
 800670c:	230a      	movs	r3, #10
 800670e:	e7af      	b.n	8006670 <_strtol_l.constprop.0+0x54>
 8006710:	08009da9 	.word	0x08009da9

08006714 <_strtol_r>:
 8006714:	f7ff bf82 	b.w	800661c <_strtol_l.constprop.0>

08006718 <quorem>:
 8006718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671c:	6903      	ldr	r3, [r0, #16]
 800671e:	690c      	ldr	r4, [r1, #16]
 8006720:	4607      	mov	r7, r0
 8006722:	42a3      	cmp	r3, r4
 8006724:	f2c0 8082 	blt.w	800682c <quorem+0x114>
 8006728:	3c01      	subs	r4, #1
 800672a:	f100 0514 	add.w	r5, r0, #20
 800672e:	f101 0814 	add.w	r8, r1, #20
 8006732:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006736:	9301      	str	r3, [sp, #4]
 8006738:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800673c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006740:	3301      	adds	r3, #1
 8006742:	429a      	cmp	r2, r3
 8006744:	fbb2 f6f3 	udiv	r6, r2, r3
 8006748:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800674c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006750:	d331      	bcc.n	80067b6 <quorem+0x9e>
 8006752:	f04f 0e00 	mov.w	lr, #0
 8006756:	4640      	mov	r0, r8
 8006758:	46ac      	mov	ip, r5
 800675a:	46f2      	mov	sl, lr
 800675c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006760:	b293      	uxth	r3, r2
 8006762:	fb06 e303 	mla	r3, r6, r3, lr
 8006766:	0c12      	lsrs	r2, r2, #16
 8006768:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800676c:	b29b      	uxth	r3, r3
 800676e:	fb06 e202 	mla	r2, r6, r2, lr
 8006772:	ebaa 0303 	sub.w	r3, sl, r3
 8006776:	f8dc a000 	ldr.w	sl, [ip]
 800677a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800677e:	fa1f fa8a 	uxth.w	sl, sl
 8006782:	4453      	add	r3, sl
 8006784:	f8dc a000 	ldr.w	sl, [ip]
 8006788:	b292      	uxth	r2, r2
 800678a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800678e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006792:	b29b      	uxth	r3, r3
 8006794:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006798:	4581      	cmp	r9, r0
 800679a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800679e:	f84c 3b04 	str.w	r3, [ip], #4
 80067a2:	d2db      	bcs.n	800675c <quorem+0x44>
 80067a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80067a8:	b92b      	cbnz	r3, 80067b6 <quorem+0x9e>
 80067aa:	9b01      	ldr	r3, [sp, #4]
 80067ac:	3b04      	subs	r3, #4
 80067ae:	429d      	cmp	r5, r3
 80067b0:	461a      	mov	r2, r3
 80067b2:	d32f      	bcc.n	8006814 <quorem+0xfc>
 80067b4:	613c      	str	r4, [r7, #16]
 80067b6:	4638      	mov	r0, r7
 80067b8:	f001 fc90 	bl	80080dc <__mcmp>
 80067bc:	2800      	cmp	r0, #0
 80067be:	db25      	blt.n	800680c <quorem+0xf4>
 80067c0:	4628      	mov	r0, r5
 80067c2:	f04f 0c00 	mov.w	ip, #0
 80067c6:	3601      	adds	r6, #1
 80067c8:	f858 1b04 	ldr.w	r1, [r8], #4
 80067cc:	f8d0 e000 	ldr.w	lr, [r0]
 80067d0:	b28b      	uxth	r3, r1
 80067d2:	ebac 0303 	sub.w	r3, ip, r3
 80067d6:	fa1f f28e 	uxth.w	r2, lr
 80067da:	4413      	add	r3, r2
 80067dc:	0c0a      	lsrs	r2, r1, #16
 80067de:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80067e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067ec:	45c1      	cmp	r9, r8
 80067ee:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80067f2:	f840 3b04 	str.w	r3, [r0], #4
 80067f6:	d2e7      	bcs.n	80067c8 <quorem+0xb0>
 80067f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006800:	b922      	cbnz	r2, 800680c <quorem+0xf4>
 8006802:	3b04      	subs	r3, #4
 8006804:	429d      	cmp	r5, r3
 8006806:	461a      	mov	r2, r3
 8006808:	d30a      	bcc.n	8006820 <quorem+0x108>
 800680a:	613c      	str	r4, [r7, #16]
 800680c:	4630      	mov	r0, r6
 800680e:	b003      	add	sp, #12
 8006810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006814:	6812      	ldr	r2, [r2, #0]
 8006816:	3b04      	subs	r3, #4
 8006818:	2a00      	cmp	r2, #0
 800681a:	d1cb      	bne.n	80067b4 <quorem+0x9c>
 800681c:	3c01      	subs	r4, #1
 800681e:	e7c6      	b.n	80067ae <quorem+0x96>
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	3b04      	subs	r3, #4
 8006824:	2a00      	cmp	r2, #0
 8006826:	d1f0      	bne.n	800680a <quorem+0xf2>
 8006828:	3c01      	subs	r4, #1
 800682a:	e7eb      	b.n	8006804 <quorem+0xec>
 800682c:	2000      	movs	r0, #0
 800682e:	e7ee      	b.n	800680e <quorem+0xf6>

08006830 <_dtoa_r>:
 8006830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006834:	4616      	mov	r6, r2
 8006836:	461f      	mov	r7, r3
 8006838:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800683a:	b099      	sub	sp, #100	; 0x64
 800683c:	4605      	mov	r5, r0
 800683e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006842:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006846:	b974      	cbnz	r4, 8006866 <_dtoa_r+0x36>
 8006848:	2010      	movs	r0, #16
 800684a:	f001 f949 	bl	8007ae0 <malloc>
 800684e:	4602      	mov	r2, r0
 8006850:	6268      	str	r0, [r5, #36]	; 0x24
 8006852:	b920      	cbnz	r0, 800685e <_dtoa_r+0x2e>
 8006854:	21ea      	movs	r1, #234	; 0xea
 8006856:	4ba8      	ldr	r3, [pc, #672]	; (8006af8 <_dtoa_r+0x2c8>)
 8006858:	48a8      	ldr	r0, [pc, #672]	; (8006afc <_dtoa_r+0x2cc>)
 800685a:	f002 f8b3 	bl	80089c4 <__assert_func>
 800685e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006862:	6004      	str	r4, [r0, #0]
 8006864:	60c4      	str	r4, [r0, #12]
 8006866:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006868:	6819      	ldr	r1, [r3, #0]
 800686a:	b151      	cbz	r1, 8006882 <_dtoa_r+0x52>
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	2301      	movs	r3, #1
 8006870:	4093      	lsls	r3, r2
 8006872:	604a      	str	r2, [r1, #4]
 8006874:	608b      	str	r3, [r1, #8]
 8006876:	4628      	mov	r0, r5
 8006878:	f001 f9a8 	bl	8007bcc <_Bfree>
 800687c:	2200      	movs	r2, #0
 800687e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	1e3b      	subs	r3, r7, #0
 8006884:	bfaf      	iteee	ge
 8006886:	2300      	movge	r3, #0
 8006888:	2201      	movlt	r2, #1
 800688a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800688e:	9305      	strlt	r3, [sp, #20]
 8006890:	bfa8      	it	ge
 8006892:	f8c8 3000 	strge.w	r3, [r8]
 8006896:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800689a:	4b99      	ldr	r3, [pc, #612]	; (8006b00 <_dtoa_r+0x2d0>)
 800689c:	bfb8      	it	lt
 800689e:	f8c8 2000 	strlt.w	r2, [r8]
 80068a2:	ea33 0309 	bics.w	r3, r3, r9
 80068a6:	d119      	bne.n	80068dc <_dtoa_r+0xac>
 80068a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80068ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068b4:	4333      	orrs	r3, r6
 80068b6:	f000 857f 	beq.w	80073b8 <_dtoa_r+0xb88>
 80068ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068bc:	b953      	cbnz	r3, 80068d4 <_dtoa_r+0xa4>
 80068be:	4b91      	ldr	r3, [pc, #580]	; (8006b04 <_dtoa_r+0x2d4>)
 80068c0:	e022      	b.n	8006908 <_dtoa_r+0xd8>
 80068c2:	4b91      	ldr	r3, [pc, #580]	; (8006b08 <_dtoa_r+0x2d8>)
 80068c4:	9303      	str	r3, [sp, #12]
 80068c6:	3308      	adds	r3, #8
 80068c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80068ca:	6013      	str	r3, [r2, #0]
 80068cc:	9803      	ldr	r0, [sp, #12]
 80068ce:	b019      	add	sp, #100	; 0x64
 80068d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d4:	4b8b      	ldr	r3, [pc, #556]	; (8006b04 <_dtoa_r+0x2d4>)
 80068d6:	9303      	str	r3, [sp, #12]
 80068d8:	3303      	adds	r3, #3
 80068da:	e7f5      	b.n	80068c8 <_dtoa_r+0x98>
 80068dc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80068e0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80068e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068e8:	2200      	movs	r2, #0
 80068ea:	2300      	movs	r3, #0
 80068ec:	f7fa f85c 	bl	80009a8 <__aeabi_dcmpeq>
 80068f0:	4680      	mov	r8, r0
 80068f2:	b158      	cbz	r0, 800690c <_dtoa_r+0xdc>
 80068f4:	2301      	movs	r3, #1
 80068f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80068f8:	6013      	str	r3, [r2, #0]
 80068fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 8558 	beq.w	80073b2 <_dtoa_r+0xb82>
 8006902:	4882      	ldr	r0, [pc, #520]	; (8006b0c <_dtoa_r+0x2dc>)
 8006904:	6018      	str	r0, [r3, #0]
 8006906:	1e43      	subs	r3, r0, #1
 8006908:	9303      	str	r3, [sp, #12]
 800690a:	e7df      	b.n	80068cc <_dtoa_r+0x9c>
 800690c:	ab16      	add	r3, sp, #88	; 0x58
 800690e:	9301      	str	r3, [sp, #4]
 8006910:	ab17      	add	r3, sp, #92	; 0x5c
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	4628      	mov	r0, r5
 8006916:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800691a:	f001 fd01 	bl	8008320 <__d2b>
 800691e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006922:	4683      	mov	fp, r0
 8006924:	2c00      	cmp	r4, #0
 8006926:	d07f      	beq.n	8006a28 <_dtoa_r+0x1f8>
 8006928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800692c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800692e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006932:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006936:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800693a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800693e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006942:	2200      	movs	r2, #0
 8006944:	4b72      	ldr	r3, [pc, #456]	; (8006b10 <_dtoa_r+0x2e0>)
 8006946:	f7f9 fc0f 	bl	8000168 <__aeabi_dsub>
 800694a:	a365      	add	r3, pc, #404	; (adr r3, 8006ae0 <_dtoa_r+0x2b0>)
 800694c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006950:	f7f9 fdc2 	bl	80004d8 <__aeabi_dmul>
 8006954:	a364      	add	r3, pc, #400	; (adr r3, 8006ae8 <_dtoa_r+0x2b8>)
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	f7f9 fc07 	bl	800016c <__adddf3>
 800695e:	4606      	mov	r6, r0
 8006960:	4620      	mov	r0, r4
 8006962:	460f      	mov	r7, r1
 8006964:	f7f9 fd4e 	bl	8000404 <__aeabi_i2d>
 8006968:	a361      	add	r3, pc, #388	; (adr r3, 8006af0 <_dtoa_r+0x2c0>)
 800696a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696e:	f7f9 fdb3 	bl	80004d8 <__aeabi_dmul>
 8006972:	4602      	mov	r2, r0
 8006974:	460b      	mov	r3, r1
 8006976:	4630      	mov	r0, r6
 8006978:	4639      	mov	r1, r7
 800697a:	f7f9 fbf7 	bl	800016c <__adddf3>
 800697e:	4606      	mov	r6, r0
 8006980:	460f      	mov	r7, r1
 8006982:	f7fa f859 	bl	8000a38 <__aeabi_d2iz>
 8006986:	2200      	movs	r2, #0
 8006988:	4682      	mov	sl, r0
 800698a:	2300      	movs	r3, #0
 800698c:	4630      	mov	r0, r6
 800698e:	4639      	mov	r1, r7
 8006990:	f7fa f814 	bl	80009bc <__aeabi_dcmplt>
 8006994:	b148      	cbz	r0, 80069aa <_dtoa_r+0x17a>
 8006996:	4650      	mov	r0, sl
 8006998:	f7f9 fd34 	bl	8000404 <__aeabi_i2d>
 800699c:	4632      	mov	r2, r6
 800699e:	463b      	mov	r3, r7
 80069a0:	f7fa f802 	bl	80009a8 <__aeabi_dcmpeq>
 80069a4:	b908      	cbnz	r0, 80069aa <_dtoa_r+0x17a>
 80069a6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80069aa:	f1ba 0f16 	cmp.w	sl, #22
 80069ae:	d858      	bhi.n	8006a62 <_dtoa_r+0x232>
 80069b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069b4:	4b57      	ldr	r3, [pc, #348]	; (8006b14 <_dtoa_r+0x2e4>)
 80069b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	f7f9 fffd 	bl	80009bc <__aeabi_dcmplt>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d04f      	beq.n	8006a66 <_dtoa_r+0x236>
 80069c6:	2300      	movs	r3, #0
 80069c8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80069cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80069ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80069d0:	1b1c      	subs	r4, r3, r4
 80069d2:	1e63      	subs	r3, r4, #1
 80069d4:	9309      	str	r3, [sp, #36]	; 0x24
 80069d6:	bf49      	itett	mi
 80069d8:	f1c4 0301 	rsbmi	r3, r4, #1
 80069dc:	2300      	movpl	r3, #0
 80069de:	9306      	strmi	r3, [sp, #24]
 80069e0:	2300      	movmi	r3, #0
 80069e2:	bf54      	ite	pl
 80069e4:	9306      	strpl	r3, [sp, #24]
 80069e6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80069e8:	f1ba 0f00 	cmp.w	sl, #0
 80069ec:	db3d      	blt.n	8006a6a <_dtoa_r+0x23a>
 80069ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80069f4:	4453      	add	r3, sl
 80069f6:	9309      	str	r3, [sp, #36]	; 0x24
 80069f8:	2300      	movs	r3, #0
 80069fa:	930a      	str	r3, [sp, #40]	; 0x28
 80069fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069fe:	2b09      	cmp	r3, #9
 8006a00:	f200 808c 	bhi.w	8006b1c <_dtoa_r+0x2ec>
 8006a04:	2b05      	cmp	r3, #5
 8006a06:	bfc4      	itt	gt
 8006a08:	3b04      	subgt	r3, #4
 8006a0a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006a0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a0e:	bfc8      	it	gt
 8006a10:	2400      	movgt	r4, #0
 8006a12:	f1a3 0302 	sub.w	r3, r3, #2
 8006a16:	bfd8      	it	le
 8006a18:	2401      	movle	r4, #1
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	f200 808a 	bhi.w	8006b34 <_dtoa_r+0x304>
 8006a20:	e8df f003 	tbb	[pc, r3]
 8006a24:	5b4d4f2d 	.word	0x5b4d4f2d
 8006a28:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006a2c:	441c      	add	r4, r3
 8006a2e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006a32:	2b20      	cmp	r3, #32
 8006a34:	bfc3      	ittte	gt
 8006a36:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a3a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006a3e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006a42:	f1c3 0320 	rsble	r3, r3, #32
 8006a46:	bfc6      	itte	gt
 8006a48:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006a4c:	4318      	orrgt	r0, r3
 8006a4e:	fa06 f003 	lslle.w	r0, r6, r3
 8006a52:	f7f9 fcc7 	bl	80003e4 <__aeabi_ui2d>
 8006a56:	2301      	movs	r3, #1
 8006a58:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006a5c:	3c01      	subs	r4, #1
 8006a5e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a60:	e76f      	b.n	8006942 <_dtoa_r+0x112>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e7b2      	b.n	80069cc <_dtoa_r+0x19c>
 8006a66:	900f      	str	r0, [sp, #60]	; 0x3c
 8006a68:	e7b1      	b.n	80069ce <_dtoa_r+0x19e>
 8006a6a:	9b06      	ldr	r3, [sp, #24]
 8006a6c:	eba3 030a 	sub.w	r3, r3, sl
 8006a70:	9306      	str	r3, [sp, #24]
 8006a72:	f1ca 0300 	rsb	r3, sl, #0
 8006a76:	930a      	str	r3, [sp, #40]	; 0x28
 8006a78:	2300      	movs	r3, #0
 8006a7a:	930e      	str	r3, [sp, #56]	; 0x38
 8006a7c:	e7be      	b.n	80069fc <_dtoa_r+0x1cc>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	dc58      	bgt.n	8006b3a <_dtoa_r+0x30a>
 8006a88:	f04f 0901 	mov.w	r9, #1
 8006a8c:	464b      	mov	r3, r9
 8006a8e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006a92:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006a96:	2200      	movs	r2, #0
 8006a98:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006a9a:	6042      	str	r2, [r0, #4]
 8006a9c:	2204      	movs	r2, #4
 8006a9e:	f102 0614 	add.w	r6, r2, #20
 8006aa2:	429e      	cmp	r6, r3
 8006aa4:	6841      	ldr	r1, [r0, #4]
 8006aa6:	d94e      	bls.n	8006b46 <_dtoa_r+0x316>
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f001 f84f 	bl	8007b4c <_Balloc>
 8006aae:	9003      	str	r0, [sp, #12]
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	d14c      	bne.n	8006b4e <_dtoa_r+0x31e>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006aba:	4b17      	ldr	r3, [pc, #92]	; (8006b18 <_dtoa_r+0x2e8>)
 8006abc:	e6cc      	b.n	8006858 <_dtoa_r+0x28>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e7de      	b.n	8006a80 <_dtoa_r+0x250>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ac6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ac8:	eb0a 0903 	add.w	r9, sl, r3
 8006acc:	f109 0301 	add.w	r3, r9, #1
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	9308      	str	r3, [sp, #32]
 8006ad4:	bfb8      	it	lt
 8006ad6:	2301      	movlt	r3, #1
 8006ad8:	e7dd      	b.n	8006a96 <_dtoa_r+0x266>
 8006ada:	2301      	movs	r3, #1
 8006adc:	e7f2      	b.n	8006ac4 <_dtoa_r+0x294>
 8006ade:	bf00      	nop
 8006ae0:	636f4361 	.word	0x636f4361
 8006ae4:	3fd287a7 	.word	0x3fd287a7
 8006ae8:	8b60c8b3 	.word	0x8b60c8b3
 8006aec:	3fc68a28 	.word	0x3fc68a28
 8006af0:	509f79fb 	.word	0x509f79fb
 8006af4:	3fd34413 	.word	0x3fd34413
 8006af8:	08009eb6 	.word	0x08009eb6
 8006afc:	08009ecd 	.word	0x08009ecd
 8006b00:	7ff00000 	.word	0x7ff00000
 8006b04:	08009eb2 	.word	0x08009eb2
 8006b08:	08009ea9 	.word	0x08009ea9
 8006b0c:	08009d2d 	.word	0x08009d2d
 8006b10:	3ff80000 	.word	0x3ff80000
 8006b14:	0800a038 	.word	0x0800a038
 8006b18:	08009f28 	.word	0x08009f28
 8006b1c:	2401      	movs	r4, #1
 8006b1e:	2300      	movs	r3, #0
 8006b20:	940b      	str	r4, [sp, #44]	; 0x2c
 8006b22:	9322      	str	r3, [sp, #136]	; 0x88
 8006b24:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2312      	movs	r3, #18
 8006b2c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b30:	9223      	str	r2, [sp, #140]	; 0x8c
 8006b32:	e7b0      	b.n	8006a96 <_dtoa_r+0x266>
 8006b34:	2301      	movs	r3, #1
 8006b36:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b38:	e7f4      	b.n	8006b24 <_dtoa_r+0x2f4>
 8006b3a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006b3e:	464b      	mov	r3, r9
 8006b40:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b44:	e7a7      	b.n	8006a96 <_dtoa_r+0x266>
 8006b46:	3101      	adds	r1, #1
 8006b48:	6041      	str	r1, [r0, #4]
 8006b4a:	0052      	lsls	r2, r2, #1
 8006b4c:	e7a7      	b.n	8006a9e <_dtoa_r+0x26e>
 8006b4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b50:	9a03      	ldr	r2, [sp, #12]
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	9b08      	ldr	r3, [sp, #32]
 8006b56:	2b0e      	cmp	r3, #14
 8006b58:	f200 80a8 	bhi.w	8006cac <_dtoa_r+0x47c>
 8006b5c:	2c00      	cmp	r4, #0
 8006b5e:	f000 80a5 	beq.w	8006cac <_dtoa_r+0x47c>
 8006b62:	f1ba 0f00 	cmp.w	sl, #0
 8006b66:	dd34      	ble.n	8006bd2 <_dtoa_r+0x3a2>
 8006b68:	4a9a      	ldr	r2, [pc, #616]	; (8006dd4 <_dtoa_r+0x5a4>)
 8006b6a:	f00a 030f 	and.w	r3, sl, #15
 8006b6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b72:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006b76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b7a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006b7e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006b82:	d016      	beq.n	8006bb2 <_dtoa_r+0x382>
 8006b84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b88:	4b93      	ldr	r3, [pc, #588]	; (8006dd8 <_dtoa_r+0x5a8>)
 8006b8a:	2703      	movs	r7, #3
 8006b8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b90:	f7f9 fdcc 	bl	800072c <__aeabi_ddiv>
 8006b94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b98:	f004 040f 	and.w	r4, r4, #15
 8006b9c:	4e8e      	ldr	r6, [pc, #568]	; (8006dd8 <_dtoa_r+0x5a8>)
 8006b9e:	b954      	cbnz	r4, 8006bb6 <_dtoa_r+0x386>
 8006ba0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ba4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ba8:	f7f9 fdc0 	bl	800072c <__aeabi_ddiv>
 8006bac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bb0:	e029      	b.n	8006c06 <_dtoa_r+0x3d6>
 8006bb2:	2702      	movs	r7, #2
 8006bb4:	e7f2      	b.n	8006b9c <_dtoa_r+0x36c>
 8006bb6:	07e1      	lsls	r1, r4, #31
 8006bb8:	d508      	bpl.n	8006bcc <_dtoa_r+0x39c>
 8006bba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bbe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006bc2:	f7f9 fc89 	bl	80004d8 <__aeabi_dmul>
 8006bc6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006bca:	3701      	adds	r7, #1
 8006bcc:	1064      	asrs	r4, r4, #1
 8006bce:	3608      	adds	r6, #8
 8006bd0:	e7e5      	b.n	8006b9e <_dtoa_r+0x36e>
 8006bd2:	f000 80a5 	beq.w	8006d20 <_dtoa_r+0x4f0>
 8006bd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006bda:	f1ca 0400 	rsb	r4, sl, #0
 8006bde:	4b7d      	ldr	r3, [pc, #500]	; (8006dd4 <_dtoa_r+0x5a4>)
 8006be0:	f004 020f 	and.w	r2, r4, #15
 8006be4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bec:	f7f9 fc74 	bl	80004d8 <__aeabi_dmul>
 8006bf0:	2702      	movs	r7, #2
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bf8:	4e77      	ldr	r6, [pc, #476]	; (8006dd8 <_dtoa_r+0x5a8>)
 8006bfa:	1124      	asrs	r4, r4, #4
 8006bfc:	2c00      	cmp	r4, #0
 8006bfe:	f040 8084 	bne.w	8006d0a <_dtoa_r+0x4da>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1d2      	bne.n	8006bac <_dtoa_r+0x37c>
 8006c06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 808b 	beq.w	8006d24 <_dtoa_r+0x4f4>
 8006c0e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006c12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006c16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	4b6f      	ldr	r3, [pc, #444]	; (8006ddc <_dtoa_r+0x5ac>)
 8006c1e:	f7f9 fecd 	bl	80009bc <__aeabi_dcmplt>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d07e      	beq.n	8006d24 <_dtoa_r+0x4f4>
 8006c26:	9b08      	ldr	r3, [sp, #32]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d07b      	beq.n	8006d24 <_dtoa_r+0x4f4>
 8006c2c:	f1b9 0f00 	cmp.w	r9, #0
 8006c30:	dd38      	ble.n	8006ca4 <_dtoa_r+0x474>
 8006c32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c36:	2200      	movs	r2, #0
 8006c38:	4b69      	ldr	r3, [pc, #420]	; (8006de0 <_dtoa_r+0x5b0>)
 8006c3a:	f7f9 fc4d 	bl	80004d8 <__aeabi_dmul>
 8006c3e:	464c      	mov	r4, r9
 8006c40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c44:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8006c48:	3701      	adds	r7, #1
 8006c4a:	4638      	mov	r0, r7
 8006c4c:	f7f9 fbda 	bl	8000404 <__aeabi_i2d>
 8006c50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c54:	f7f9 fc40 	bl	80004d8 <__aeabi_dmul>
 8006c58:	2200      	movs	r2, #0
 8006c5a:	4b62      	ldr	r3, [pc, #392]	; (8006de4 <_dtoa_r+0x5b4>)
 8006c5c:	f7f9 fa86 	bl	800016c <__adddf3>
 8006c60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006c64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c68:	9611      	str	r6, [sp, #68]	; 0x44
 8006c6a:	2c00      	cmp	r4, #0
 8006c6c:	d15d      	bne.n	8006d2a <_dtoa_r+0x4fa>
 8006c6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c72:	2200      	movs	r2, #0
 8006c74:	4b5c      	ldr	r3, [pc, #368]	; (8006de8 <_dtoa_r+0x5b8>)
 8006c76:	f7f9 fa77 	bl	8000168 <__aeabi_dsub>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c82:	4633      	mov	r3, r6
 8006c84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c86:	f7f9 feb7 	bl	80009f8 <__aeabi_dcmpgt>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	f040 829c 	bne.w	80071c8 <_dtoa_r+0x998>
 8006c90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c96:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006c9a:	f7f9 fe8f 	bl	80009bc <__aeabi_dcmplt>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	f040 8290 	bne.w	80071c4 <_dtoa_r+0x994>
 8006ca4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006ca8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006cac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f2c0 8152 	blt.w	8006f58 <_dtoa_r+0x728>
 8006cb4:	f1ba 0f0e 	cmp.w	sl, #14
 8006cb8:	f300 814e 	bgt.w	8006f58 <_dtoa_r+0x728>
 8006cbc:	4b45      	ldr	r3, [pc, #276]	; (8006dd4 <_dtoa_r+0x5a4>)
 8006cbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006cc2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006cc6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006cca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f280 80db 	bge.w	8006e88 <_dtoa_r+0x658>
 8006cd2:	9b08      	ldr	r3, [sp, #32]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f300 80d7 	bgt.w	8006e88 <_dtoa_r+0x658>
 8006cda:	f040 8272 	bne.w	80071c2 <_dtoa_r+0x992>
 8006cde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	4b40      	ldr	r3, [pc, #256]	; (8006de8 <_dtoa_r+0x5b8>)
 8006ce6:	f7f9 fbf7 	bl	80004d8 <__aeabi_dmul>
 8006cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cee:	f7f9 fe79 	bl	80009e4 <__aeabi_dcmpge>
 8006cf2:	9c08      	ldr	r4, [sp, #32]
 8006cf4:	4626      	mov	r6, r4
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f040 8248 	bne.w	800718c <_dtoa_r+0x95c>
 8006cfc:	2331      	movs	r3, #49	; 0x31
 8006cfe:	9f03      	ldr	r7, [sp, #12]
 8006d00:	f10a 0a01 	add.w	sl, sl, #1
 8006d04:	f807 3b01 	strb.w	r3, [r7], #1
 8006d08:	e244      	b.n	8007194 <_dtoa_r+0x964>
 8006d0a:	07e2      	lsls	r2, r4, #31
 8006d0c:	d505      	bpl.n	8006d1a <_dtoa_r+0x4ea>
 8006d0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d12:	f7f9 fbe1 	bl	80004d8 <__aeabi_dmul>
 8006d16:	2301      	movs	r3, #1
 8006d18:	3701      	adds	r7, #1
 8006d1a:	1064      	asrs	r4, r4, #1
 8006d1c:	3608      	adds	r6, #8
 8006d1e:	e76d      	b.n	8006bfc <_dtoa_r+0x3cc>
 8006d20:	2702      	movs	r7, #2
 8006d22:	e770      	b.n	8006c06 <_dtoa_r+0x3d6>
 8006d24:	46d0      	mov	r8, sl
 8006d26:	9c08      	ldr	r4, [sp, #32]
 8006d28:	e78f      	b.n	8006c4a <_dtoa_r+0x41a>
 8006d2a:	9903      	ldr	r1, [sp, #12]
 8006d2c:	4b29      	ldr	r3, [pc, #164]	; (8006dd4 <_dtoa_r+0x5a4>)
 8006d2e:	4421      	add	r1, r4
 8006d30:	9112      	str	r1, [sp, #72]	; 0x48
 8006d32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d38:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006d3c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d40:	2900      	cmp	r1, #0
 8006d42:	d055      	beq.n	8006df0 <_dtoa_r+0x5c0>
 8006d44:	2000      	movs	r0, #0
 8006d46:	4929      	ldr	r1, [pc, #164]	; (8006dec <_dtoa_r+0x5bc>)
 8006d48:	f7f9 fcf0 	bl	800072c <__aeabi_ddiv>
 8006d4c:	463b      	mov	r3, r7
 8006d4e:	4632      	mov	r2, r6
 8006d50:	f7f9 fa0a 	bl	8000168 <__aeabi_dsub>
 8006d54:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d58:	9f03      	ldr	r7, [sp, #12]
 8006d5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d5e:	f7f9 fe6b 	bl	8000a38 <__aeabi_d2iz>
 8006d62:	4604      	mov	r4, r0
 8006d64:	f7f9 fb4e 	bl	8000404 <__aeabi_i2d>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d70:	f7f9 f9fa 	bl	8000168 <__aeabi_dsub>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	3430      	adds	r4, #48	; 0x30
 8006d7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d82:	f807 4b01 	strb.w	r4, [r7], #1
 8006d86:	f7f9 fe19 	bl	80009bc <__aeabi_dcmplt>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d174      	bne.n	8006e78 <_dtoa_r+0x648>
 8006d8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d92:	2000      	movs	r0, #0
 8006d94:	4911      	ldr	r1, [pc, #68]	; (8006ddc <_dtoa_r+0x5ac>)
 8006d96:	f7f9 f9e7 	bl	8000168 <__aeabi_dsub>
 8006d9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d9e:	f7f9 fe0d 	bl	80009bc <__aeabi_dcmplt>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	f040 80b7 	bne.w	8006f16 <_dtoa_r+0x6e6>
 8006da8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006daa:	429f      	cmp	r7, r3
 8006dac:	f43f af7a 	beq.w	8006ca4 <_dtoa_r+0x474>
 8006db0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006db4:	2200      	movs	r2, #0
 8006db6:	4b0a      	ldr	r3, [pc, #40]	; (8006de0 <_dtoa_r+0x5b0>)
 8006db8:	f7f9 fb8e 	bl	80004d8 <__aeabi_dmul>
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006dc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dc6:	4b06      	ldr	r3, [pc, #24]	; (8006de0 <_dtoa_r+0x5b0>)
 8006dc8:	f7f9 fb86 	bl	80004d8 <__aeabi_dmul>
 8006dcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dd0:	e7c3      	b.n	8006d5a <_dtoa_r+0x52a>
 8006dd2:	bf00      	nop
 8006dd4:	0800a038 	.word	0x0800a038
 8006dd8:	0800a010 	.word	0x0800a010
 8006ddc:	3ff00000 	.word	0x3ff00000
 8006de0:	40240000 	.word	0x40240000
 8006de4:	401c0000 	.word	0x401c0000
 8006de8:	40140000 	.word	0x40140000
 8006dec:	3fe00000 	.word	0x3fe00000
 8006df0:	4630      	mov	r0, r6
 8006df2:	4639      	mov	r1, r7
 8006df4:	f7f9 fb70 	bl	80004d8 <__aeabi_dmul>
 8006df8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dfa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006dfe:	9c03      	ldr	r4, [sp, #12]
 8006e00:	9314      	str	r3, [sp, #80]	; 0x50
 8006e02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e06:	f7f9 fe17 	bl	8000a38 <__aeabi_d2iz>
 8006e0a:	9015      	str	r0, [sp, #84]	; 0x54
 8006e0c:	f7f9 fafa 	bl	8000404 <__aeabi_i2d>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e18:	f7f9 f9a6 	bl	8000168 <__aeabi_dsub>
 8006e1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e1e:	4606      	mov	r6, r0
 8006e20:	3330      	adds	r3, #48	; 0x30
 8006e22:	f804 3b01 	strb.w	r3, [r4], #1
 8006e26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e28:	460f      	mov	r7, r1
 8006e2a:	429c      	cmp	r4, r3
 8006e2c:	f04f 0200 	mov.w	r2, #0
 8006e30:	d124      	bne.n	8006e7c <_dtoa_r+0x64c>
 8006e32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e36:	4bb0      	ldr	r3, [pc, #704]	; (80070f8 <_dtoa_r+0x8c8>)
 8006e38:	f7f9 f998 	bl	800016c <__adddf3>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4630      	mov	r0, r6
 8006e42:	4639      	mov	r1, r7
 8006e44:	f7f9 fdd8 	bl	80009f8 <__aeabi_dcmpgt>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d163      	bne.n	8006f14 <_dtoa_r+0x6e4>
 8006e4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e50:	2000      	movs	r0, #0
 8006e52:	49a9      	ldr	r1, [pc, #676]	; (80070f8 <_dtoa_r+0x8c8>)
 8006e54:	f7f9 f988 	bl	8000168 <__aeabi_dsub>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	4639      	mov	r1, r7
 8006e60:	f7f9 fdac 	bl	80009bc <__aeabi_dcmplt>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	f43f af1d 	beq.w	8006ca4 <_dtoa_r+0x474>
 8006e6a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006e6c:	1e7b      	subs	r3, r7, #1
 8006e6e:	9314      	str	r3, [sp, #80]	; 0x50
 8006e70:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006e74:	2b30      	cmp	r3, #48	; 0x30
 8006e76:	d0f8      	beq.n	8006e6a <_dtoa_r+0x63a>
 8006e78:	46c2      	mov	sl, r8
 8006e7a:	e03b      	b.n	8006ef4 <_dtoa_r+0x6c4>
 8006e7c:	4b9f      	ldr	r3, [pc, #636]	; (80070fc <_dtoa_r+0x8cc>)
 8006e7e:	f7f9 fb2b 	bl	80004d8 <__aeabi_dmul>
 8006e82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e86:	e7bc      	b.n	8006e02 <_dtoa_r+0x5d2>
 8006e88:	9f03      	ldr	r7, [sp, #12]
 8006e8a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006e8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e92:	4640      	mov	r0, r8
 8006e94:	4649      	mov	r1, r9
 8006e96:	f7f9 fc49 	bl	800072c <__aeabi_ddiv>
 8006e9a:	f7f9 fdcd 	bl	8000a38 <__aeabi_d2iz>
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	f7f9 fab0 	bl	8000404 <__aeabi_i2d>
 8006ea4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ea8:	f7f9 fb16 	bl	80004d8 <__aeabi_dmul>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4640      	mov	r0, r8
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	f7f9 f958 	bl	8000168 <__aeabi_dsub>
 8006eb8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006ebc:	f807 6b01 	strb.w	r6, [r7], #1
 8006ec0:	9e03      	ldr	r6, [sp, #12]
 8006ec2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006ec6:	1bbe      	subs	r6, r7, r6
 8006ec8:	45b4      	cmp	ip, r6
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	d136      	bne.n	8006f3e <_dtoa_r+0x70e>
 8006ed0:	f7f9 f94c 	bl	800016c <__adddf3>
 8006ed4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ed8:	4680      	mov	r8, r0
 8006eda:	4689      	mov	r9, r1
 8006edc:	f7f9 fd8c 	bl	80009f8 <__aeabi_dcmpgt>
 8006ee0:	bb58      	cbnz	r0, 8006f3a <_dtoa_r+0x70a>
 8006ee2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ee6:	4640      	mov	r0, r8
 8006ee8:	4649      	mov	r1, r9
 8006eea:	f7f9 fd5d 	bl	80009a8 <__aeabi_dcmpeq>
 8006eee:	b108      	cbz	r0, 8006ef4 <_dtoa_r+0x6c4>
 8006ef0:	07e1      	lsls	r1, r4, #31
 8006ef2:	d422      	bmi.n	8006f3a <_dtoa_r+0x70a>
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	4659      	mov	r1, fp
 8006ef8:	f000 fe68 	bl	8007bcc <_Bfree>
 8006efc:	2300      	movs	r3, #0
 8006efe:	703b      	strb	r3, [r7, #0]
 8006f00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006f02:	f10a 0001 	add.w	r0, sl, #1
 8006f06:	6018      	str	r0, [r3, #0]
 8006f08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f43f acde 	beq.w	80068cc <_dtoa_r+0x9c>
 8006f10:	601f      	str	r7, [r3, #0]
 8006f12:	e4db      	b.n	80068cc <_dtoa_r+0x9c>
 8006f14:	4627      	mov	r7, r4
 8006f16:	463b      	mov	r3, r7
 8006f18:	461f      	mov	r7, r3
 8006f1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f1e:	2a39      	cmp	r2, #57	; 0x39
 8006f20:	d107      	bne.n	8006f32 <_dtoa_r+0x702>
 8006f22:	9a03      	ldr	r2, [sp, #12]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d1f7      	bne.n	8006f18 <_dtoa_r+0x6e8>
 8006f28:	2230      	movs	r2, #48	; 0x30
 8006f2a:	9903      	ldr	r1, [sp, #12]
 8006f2c:	f108 0801 	add.w	r8, r8, #1
 8006f30:	700a      	strb	r2, [r1, #0]
 8006f32:	781a      	ldrb	r2, [r3, #0]
 8006f34:	3201      	adds	r2, #1
 8006f36:	701a      	strb	r2, [r3, #0]
 8006f38:	e79e      	b.n	8006e78 <_dtoa_r+0x648>
 8006f3a:	46d0      	mov	r8, sl
 8006f3c:	e7eb      	b.n	8006f16 <_dtoa_r+0x6e6>
 8006f3e:	2200      	movs	r2, #0
 8006f40:	4b6e      	ldr	r3, [pc, #440]	; (80070fc <_dtoa_r+0x8cc>)
 8006f42:	f7f9 fac9 	bl	80004d8 <__aeabi_dmul>
 8006f46:	2200      	movs	r2, #0
 8006f48:	2300      	movs	r3, #0
 8006f4a:	4680      	mov	r8, r0
 8006f4c:	4689      	mov	r9, r1
 8006f4e:	f7f9 fd2b 	bl	80009a8 <__aeabi_dcmpeq>
 8006f52:	2800      	cmp	r0, #0
 8006f54:	d09b      	beq.n	8006e8e <_dtoa_r+0x65e>
 8006f56:	e7cd      	b.n	8006ef4 <_dtoa_r+0x6c4>
 8006f58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f5a:	2a00      	cmp	r2, #0
 8006f5c:	f000 80d0 	beq.w	8007100 <_dtoa_r+0x8d0>
 8006f60:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006f62:	2a01      	cmp	r2, #1
 8006f64:	f300 80ae 	bgt.w	80070c4 <_dtoa_r+0x894>
 8006f68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f6a:	2a00      	cmp	r2, #0
 8006f6c:	f000 80a6 	beq.w	80070bc <_dtoa_r+0x88c>
 8006f70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006f76:	9f06      	ldr	r7, [sp, #24]
 8006f78:	9a06      	ldr	r2, [sp, #24]
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	441a      	add	r2, r3
 8006f7e:	9206      	str	r2, [sp, #24]
 8006f80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f82:	4628      	mov	r0, r5
 8006f84:	441a      	add	r2, r3
 8006f86:	9209      	str	r2, [sp, #36]	; 0x24
 8006f88:	f000 ff20 	bl	8007dcc <__i2b>
 8006f8c:	4606      	mov	r6, r0
 8006f8e:	2f00      	cmp	r7, #0
 8006f90:	dd0c      	ble.n	8006fac <_dtoa_r+0x77c>
 8006f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	dd09      	ble.n	8006fac <_dtoa_r+0x77c>
 8006f98:	42bb      	cmp	r3, r7
 8006f9a:	bfa8      	it	ge
 8006f9c:	463b      	movge	r3, r7
 8006f9e:	9a06      	ldr	r2, [sp, #24]
 8006fa0:	1aff      	subs	r7, r7, r3
 8006fa2:	1ad2      	subs	r2, r2, r3
 8006fa4:	9206      	str	r2, [sp, #24]
 8006fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	9309      	str	r3, [sp, #36]	; 0x24
 8006fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fae:	b1f3      	cbz	r3, 8006fee <_dtoa_r+0x7be>
 8006fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 80a8 	beq.w	8007108 <_dtoa_r+0x8d8>
 8006fb8:	2c00      	cmp	r4, #0
 8006fba:	dd10      	ble.n	8006fde <_dtoa_r+0x7ae>
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f000 ffc1 	bl	8007f48 <__pow5mult>
 8006fc6:	465a      	mov	r2, fp
 8006fc8:	4601      	mov	r1, r0
 8006fca:	4606      	mov	r6, r0
 8006fcc:	4628      	mov	r0, r5
 8006fce:	f000 ff13 	bl	8007df8 <__multiply>
 8006fd2:	4680      	mov	r8, r0
 8006fd4:	4659      	mov	r1, fp
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	f000 fdf8 	bl	8007bcc <_Bfree>
 8006fdc:	46c3      	mov	fp, r8
 8006fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fe0:	1b1a      	subs	r2, r3, r4
 8006fe2:	d004      	beq.n	8006fee <_dtoa_r+0x7be>
 8006fe4:	4659      	mov	r1, fp
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f000 ffae 	bl	8007f48 <__pow5mult>
 8006fec:	4683      	mov	fp, r0
 8006fee:	2101      	movs	r1, #1
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	f000 feeb 	bl	8007dcc <__i2b>
 8006ff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f340 8086 	ble.w	800710c <_dtoa_r+0x8dc>
 8007000:	461a      	mov	r2, r3
 8007002:	4601      	mov	r1, r0
 8007004:	4628      	mov	r0, r5
 8007006:	f000 ff9f 	bl	8007f48 <__pow5mult>
 800700a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800700c:	4604      	mov	r4, r0
 800700e:	2b01      	cmp	r3, #1
 8007010:	dd7f      	ble.n	8007112 <_dtoa_r+0x8e2>
 8007012:	f04f 0800 	mov.w	r8, #0
 8007016:	6923      	ldr	r3, [r4, #16]
 8007018:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800701c:	6918      	ldr	r0, [r3, #16]
 800701e:	f000 fe87 	bl	8007d30 <__hi0bits>
 8007022:	f1c0 0020 	rsb	r0, r0, #32
 8007026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007028:	4418      	add	r0, r3
 800702a:	f010 001f 	ands.w	r0, r0, #31
 800702e:	f000 8092 	beq.w	8007156 <_dtoa_r+0x926>
 8007032:	f1c0 0320 	rsb	r3, r0, #32
 8007036:	2b04      	cmp	r3, #4
 8007038:	f340 808a 	ble.w	8007150 <_dtoa_r+0x920>
 800703c:	f1c0 001c 	rsb	r0, r0, #28
 8007040:	9b06      	ldr	r3, [sp, #24]
 8007042:	4407      	add	r7, r0
 8007044:	4403      	add	r3, r0
 8007046:	9306      	str	r3, [sp, #24]
 8007048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800704a:	4403      	add	r3, r0
 800704c:	9309      	str	r3, [sp, #36]	; 0x24
 800704e:	9b06      	ldr	r3, [sp, #24]
 8007050:	2b00      	cmp	r3, #0
 8007052:	dd05      	ble.n	8007060 <_dtoa_r+0x830>
 8007054:	4659      	mov	r1, fp
 8007056:	461a      	mov	r2, r3
 8007058:	4628      	mov	r0, r5
 800705a:	f000 ffcf 	bl	8007ffc <__lshift>
 800705e:	4683      	mov	fp, r0
 8007060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007062:	2b00      	cmp	r3, #0
 8007064:	dd05      	ble.n	8007072 <_dtoa_r+0x842>
 8007066:	4621      	mov	r1, r4
 8007068:	461a      	mov	r2, r3
 800706a:	4628      	mov	r0, r5
 800706c:	f000 ffc6 	bl	8007ffc <__lshift>
 8007070:	4604      	mov	r4, r0
 8007072:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d070      	beq.n	800715a <_dtoa_r+0x92a>
 8007078:	4621      	mov	r1, r4
 800707a:	4658      	mov	r0, fp
 800707c:	f001 f82e 	bl	80080dc <__mcmp>
 8007080:	2800      	cmp	r0, #0
 8007082:	da6a      	bge.n	800715a <_dtoa_r+0x92a>
 8007084:	2300      	movs	r3, #0
 8007086:	4659      	mov	r1, fp
 8007088:	220a      	movs	r2, #10
 800708a:	4628      	mov	r0, r5
 800708c:	f000 fdc0 	bl	8007c10 <__multadd>
 8007090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007092:	4683      	mov	fp, r0
 8007094:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 8194 	beq.w	80073c6 <_dtoa_r+0xb96>
 800709e:	4631      	mov	r1, r6
 80070a0:	2300      	movs	r3, #0
 80070a2:	220a      	movs	r2, #10
 80070a4:	4628      	mov	r0, r5
 80070a6:	f000 fdb3 	bl	8007c10 <__multadd>
 80070aa:	f1b9 0f00 	cmp.w	r9, #0
 80070ae:	4606      	mov	r6, r0
 80070b0:	f300 8093 	bgt.w	80071da <_dtoa_r+0x9aa>
 80070b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	dc57      	bgt.n	800716a <_dtoa_r+0x93a>
 80070ba:	e08e      	b.n	80071da <_dtoa_r+0x9aa>
 80070bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80070be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80070c2:	e757      	b.n	8006f74 <_dtoa_r+0x744>
 80070c4:	9b08      	ldr	r3, [sp, #32]
 80070c6:	1e5c      	subs	r4, r3, #1
 80070c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ca:	42a3      	cmp	r3, r4
 80070cc:	bfb7      	itett	lt
 80070ce:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80070d0:	1b1c      	subge	r4, r3, r4
 80070d2:	1ae2      	sublt	r2, r4, r3
 80070d4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80070d6:	bfbe      	ittt	lt
 80070d8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80070da:	189b      	addlt	r3, r3, r2
 80070dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80070de:	9b08      	ldr	r3, [sp, #32]
 80070e0:	bfb8      	it	lt
 80070e2:	2400      	movlt	r4, #0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	bfbb      	ittet	lt
 80070e8:	9b06      	ldrlt	r3, [sp, #24]
 80070ea:	9a08      	ldrlt	r2, [sp, #32]
 80070ec:	9f06      	ldrge	r7, [sp, #24]
 80070ee:	1a9f      	sublt	r7, r3, r2
 80070f0:	bfac      	ite	ge
 80070f2:	9b08      	ldrge	r3, [sp, #32]
 80070f4:	2300      	movlt	r3, #0
 80070f6:	e73f      	b.n	8006f78 <_dtoa_r+0x748>
 80070f8:	3fe00000 	.word	0x3fe00000
 80070fc:	40240000 	.word	0x40240000
 8007100:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007102:	9f06      	ldr	r7, [sp, #24]
 8007104:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007106:	e742      	b.n	8006f8e <_dtoa_r+0x75e>
 8007108:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800710a:	e76b      	b.n	8006fe4 <_dtoa_r+0x7b4>
 800710c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800710e:	2b01      	cmp	r3, #1
 8007110:	dc19      	bgt.n	8007146 <_dtoa_r+0x916>
 8007112:	9b04      	ldr	r3, [sp, #16]
 8007114:	b9bb      	cbnz	r3, 8007146 <_dtoa_r+0x916>
 8007116:	9b05      	ldr	r3, [sp, #20]
 8007118:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800711c:	b99b      	cbnz	r3, 8007146 <_dtoa_r+0x916>
 800711e:	9b05      	ldr	r3, [sp, #20]
 8007120:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007124:	0d1b      	lsrs	r3, r3, #20
 8007126:	051b      	lsls	r3, r3, #20
 8007128:	b183      	cbz	r3, 800714c <_dtoa_r+0x91c>
 800712a:	f04f 0801 	mov.w	r8, #1
 800712e:	9b06      	ldr	r3, [sp, #24]
 8007130:	3301      	adds	r3, #1
 8007132:	9306      	str	r3, [sp, #24]
 8007134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007136:	3301      	adds	r3, #1
 8007138:	9309      	str	r3, [sp, #36]	; 0x24
 800713a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800713c:	2b00      	cmp	r3, #0
 800713e:	f47f af6a 	bne.w	8007016 <_dtoa_r+0x7e6>
 8007142:	2001      	movs	r0, #1
 8007144:	e76f      	b.n	8007026 <_dtoa_r+0x7f6>
 8007146:	f04f 0800 	mov.w	r8, #0
 800714a:	e7f6      	b.n	800713a <_dtoa_r+0x90a>
 800714c:	4698      	mov	r8, r3
 800714e:	e7f4      	b.n	800713a <_dtoa_r+0x90a>
 8007150:	f43f af7d 	beq.w	800704e <_dtoa_r+0x81e>
 8007154:	4618      	mov	r0, r3
 8007156:	301c      	adds	r0, #28
 8007158:	e772      	b.n	8007040 <_dtoa_r+0x810>
 800715a:	9b08      	ldr	r3, [sp, #32]
 800715c:	2b00      	cmp	r3, #0
 800715e:	dc36      	bgt.n	80071ce <_dtoa_r+0x99e>
 8007160:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007162:	2b02      	cmp	r3, #2
 8007164:	dd33      	ble.n	80071ce <_dtoa_r+0x99e>
 8007166:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800716a:	f1b9 0f00 	cmp.w	r9, #0
 800716e:	d10d      	bne.n	800718c <_dtoa_r+0x95c>
 8007170:	4621      	mov	r1, r4
 8007172:	464b      	mov	r3, r9
 8007174:	2205      	movs	r2, #5
 8007176:	4628      	mov	r0, r5
 8007178:	f000 fd4a 	bl	8007c10 <__multadd>
 800717c:	4601      	mov	r1, r0
 800717e:	4604      	mov	r4, r0
 8007180:	4658      	mov	r0, fp
 8007182:	f000 ffab 	bl	80080dc <__mcmp>
 8007186:	2800      	cmp	r0, #0
 8007188:	f73f adb8 	bgt.w	8006cfc <_dtoa_r+0x4cc>
 800718c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800718e:	9f03      	ldr	r7, [sp, #12]
 8007190:	ea6f 0a03 	mvn.w	sl, r3
 8007194:	f04f 0800 	mov.w	r8, #0
 8007198:	4621      	mov	r1, r4
 800719a:	4628      	mov	r0, r5
 800719c:	f000 fd16 	bl	8007bcc <_Bfree>
 80071a0:	2e00      	cmp	r6, #0
 80071a2:	f43f aea7 	beq.w	8006ef4 <_dtoa_r+0x6c4>
 80071a6:	f1b8 0f00 	cmp.w	r8, #0
 80071aa:	d005      	beq.n	80071b8 <_dtoa_r+0x988>
 80071ac:	45b0      	cmp	r8, r6
 80071ae:	d003      	beq.n	80071b8 <_dtoa_r+0x988>
 80071b0:	4641      	mov	r1, r8
 80071b2:	4628      	mov	r0, r5
 80071b4:	f000 fd0a 	bl	8007bcc <_Bfree>
 80071b8:	4631      	mov	r1, r6
 80071ba:	4628      	mov	r0, r5
 80071bc:	f000 fd06 	bl	8007bcc <_Bfree>
 80071c0:	e698      	b.n	8006ef4 <_dtoa_r+0x6c4>
 80071c2:	2400      	movs	r4, #0
 80071c4:	4626      	mov	r6, r4
 80071c6:	e7e1      	b.n	800718c <_dtoa_r+0x95c>
 80071c8:	46c2      	mov	sl, r8
 80071ca:	4626      	mov	r6, r4
 80071cc:	e596      	b.n	8006cfc <_dtoa_r+0x4cc>
 80071ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 80fd 	beq.w	80073d4 <_dtoa_r+0xba4>
 80071da:	2f00      	cmp	r7, #0
 80071dc:	dd05      	ble.n	80071ea <_dtoa_r+0x9ba>
 80071de:	4631      	mov	r1, r6
 80071e0:	463a      	mov	r2, r7
 80071e2:	4628      	mov	r0, r5
 80071e4:	f000 ff0a 	bl	8007ffc <__lshift>
 80071e8:	4606      	mov	r6, r0
 80071ea:	f1b8 0f00 	cmp.w	r8, #0
 80071ee:	d05c      	beq.n	80072aa <_dtoa_r+0xa7a>
 80071f0:	4628      	mov	r0, r5
 80071f2:	6871      	ldr	r1, [r6, #4]
 80071f4:	f000 fcaa 	bl	8007b4c <_Balloc>
 80071f8:	4607      	mov	r7, r0
 80071fa:	b928      	cbnz	r0, 8007208 <_dtoa_r+0x9d8>
 80071fc:	4602      	mov	r2, r0
 80071fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007202:	4b7f      	ldr	r3, [pc, #508]	; (8007400 <_dtoa_r+0xbd0>)
 8007204:	f7ff bb28 	b.w	8006858 <_dtoa_r+0x28>
 8007208:	6932      	ldr	r2, [r6, #16]
 800720a:	f106 010c 	add.w	r1, r6, #12
 800720e:	3202      	adds	r2, #2
 8007210:	0092      	lsls	r2, r2, #2
 8007212:	300c      	adds	r0, #12
 8007214:	f000 fc8c 	bl	8007b30 <memcpy>
 8007218:	2201      	movs	r2, #1
 800721a:	4639      	mov	r1, r7
 800721c:	4628      	mov	r0, r5
 800721e:	f000 feed 	bl	8007ffc <__lshift>
 8007222:	46b0      	mov	r8, r6
 8007224:	4606      	mov	r6, r0
 8007226:	9b03      	ldr	r3, [sp, #12]
 8007228:	3301      	adds	r3, #1
 800722a:	9308      	str	r3, [sp, #32]
 800722c:	9b03      	ldr	r3, [sp, #12]
 800722e:	444b      	add	r3, r9
 8007230:	930a      	str	r3, [sp, #40]	; 0x28
 8007232:	9b04      	ldr	r3, [sp, #16]
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	9309      	str	r3, [sp, #36]	; 0x24
 800723a:	9b08      	ldr	r3, [sp, #32]
 800723c:	4621      	mov	r1, r4
 800723e:	3b01      	subs	r3, #1
 8007240:	4658      	mov	r0, fp
 8007242:	9304      	str	r3, [sp, #16]
 8007244:	f7ff fa68 	bl	8006718 <quorem>
 8007248:	4603      	mov	r3, r0
 800724a:	4641      	mov	r1, r8
 800724c:	3330      	adds	r3, #48	; 0x30
 800724e:	9006      	str	r0, [sp, #24]
 8007250:	4658      	mov	r0, fp
 8007252:	930b      	str	r3, [sp, #44]	; 0x2c
 8007254:	f000 ff42 	bl	80080dc <__mcmp>
 8007258:	4632      	mov	r2, r6
 800725a:	4681      	mov	r9, r0
 800725c:	4621      	mov	r1, r4
 800725e:	4628      	mov	r0, r5
 8007260:	f000 ff58 	bl	8008114 <__mdiff>
 8007264:	68c2      	ldr	r2, [r0, #12]
 8007266:	4607      	mov	r7, r0
 8007268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800726a:	bb02      	cbnz	r2, 80072ae <_dtoa_r+0xa7e>
 800726c:	4601      	mov	r1, r0
 800726e:	4658      	mov	r0, fp
 8007270:	f000 ff34 	bl	80080dc <__mcmp>
 8007274:	4602      	mov	r2, r0
 8007276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007278:	4639      	mov	r1, r7
 800727a:	4628      	mov	r0, r5
 800727c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007280:	f000 fca4 	bl	8007bcc <_Bfree>
 8007284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007286:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007288:	9f08      	ldr	r7, [sp, #32]
 800728a:	ea43 0102 	orr.w	r1, r3, r2
 800728e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007290:	430b      	orrs	r3, r1
 8007292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007294:	d10d      	bne.n	80072b2 <_dtoa_r+0xa82>
 8007296:	2b39      	cmp	r3, #57	; 0x39
 8007298:	d029      	beq.n	80072ee <_dtoa_r+0xabe>
 800729a:	f1b9 0f00 	cmp.w	r9, #0
 800729e:	dd01      	ble.n	80072a4 <_dtoa_r+0xa74>
 80072a0:	9b06      	ldr	r3, [sp, #24]
 80072a2:	3331      	adds	r3, #49	; 0x31
 80072a4:	9a04      	ldr	r2, [sp, #16]
 80072a6:	7013      	strb	r3, [r2, #0]
 80072a8:	e776      	b.n	8007198 <_dtoa_r+0x968>
 80072aa:	4630      	mov	r0, r6
 80072ac:	e7b9      	b.n	8007222 <_dtoa_r+0x9f2>
 80072ae:	2201      	movs	r2, #1
 80072b0:	e7e2      	b.n	8007278 <_dtoa_r+0xa48>
 80072b2:	f1b9 0f00 	cmp.w	r9, #0
 80072b6:	db06      	blt.n	80072c6 <_dtoa_r+0xa96>
 80072b8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80072ba:	ea41 0909 	orr.w	r9, r1, r9
 80072be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072c0:	ea59 0101 	orrs.w	r1, r9, r1
 80072c4:	d120      	bne.n	8007308 <_dtoa_r+0xad8>
 80072c6:	2a00      	cmp	r2, #0
 80072c8:	ddec      	ble.n	80072a4 <_dtoa_r+0xa74>
 80072ca:	4659      	mov	r1, fp
 80072cc:	2201      	movs	r2, #1
 80072ce:	4628      	mov	r0, r5
 80072d0:	9308      	str	r3, [sp, #32]
 80072d2:	f000 fe93 	bl	8007ffc <__lshift>
 80072d6:	4621      	mov	r1, r4
 80072d8:	4683      	mov	fp, r0
 80072da:	f000 feff 	bl	80080dc <__mcmp>
 80072de:	2800      	cmp	r0, #0
 80072e0:	9b08      	ldr	r3, [sp, #32]
 80072e2:	dc02      	bgt.n	80072ea <_dtoa_r+0xaba>
 80072e4:	d1de      	bne.n	80072a4 <_dtoa_r+0xa74>
 80072e6:	07da      	lsls	r2, r3, #31
 80072e8:	d5dc      	bpl.n	80072a4 <_dtoa_r+0xa74>
 80072ea:	2b39      	cmp	r3, #57	; 0x39
 80072ec:	d1d8      	bne.n	80072a0 <_dtoa_r+0xa70>
 80072ee:	2339      	movs	r3, #57	; 0x39
 80072f0:	9a04      	ldr	r2, [sp, #16]
 80072f2:	7013      	strb	r3, [r2, #0]
 80072f4:	463b      	mov	r3, r7
 80072f6:	461f      	mov	r7, r3
 80072f8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	2a39      	cmp	r2, #57	; 0x39
 8007300:	d050      	beq.n	80073a4 <_dtoa_r+0xb74>
 8007302:	3201      	adds	r2, #1
 8007304:	701a      	strb	r2, [r3, #0]
 8007306:	e747      	b.n	8007198 <_dtoa_r+0x968>
 8007308:	2a00      	cmp	r2, #0
 800730a:	dd03      	ble.n	8007314 <_dtoa_r+0xae4>
 800730c:	2b39      	cmp	r3, #57	; 0x39
 800730e:	d0ee      	beq.n	80072ee <_dtoa_r+0xabe>
 8007310:	3301      	adds	r3, #1
 8007312:	e7c7      	b.n	80072a4 <_dtoa_r+0xa74>
 8007314:	9a08      	ldr	r2, [sp, #32]
 8007316:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007318:	f802 3c01 	strb.w	r3, [r2, #-1]
 800731c:	428a      	cmp	r2, r1
 800731e:	d02a      	beq.n	8007376 <_dtoa_r+0xb46>
 8007320:	4659      	mov	r1, fp
 8007322:	2300      	movs	r3, #0
 8007324:	220a      	movs	r2, #10
 8007326:	4628      	mov	r0, r5
 8007328:	f000 fc72 	bl	8007c10 <__multadd>
 800732c:	45b0      	cmp	r8, r6
 800732e:	4683      	mov	fp, r0
 8007330:	f04f 0300 	mov.w	r3, #0
 8007334:	f04f 020a 	mov.w	r2, #10
 8007338:	4641      	mov	r1, r8
 800733a:	4628      	mov	r0, r5
 800733c:	d107      	bne.n	800734e <_dtoa_r+0xb1e>
 800733e:	f000 fc67 	bl	8007c10 <__multadd>
 8007342:	4680      	mov	r8, r0
 8007344:	4606      	mov	r6, r0
 8007346:	9b08      	ldr	r3, [sp, #32]
 8007348:	3301      	adds	r3, #1
 800734a:	9308      	str	r3, [sp, #32]
 800734c:	e775      	b.n	800723a <_dtoa_r+0xa0a>
 800734e:	f000 fc5f 	bl	8007c10 <__multadd>
 8007352:	4631      	mov	r1, r6
 8007354:	4680      	mov	r8, r0
 8007356:	2300      	movs	r3, #0
 8007358:	220a      	movs	r2, #10
 800735a:	4628      	mov	r0, r5
 800735c:	f000 fc58 	bl	8007c10 <__multadd>
 8007360:	4606      	mov	r6, r0
 8007362:	e7f0      	b.n	8007346 <_dtoa_r+0xb16>
 8007364:	f1b9 0f00 	cmp.w	r9, #0
 8007368:	bfcc      	ite	gt
 800736a:	464f      	movgt	r7, r9
 800736c:	2701      	movle	r7, #1
 800736e:	f04f 0800 	mov.w	r8, #0
 8007372:	9a03      	ldr	r2, [sp, #12]
 8007374:	4417      	add	r7, r2
 8007376:	4659      	mov	r1, fp
 8007378:	2201      	movs	r2, #1
 800737a:	4628      	mov	r0, r5
 800737c:	9308      	str	r3, [sp, #32]
 800737e:	f000 fe3d 	bl	8007ffc <__lshift>
 8007382:	4621      	mov	r1, r4
 8007384:	4683      	mov	fp, r0
 8007386:	f000 fea9 	bl	80080dc <__mcmp>
 800738a:	2800      	cmp	r0, #0
 800738c:	dcb2      	bgt.n	80072f4 <_dtoa_r+0xac4>
 800738e:	d102      	bne.n	8007396 <_dtoa_r+0xb66>
 8007390:	9b08      	ldr	r3, [sp, #32]
 8007392:	07db      	lsls	r3, r3, #31
 8007394:	d4ae      	bmi.n	80072f4 <_dtoa_r+0xac4>
 8007396:	463b      	mov	r3, r7
 8007398:	461f      	mov	r7, r3
 800739a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800739e:	2a30      	cmp	r2, #48	; 0x30
 80073a0:	d0fa      	beq.n	8007398 <_dtoa_r+0xb68>
 80073a2:	e6f9      	b.n	8007198 <_dtoa_r+0x968>
 80073a4:	9a03      	ldr	r2, [sp, #12]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d1a5      	bne.n	80072f6 <_dtoa_r+0xac6>
 80073aa:	2331      	movs	r3, #49	; 0x31
 80073ac:	f10a 0a01 	add.w	sl, sl, #1
 80073b0:	e779      	b.n	80072a6 <_dtoa_r+0xa76>
 80073b2:	4b14      	ldr	r3, [pc, #80]	; (8007404 <_dtoa_r+0xbd4>)
 80073b4:	f7ff baa8 	b.w	8006908 <_dtoa_r+0xd8>
 80073b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f47f aa81 	bne.w	80068c2 <_dtoa_r+0x92>
 80073c0:	4b11      	ldr	r3, [pc, #68]	; (8007408 <_dtoa_r+0xbd8>)
 80073c2:	f7ff baa1 	b.w	8006908 <_dtoa_r+0xd8>
 80073c6:	f1b9 0f00 	cmp.w	r9, #0
 80073ca:	dc03      	bgt.n	80073d4 <_dtoa_r+0xba4>
 80073cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	f73f aecb 	bgt.w	800716a <_dtoa_r+0x93a>
 80073d4:	9f03      	ldr	r7, [sp, #12]
 80073d6:	4621      	mov	r1, r4
 80073d8:	4658      	mov	r0, fp
 80073da:	f7ff f99d 	bl	8006718 <quorem>
 80073de:	9a03      	ldr	r2, [sp, #12]
 80073e0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80073e4:	f807 3b01 	strb.w	r3, [r7], #1
 80073e8:	1aba      	subs	r2, r7, r2
 80073ea:	4591      	cmp	r9, r2
 80073ec:	ddba      	ble.n	8007364 <_dtoa_r+0xb34>
 80073ee:	4659      	mov	r1, fp
 80073f0:	2300      	movs	r3, #0
 80073f2:	220a      	movs	r2, #10
 80073f4:	4628      	mov	r0, r5
 80073f6:	f000 fc0b 	bl	8007c10 <__multadd>
 80073fa:	4683      	mov	fp, r0
 80073fc:	e7eb      	b.n	80073d6 <_dtoa_r+0xba6>
 80073fe:	bf00      	nop
 8007400:	08009f28 	.word	0x08009f28
 8007404:	08009d2c 	.word	0x08009d2c
 8007408:	08009ea9 	.word	0x08009ea9

0800740c <rshift>:
 800740c:	6903      	ldr	r3, [r0, #16]
 800740e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007412:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007416:	f100 0414 	add.w	r4, r0, #20
 800741a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800741e:	dd46      	ble.n	80074ae <rshift+0xa2>
 8007420:	f011 011f 	ands.w	r1, r1, #31
 8007424:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007428:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800742c:	d10c      	bne.n	8007448 <rshift+0x3c>
 800742e:	4629      	mov	r1, r5
 8007430:	f100 0710 	add.w	r7, r0, #16
 8007434:	42b1      	cmp	r1, r6
 8007436:	d335      	bcc.n	80074a4 <rshift+0x98>
 8007438:	1a9b      	subs	r3, r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	1eea      	subs	r2, r5, #3
 800743e:	4296      	cmp	r6, r2
 8007440:	bf38      	it	cc
 8007442:	2300      	movcc	r3, #0
 8007444:	4423      	add	r3, r4
 8007446:	e015      	b.n	8007474 <rshift+0x68>
 8007448:	46a1      	mov	r9, r4
 800744a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800744e:	f1c1 0820 	rsb	r8, r1, #32
 8007452:	40cf      	lsrs	r7, r1
 8007454:	f105 0e04 	add.w	lr, r5, #4
 8007458:	4576      	cmp	r6, lr
 800745a:	46f4      	mov	ip, lr
 800745c:	d816      	bhi.n	800748c <rshift+0x80>
 800745e:	1a9a      	subs	r2, r3, r2
 8007460:	0092      	lsls	r2, r2, #2
 8007462:	3a04      	subs	r2, #4
 8007464:	3501      	adds	r5, #1
 8007466:	42ae      	cmp	r6, r5
 8007468:	bf38      	it	cc
 800746a:	2200      	movcc	r2, #0
 800746c:	18a3      	adds	r3, r4, r2
 800746e:	50a7      	str	r7, [r4, r2]
 8007470:	b107      	cbz	r7, 8007474 <rshift+0x68>
 8007472:	3304      	adds	r3, #4
 8007474:	42a3      	cmp	r3, r4
 8007476:	eba3 0204 	sub.w	r2, r3, r4
 800747a:	bf08      	it	eq
 800747c:	2300      	moveq	r3, #0
 800747e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007482:	6102      	str	r2, [r0, #16]
 8007484:	bf08      	it	eq
 8007486:	6143      	streq	r3, [r0, #20]
 8007488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800748c:	f8dc c000 	ldr.w	ip, [ip]
 8007490:	fa0c fc08 	lsl.w	ip, ip, r8
 8007494:	ea4c 0707 	orr.w	r7, ip, r7
 8007498:	f849 7b04 	str.w	r7, [r9], #4
 800749c:	f85e 7b04 	ldr.w	r7, [lr], #4
 80074a0:	40cf      	lsrs	r7, r1
 80074a2:	e7d9      	b.n	8007458 <rshift+0x4c>
 80074a4:	f851 cb04 	ldr.w	ip, [r1], #4
 80074a8:	f847 cf04 	str.w	ip, [r7, #4]!
 80074ac:	e7c2      	b.n	8007434 <rshift+0x28>
 80074ae:	4623      	mov	r3, r4
 80074b0:	e7e0      	b.n	8007474 <rshift+0x68>

080074b2 <__hexdig_fun>:
 80074b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80074b6:	2b09      	cmp	r3, #9
 80074b8:	d802      	bhi.n	80074c0 <__hexdig_fun+0xe>
 80074ba:	3820      	subs	r0, #32
 80074bc:	b2c0      	uxtb	r0, r0
 80074be:	4770      	bx	lr
 80074c0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80074c4:	2b05      	cmp	r3, #5
 80074c6:	d801      	bhi.n	80074cc <__hexdig_fun+0x1a>
 80074c8:	3847      	subs	r0, #71	; 0x47
 80074ca:	e7f7      	b.n	80074bc <__hexdig_fun+0xa>
 80074cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80074d0:	2b05      	cmp	r3, #5
 80074d2:	d801      	bhi.n	80074d8 <__hexdig_fun+0x26>
 80074d4:	3827      	subs	r0, #39	; 0x27
 80074d6:	e7f1      	b.n	80074bc <__hexdig_fun+0xa>
 80074d8:	2000      	movs	r0, #0
 80074da:	4770      	bx	lr

080074dc <__gethex>:
 80074dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e0:	b08b      	sub	sp, #44	; 0x2c
 80074e2:	9305      	str	r3, [sp, #20]
 80074e4:	4bb2      	ldr	r3, [pc, #712]	; (80077b0 <__gethex+0x2d4>)
 80074e6:	9002      	str	r0, [sp, #8]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	468b      	mov	fp, r1
 80074ec:	4618      	mov	r0, r3
 80074ee:	4690      	mov	r8, r2
 80074f0:	9303      	str	r3, [sp, #12]
 80074f2:	f7f8 fe2d 	bl	8000150 <strlen>
 80074f6:	4682      	mov	sl, r0
 80074f8:	9b03      	ldr	r3, [sp, #12]
 80074fa:	f8db 2000 	ldr.w	r2, [fp]
 80074fe:	4403      	add	r3, r0
 8007500:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007504:	9306      	str	r3, [sp, #24]
 8007506:	1c93      	adds	r3, r2, #2
 8007508:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800750c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007510:	32fe      	adds	r2, #254	; 0xfe
 8007512:	18d1      	adds	r1, r2, r3
 8007514:	461f      	mov	r7, r3
 8007516:	f813 0b01 	ldrb.w	r0, [r3], #1
 800751a:	9101      	str	r1, [sp, #4]
 800751c:	2830      	cmp	r0, #48	; 0x30
 800751e:	d0f8      	beq.n	8007512 <__gethex+0x36>
 8007520:	f7ff ffc7 	bl	80074b2 <__hexdig_fun>
 8007524:	4604      	mov	r4, r0
 8007526:	2800      	cmp	r0, #0
 8007528:	d13a      	bne.n	80075a0 <__gethex+0xc4>
 800752a:	4652      	mov	r2, sl
 800752c:	4638      	mov	r0, r7
 800752e:	9903      	ldr	r1, [sp, #12]
 8007530:	f001 fa26 	bl	8008980 <strncmp>
 8007534:	4605      	mov	r5, r0
 8007536:	2800      	cmp	r0, #0
 8007538:	d166      	bne.n	8007608 <__gethex+0x12c>
 800753a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800753e:	eb07 060a 	add.w	r6, r7, sl
 8007542:	f7ff ffb6 	bl	80074b2 <__hexdig_fun>
 8007546:	2800      	cmp	r0, #0
 8007548:	d060      	beq.n	800760c <__gethex+0x130>
 800754a:	4633      	mov	r3, r6
 800754c:	7818      	ldrb	r0, [r3, #0]
 800754e:	461f      	mov	r7, r3
 8007550:	2830      	cmp	r0, #48	; 0x30
 8007552:	f103 0301 	add.w	r3, r3, #1
 8007556:	d0f9      	beq.n	800754c <__gethex+0x70>
 8007558:	f7ff ffab 	bl	80074b2 <__hexdig_fun>
 800755c:	2301      	movs	r3, #1
 800755e:	fab0 f480 	clz	r4, r0
 8007562:	4635      	mov	r5, r6
 8007564:	0964      	lsrs	r4, r4, #5
 8007566:	9301      	str	r3, [sp, #4]
 8007568:	463a      	mov	r2, r7
 800756a:	4616      	mov	r6, r2
 800756c:	7830      	ldrb	r0, [r6, #0]
 800756e:	3201      	adds	r2, #1
 8007570:	f7ff ff9f 	bl	80074b2 <__hexdig_fun>
 8007574:	2800      	cmp	r0, #0
 8007576:	d1f8      	bne.n	800756a <__gethex+0x8e>
 8007578:	4652      	mov	r2, sl
 800757a:	4630      	mov	r0, r6
 800757c:	9903      	ldr	r1, [sp, #12]
 800757e:	f001 f9ff 	bl	8008980 <strncmp>
 8007582:	b980      	cbnz	r0, 80075a6 <__gethex+0xca>
 8007584:	b94d      	cbnz	r5, 800759a <__gethex+0xbe>
 8007586:	eb06 050a 	add.w	r5, r6, sl
 800758a:	462a      	mov	r2, r5
 800758c:	4616      	mov	r6, r2
 800758e:	7830      	ldrb	r0, [r6, #0]
 8007590:	3201      	adds	r2, #1
 8007592:	f7ff ff8e 	bl	80074b2 <__hexdig_fun>
 8007596:	2800      	cmp	r0, #0
 8007598:	d1f8      	bne.n	800758c <__gethex+0xb0>
 800759a:	1bad      	subs	r5, r5, r6
 800759c:	00ad      	lsls	r5, r5, #2
 800759e:	e004      	b.n	80075aa <__gethex+0xce>
 80075a0:	2400      	movs	r4, #0
 80075a2:	4625      	mov	r5, r4
 80075a4:	e7e0      	b.n	8007568 <__gethex+0x8c>
 80075a6:	2d00      	cmp	r5, #0
 80075a8:	d1f7      	bne.n	800759a <__gethex+0xbe>
 80075aa:	7833      	ldrb	r3, [r6, #0]
 80075ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80075b0:	2b50      	cmp	r3, #80	; 0x50
 80075b2:	d139      	bne.n	8007628 <__gethex+0x14c>
 80075b4:	7873      	ldrb	r3, [r6, #1]
 80075b6:	2b2b      	cmp	r3, #43	; 0x2b
 80075b8:	d02a      	beq.n	8007610 <__gethex+0x134>
 80075ba:	2b2d      	cmp	r3, #45	; 0x2d
 80075bc:	d02c      	beq.n	8007618 <__gethex+0x13c>
 80075be:	f04f 0900 	mov.w	r9, #0
 80075c2:	1c71      	adds	r1, r6, #1
 80075c4:	7808      	ldrb	r0, [r1, #0]
 80075c6:	f7ff ff74 	bl	80074b2 <__hexdig_fun>
 80075ca:	1e43      	subs	r3, r0, #1
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b18      	cmp	r3, #24
 80075d0:	d82a      	bhi.n	8007628 <__gethex+0x14c>
 80075d2:	f1a0 0210 	sub.w	r2, r0, #16
 80075d6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80075da:	f7ff ff6a 	bl	80074b2 <__hexdig_fun>
 80075de:	1e43      	subs	r3, r0, #1
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b18      	cmp	r3, #24
 80075e4:	d91b      	bls.n	800761e <__gethex+0x142>
 80075e6:	f1b9 0f00 	cmp.w	r9, #0
 80075ea:	d000      	beq.n	80075ee <__gethex+0x112>
 80075ec:	4252      	negs	r2, r2
 80075ee:	4415      	add	r5, r2
 80075f0:	f8cb 1000 	str.w	r1, [fp]
 80075f4:	b1d4      	cbz	r4, 800762c <__gethex+0x150>
 80075f6:	9b01      	ldr	r3, [sp, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	bf14      	ite	ne
 80075fc:	2700      	movne	r7, #0
 80075fe:	2706      	moveq	r7, #6
 8007600:	4638      	mov	r0, r7
 8007602:	b00b      	add	sp, #44	; 0x2c
 8007604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007608:	463e      	mov	r6, r7
 800760a:	4625      	mov	r5, r4
 800760c:	2401      	movs	r4, #1
 800760e:	e7cc      	b.n	80075aa <__gethex+0xce>
 8007610:	f04f 0900 	mov.w	r9, #0
 8007614:	1cb1      	adds	r1, r6, #2
 8007616:	e7d5      	b.n	80075c4 <__gethex+0xe8>
 8007618:	f04f 0901 	mov.w	r9, #1
 800761c:	e7fa      	b.n	8007614 <__gethex+0x138>
 800761e:	230a      	movs	r3, #10
 8007620:	fb03 0202 	mla	r2, r3, r2, r0
 8007624:	3a10      	subs	r2, #16
 8007626:	e7d6      	b.n	80075d6 <__gethex+0xfa>
 8007628:	4631      	mov	r1, r6
 800762a:	e7e1      	b.n	80075f0 <__gethex+0x114>
 800762c:	4621      	mov	r1, r4
 800762e:	1bf3      	subs	r3, r6, r7
 8007630:	3b01      	subs	r3, #1
 8007632:	2b07      	cmp	r3, #7
 8007634:	dc0a      	bgt.n	800764c <__gethex+0x170>
 8007636:	9802      	ldr	r0, [sp, #8]
 8007638:	f000 fa88 	bl	8007b4c <_Balloc>
 800763c:	4604      	mov	r4, r0
 800763e:	b940      	cbnz	r0, 8007652 <__gethex+0x176>
 8007640:	4602      	mov	r2, r0
 8007642:	21de      	movs	r1, #222	; 0xde
 8007644:	4b5b      	ldr	r3, [pc, #364]	; (80077b4 <__gethex+0x2d8>)
 8007646:	485c      	ldr	r0, [pc, #368]	; (80077b8 <__gethex+0x2dc>)
 8007648:	f001 f9bc 	bl	80089c4 <__assert_func>
 800764c:	3101      	adds	r1, #1
 800764e:	105b      	asrs	r3, r3, #1
 8007650:	e7ef      	b.n	8007632 <__gethex+0x156>
 8007652:	f04f 0b00 	mov.w	fp, #0
 8007656:	f100 0914 	add.w	r9, r0, #20
 800765a:	f1ca 0301 	rsb	r3, sl, #1
 800765e:	f8cd 9010 	str.w	r9, [sp, #16]
 8007662:	f8cd b004 	str.w	fp, [sp, #4]
 8007666:	9308      	str	r3, [sp, #32]
 8007668:	42b7      	cmp	r7, r6
 800766a:	d33f      	bcc.n	80076ec <__gethex+0x210>
 800766c:	9f04      	ldr	r7, [sp, #16]
 800766e:	9b01      	ldr	r3, [sp, #4]
 8007670:	f847 3b04 	str.w	r3, [r7], #4
 8007674:	eba7 0709 	sub.w	r7, r7, r9
 8007678:	10bf      	asrs	r7, r7, #2
 800767a:	6127      	str	r7, [r4, #16]
 800767c:	4618      	mov	r0, r3
 800767e:	f000 fb57 	bl	8007d30 <__hi0bits>
 8007682:	017f      	lsls	r7, r7, #5
 8007684:	f8d8 6000 	ldr.w	r6, [r8]
 8007688:	1a3f      	subs	r7, r7, r0
 800768a:	42b7      	cmp	r7, r6
 800768c:	dd62      	ble.n	8007754 <__gethex+0x278>
 800768e:	1bbf      	subs	r7, r7, r6
 8007690:	4639      	mov	r1, r7
 8007692:	4620      	mov	r0, r4
 8007694:	f000 fef1 	bl	800847a <__any_on>
 8007698:	4682      	mov	sl, r0
 800769a:	b1a8      	cbz	r0, 80076c8 <__gethex+0x1ec>
 800769c:	f04f 0a01 	mov.w	sl, #1
 80076a0:	1e7b      	subs	r3, r7, #1
 80076a2:	1159      	asrs	r1, r3, #5
 80076a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80076a8:	f003 021f 	and.w	r2, r3, #31
 80076ac:	fa0a f202 	lsl.w	r2, sl, r2
 80076b0:	420a      	tst	r2, r1
 80076b2:	d009      	beq.n	80076c8 <__gethex+0x1ec>
 80076b4:	4553      	cmp	r3, sl
 80076b6:	dd05      	ble.n	80076c4 <__gethex+0x1e8>
 80076b8:	4620      	mov	r0, r4
 80076ba:	1eb9      	subs	r1, r7, #2
 80076bc:	f000 fedd 	bl	800847a <__any_on>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d144      	bne.n	800774e <__gethex+0x272>
 80076c4:	f04f 0a02 	mov.w	sl, #2
 80076c8:	4639      	mov	r1, r7
 80076ca:	4620      	mov	r0, r4
 80076cc:	f7ff fe9e 	bl	800740c <rshift>
 80076d0:	443d      	add	r5, r7
 80076d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076d6:	42ab      	cmp	r3, r5
 80076d8:	da4a      	bge.n	8007770 <__gethex+0x294>
 80076da:	4621      	mov	r1, r4
 80076dc:	9802      	ldr	r0, [sp, #8]
 80076de:	f000 fa75 	bl	8007bcc <_Bfree>
 80076e2:	2300      	movs	r3, #0
 80076e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80076e6:	27a3      	movs	r7, #163	; 0xa3
 80076e8:	6013      	str	r3, [r2, #0]
 80076ea:	e789      	b.n	8007600 <__gethex+0x124>
 80076ec:	1e73      	subs	r3, r6, #1
 80076ee:	9a06      	ldr	r2, [sp, #24]
 80076f0:	9307      	str	r3, [sp, #28]
 80076f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d019      	beq.n	800772e <__gethex+0x252>
 80076fa:	f1bb 0f20 	cmp.w	fp, #32
 80076fe:	d107      	bne.n	8007710 <__gethex+0x234>
 8007700:	9b04      	ldr	r3, [sp, #16]
 8007702:	9a01      	ldr	r2, [sp, #4]
 8007704:	f843 2b04 	str.w	r2, [r3], #4
 8007708:	9304      	str	r3, [sp, #16]
 800770a:	2300      	movs	r3, #0
 800770c:	469b      	mov	fp, r3
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007714:	f7ff fecd 	bl	80074b2 <__hexdig_fun>
 8007718:	9b01      	ldr	r3, [sp, #4]
 800771a:	f000 000f 	and.w	r0, r0, #15
 800771e:	fa00 f00b 	lsl.w	r0, r0, fp
 8007722:	4303      	orrs	r3, r0
 8007724:	9301      	str	r3, [sp, #4]
 8007726:	f10b 0b04 	add.w	fp, fp, #4
 800772a:	9b07      	ldr	r3, [sp, #28]
 800772c:	e00d      	b.n	800774a <__gethex+0x26e>
 800772e:	9a08      	ldr	r2, [sp, #32]
 8007730:	1e73      	subs	r3, r6, #1
 8007732:	4413      	add	r3, r2
 8007734:	42bb      	cmp	r3, r7
 8007736:	d3e0      	bcc.n	80076fa <__gethex+0x21e>
 8007738:	4618      	mov	r0, r3
 800773a:	4652      	mov	r2, sl
 800773c:	9903      	ldr	r1, [sp, #12]
 800773e:	9309      	str	r3, [sp, #36]	; 0x24
 8007740:	f001 f91e 	bl	8008980 <strncmp>
 8007744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007746:	2800      	cmp	r0, #0
 8007748:	d1d7      	bne.n	80076fa <__gethex+0x21e>
 800774a:	461e      	mov	r6, r3
 800774c:	e78c      	b.n	8007668 <__gethex+0x18c>
 800774e:	f04f 0a03 	mov.w	sl, #3
 8007752:	e7b9      	b.n	80076c8 <__gethex+0x1ec>
 8007754:	da09      	bge.n	800776a <__gethex+0x28e>
 8007756:	1bf7      	subs	r7, r6, r7
 8007758:	4621      	mov	r1, r4
 800775a:	463a      	mov	r2, r7
 800775c:	9802      	ldr	r0, [sp, #8]
 800775e:	f000 fc4d 	bl	8007ffc <__lshift>
 8007762:	4604      	mov	r4, r0
 8007764:	1bed      	subs	r5, r5, r7
 8007766:	f100 0914 	add.w	r9, r0, #20
 800776a:	f04f 0a00 	mov.w	sl, #0
 800776e:	e7b0      	b.n	80076d2 <__gethex+0x1f6>
 8007770:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007774:	42a8      	cmp	r0, r5
 8007776:	dd72      	ble.n	800785e <__gethex+0x382>
 8007778:	1b45      	subs	r5, r0, r5
 800777a:	42ae      	cmp	r6, r5
 800777c:	dc35      	bgt.n	80077ea <__gethex+0x30e>
 800777e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007782:	2b02      	cmp	r3, #2
 8007784:	d029      	beq.n	80077da <__gethex+0x2fe>
 8007786:	2b03      	cmp	r3, #3
 8007788:	d02b      	beq.n	80077e2 <__gethex+0x306>
 800778a:	2b01      	cmp	r3, #1
 800778c:	d11c      	bne.n	80077c8 <__gethex+0x2ec>
 800778e:	42ae      	cmp	r6, r5
 8007790:	d11a      	bne.n	80077c8 <__gethex+0x2ec>
 8007792:	2e01      	cmp	r6, #1
 8007794:	d112      	bne.n	80077bc <__gethex+0x2e0>
 8007796:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800779a:	9a05      	ldr	r2, [sp, #20]
 800779c:	2762      	movs	r7, #98	; 0x62
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	2301      	movs	r3, #1
 80077a2:	6123      	str	r3, [r4, #16]
 80077a4:	f8c9 3000 	str.w	r3, [r9]
 80077a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077aa:	601c      	str	r4, [r3, #0]
 80077ac:	e728      	b.n	8007600 <__gethex+0x124>
 80077ae:	bf00      	nop
 80077b0:	08009fa0 	.word	0x08009fa0
 80077b4:	08009f28 	.word	0x08009f28
 80077b8:	08009f39 	.word	0x08009f39
 80077bc:	4620      	mov	r0, r4
 80077be:	1e71      	subs	r1, r6, #1
 80077c0:	f000 fe5b 	bl	800847a <__any_on>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d1e6      	bne.n	8007796 <__gethex+0x2ba>
 80077c8:	4621      	mov	r1, r4
 80077ca:	9802      	ldr	r0, [sp, #8]
 80077cc:	f000 f9fe 	bl	8007bcc <_Bfree>
 80077d0:	2300      	movs	r3, #0
 80077d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077d4:	2750      	movs	r7, #80	; 0x50
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	e712      	b.n	8007600 <__gethex+0x124>
 80077da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1f3      	bne.n	80077c8 <__gethex+0x2ec>
 80077e0:	e7d9      	b.n	8007796 <__gethex+0x2ba>
 80077e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1d6      	bne.n	8007796 <__gethex+0x2ba>
 80077e8:	e7ee      	b.n	80077c8 <__gethex+0x2ec>
 80077ea:	1e6f      	subs	r7, r5, #1
 80077ec:	f1ba 0f00 	cmp.w	sl, #0
 80077f0:	d132      	bne.n	8007858 <__gethex+0x37c>
 80077f2:	b127      	cbz	r7, 80077fe <__gethex+0x322>
 80077f4:	4639      	mov	r1, r7
 80077f6:	4620      	mov	r0, r4
 80077f8:	f000 fe3f 	bl	800847a <__any_on>
 80077fc:	4682      	mov	sl, r0
 80077fe:	2101      	movs	r1, #1
 8007800:	117b      	asrs	r3, r7, #5
 8007802:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007806:	f007 071f 	and.w	r7, r7, #31
 800780a:	fa01 f707 	lsl.w	r7, r1, r7
 800780e:	421f      	tst	r7, r3
 8007810:	f04f 0702 	mov.w	r7, #2
 8007814:	4629      	mov	r1, r5
 8007816:	4620      	mov	r0, r4
 8007818:	bf18      	it	ne
 800781a:	f04a 0a02 	orrne.w	sl, sl, #2
 800781e:	1b76      	subs	r6, r6, r5
 8007820:	f7ff fdf4 	bl	800740c <rshift>
 8007824:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007828:	f1ba 0f00 	cmp.w	sl, #0
 800782c:	d048      	beq.n	80078c0 <__gethex+0x3e4>
 800782e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007832:	2b02      	cmp	r3, #2
 8007834:	d015      	beq.n	8007862 <__gethex+0x386>
 8007836:	2b03      	cmp	r3, #3
 8007838:	d017      	beq.n	800786a <__gethex+0x38e>
 800783a:	2b01      	cmp	r3, #1
 800783c:	d109      	bne.n	8007852 <__gethex+0x376>
 800783e:	f01a 0f02 	tst.w	sl, #2
 8007842:	d006      	beq.n	8007852 <__gethex+0x376>
 8007844:	f8d9 0000 	ldr.w	r0, [r9]
 8007848:	ea4a 0a00 	orr.w	sl, sl, r0
 800784c:	f01a 0f01 	tst.w	sl, #1
 8007850:	d10e      	bne.n	8007870 <__gethex+0x394>
 8007852:	f047 0710 	orr.w	r7, r7, #16
 8007856:	e033      	b.n	80078c0 <__gethex+0x3e4>
 8007858:	f04f 0a01 	mov.w	sl, #1
 800785c:	e7cf      	b.n	80077fe <__gethex+0x322>
 800785e:	2701      	movs	r7, #1
 8007860:	e7e2      	b.n	8007828 <__gethex+0x34c>
 8007862:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007864:	f1c3 0301 	rsb	r3, r3, #1
 8007868:	9315      	str	r3, [sp, #84]	; 0x54
 800786a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800786c:	2b00      	cmp	r3, #0
 800786e:	d0f0      	beq.n	8007852 <__gethex+0x376>
 8007870:	f04f 0c00 	mov.w	ip, #0
 8007874:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007878:	f104 0314 	add.w	r3, r4, #20
 800787c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007880:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007884:	4618      	mov	r0, r3
 8007886:	f853 2b04 	ldr.w	r2, [r3], #4
 800788a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800788e:	d01c      	beq.n	80078ca <__gethex+0x3ee>
 8007890:	3201      	adds	r2, #1
 8007892:	6002      	str	r2, [r0, #0]
 8007894:	2f02      	cmp	r7, #2
 8007896:	f104 0314 	add.w	r3, r4, #20
 800789a:	d13d      	bne.n	8007918 <__gethex+0x43c>
 800789c:	f8d8 2000 	ldr.w	r2, [r8]
 80078a0:	3a01      	subs	r2, #1
 80078a2:	42b2      	cmp	r2, r6
 80078a4:	d10a      	bne.n	80078bc <__gethex+0x3e0>
 80078a6:	2201      	movs	r2, #1
 80078a8:	1171      	asrs	r1, r6, #5
 80078aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078ae:	f006 061f 	and.w	r6, r6, #31
 80078b2:	fa02 f606 	lsl.w	r6, r2, r6
 80078b6:	421e      	tst	r6, r3
 80078b8:	bf18      	it	ne
 80078ba:	4617      	movne	r7, r2
 80078bc:	f047 0720 	orr.w	r7, r7, #32
 80078c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078c2:	601c      	str	r4, [r3, #0]
 80078c4:	9b05      	ldr	r3, [sp, #20]
 80078c6:	601d      	str	r5, [r3, #0]
 80078c8:	e69a      	b.n	8007600 <__gethex+0x124>
 80078ca:	4299      	cmp	r1, r3
 80078cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80078d0:	d8d8      	bhi.n	8007884 <__gethex+0x3a8>
 80078d2:	68a3      	ldr	r3, [r4, #8]
 80078d4:	459b      	cmp	fp, r3
 80078d6:	db17      	blt.n	8007908 <__gethex+0x42c>
 80078d8:	6861      	ldr	r1, [r4, #4]
 80078da:	9802      	ldr	r0, [sp, #8]
 80078dc:	3101      	adds	r1, #1
 80078de:	f000 f935 	bl	8007b4c <_Balloc>
 80078e2:	4681      	mov	r9, r0
 80078e4:	b918      	cbnz	r0, 80078ee <__gethex+0x412>
 80078e6:	4602      	mov	r2, r0
 80078e8:	2184      	movs	r1, #132	; 0x84
 80078ea:	4b19      	ldr	r3, [pc, #100]	; (8007950 <__gethex+0x474>)
 80078ec:	e6ab      	b.n	8007646 <__gethex+0x16a>
 80078ee:	6922      	ldr	r2, [r4, #16]
 80078f0:	f104 010c 	add.w	r1, r4, #12
 80078f4:	3202      	adds	r2, #2
 80078f6:	0092      	lsls	r2, r2, #2
 80078f8:	300c      	adds	r0, #12
 80078fa:	f000 f919 	bl	8007b30 <memcpy>
 80078fe:	4621      	mov	r1, r4
 8007900:	9802      	ldr	r0, [sp, #8]
 8007902:	f000 f963 	bl	8007bcc <_Bfree>
 8007906:	464c      	mov	r4, r9
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	1c5a      	adds	r2, r3, #1
 800790c:	6122      	str	r2, [r4, #16]
 800790e:	2201      	movs	r2, #1
 8007910:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007914:	615a      	str	r2, [r3, #20]
 8007916:	e7bd      	b.n	8007894 <__gethex+0x3b8>
 8007918:	6922      	ldr	r2, [r4, #16]
 800791a:	455a      	cmp	r2, fp
 800791c:	dd0b      	ble.n	8007936 <__gethex+0x45a>
 800791e:	2101      	movs	r1, #1
 8007920:	4620      	mov	r0, r4
 8007922:	f7ff fd73 	bl	800740c <rshift>
 8007926:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800792a:	3501      	adds	r5, #1
 800792c:	42ab      	cmp	r3, r5
 800792e:	f6ff aed4 	blt.w	80076da <__gethex+0x1fe>
 8007932:	2701      	movs	r7, #1
 8007934:	e7c2      	b.n	80078bc <__gethex+0x3e0>
 8007936:	f016 061f 	ands.w	r6, r6, #31
 800793a:	d0fa      	beq.n	8007932 <__gethex+0x456>
 800793c:	4453      	add	r3, sl
 800793e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007942:	f000 f9f5 	bl	8007d30 <__hi0bits>
 8007946:	f1c6 0620 	rsb	r6, r6, #32
 800794a:	42b0      	cmp	r0, r6
 800794c:	dbe7      	blt.n	800791e <__gethex+0x442>
 800794e:	e7f0      	b.n	8007932 <__gethex+0x456>
 8007950:	08009f28 	.word	0x08009f28

08007954 <L_shift>:
 8007954:	f1c2 0208 	rsb	r2, r2, #8
 8007958:	0092      	lsls	r2, r2, #2
 800795a:	b570      	push	{r4, r5, r6, lr}
 800795c:	f1c2 0620 	rsb	r6, r2, #32
 8007960:	6843      	ldr	r3, [r0, #4]
 8007962:	6804      	ldr	r4, [r0, #0]
 8007964:	fa03 f506 	lsl.w	r5, r3, r6
 8007968:	432c      	orrs	r4, r5
 800796a:	40d3      	lsrs	r3, r2
 800796c:	6004      	str	r4, [r0, #0]
 800796e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007972:	4288      	cmp	r0, r1
 8007974:	d3f4      	bcc.n	8007960 <L_shift+0xc>
 8007976:	bd70      	pop	{r4, r5, r6, pc}

08007978 <__match>:
 8007978:	b530      	push	{r4, r5, lr}
 800797a:	6803      	ldr	r3, [r0, #0]
 800797c:	3301      	adds	r3, #1
 800797e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007982:	b914      	cbnz	r4, 800798a <__match+0x12>
 8007984:	6003      	str	r3, [r0, #0]
 8007986:	2001      	movs	r0, #1
 8007988:	bd30      	pop	{r4, r5, pc}
 800798a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800798e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007992:	2d19      	cmp	r5, #25
 8007994:	bf98      	it	ls
 8007996:	3220      	addls	r2, #32
 8007998:	42a2      	cmp	r2, r4
 800799a:	d0f0      	beq.n	800797e <__match+0x6>
 800799c:	2000      	movs	r0, #0
 800799e:	e7f3      	b.n	8007988 <__match+0x10>

080079a0 <__hexnan>:
 80079a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a4:	2500      	movs	r5, #0
 80079a6:	680b      	ldr	r3, [r1, #0]
 80079a8:	4682      	mov	sl, r0
 80079aa:	115e      	asrs	r6, r3, #5
 80079ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80079b0:	f013 031f 	ands.w	r3, r3, #31
 80079b4:	bf18      	it	ne
 80079b6:	3604      	addne	r6, #4
 80079b8:	1f37      	subs	r7, r6, #4
 80079ba:	46b9      	mov	r9, r7
 80079bc:	463c      	mov	r4, r7
 80079be:	46ab      	mov	fp, r5
 80079c0:	b087      	sub	sp, #28
 80079c2:	4690      	mov	r8, r2
 80079c4:	6802      	ldr	r2, [r0, #0]
 80079c6:	9301      	str	r3, [sp, #4]
 80079c8:	f846 5c04 	str.w	r5, [r6, #-4]
 80079cc:	9502      	str	r5, [sp, #8]
 80079ce:	7851      	ldrb	r1, [r2, #1]
 80079d0:	1c53      	adds	r3, r2, #1
 80079d2:	9303      	str	r3, [sp, #12]
 80079d4:	b341      	cbz	r1, 8007a28 <__hexnan+0x88>
 80079d6:	4608      	mov	r0, r1
 80079d8:	9205      	str	r2, [sp, #20]
 80079da:	9104      	str	r1, [sp, #16]
 80079dc:	f7ff fd69 	bl	80074b2 <__hexdig_fun>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d14f      	bne.n	8007a84 <__hexnan+0xe4>
 80079e4:	9904      	ldr	r1, [sp, #16]
 80079e6:	9a05      	ldr	r2, [sp, #20]
 80079e8:	2920      	cmp	r1, #32
 80079ea:	d818      	bhi.n	8007a1e <__hexnan+0x7e>
 80079ec:	9b02      	ldr	r3, [sp, #8]
 80079ee:	459b      	cmp	fp, r3
 80079f0:	dd13      	ble.n	8007a1a <__hexnan+0x7a>
 80079f2:	454c      	cmp	r4, r9
 80079f4:	d206      	bcs.n	8007a04 <__hexnan+0x64>
 80079f6:	2d07      	cmp	r5, #7
 80079f8:	dc04      	bgt.n	8007a04 <__hexnan+0x64>
 80079fa:	462a      	mov	r2, r5
 80079fc:	4649      	mov	r1, r9
 80079fe:	4620      	mov	r0, r4
 8007a00:	f7ff ffa8 	bl	8007954 <L_shift>
 8007a04:	4544      	cmp	r4, r8
 8007a06:	d950      	bls.n	8007aaa <__hexnan+0x10a>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f1a4 0904 	sub.w	r9, r4, #4
 8007a0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a12:	461d      	mov	r5, r3
 8007a14:	464c      	mov	r4, r9
 8007a16:	f8cd b008 	str.w	fp, [sp, #8]
 8007a1a:	9a03      	ldr	r2, [sp, #12]
 8007a1c:	e7d7      	b.n	80079ce <__hexnan+0x2e>
 8007a1e:	2929      	cmp	r1, #41	; 0x29
 8007a20:	d156      	bne.n	8007ad0 <__hexnan+0x130>
 8007a22:	3202      	adds	r2, #2
 8007a24:	f8ca 2000 	str.w	r2, [sl]
 8007a28:	f1bb 0f00 	cmp.w	fp, #0
 8007a2c:	d050      	beq.n	8007ad0 <__hexnan+0x130>
 8007a2e:	454c      	cmp	r4, r9
 8007a30:	d206      	bcs.n	8007a40 <__hexnan+0xa0>
 8007a32:	2d07      	cmp	r5, #7
 8007a34:	dc04      	bgt.n	8007a40 <__hexnan+0xa0>
 8007a36:	462a      	mov	r2, r5
 8007a38:	4649      	mov	r1, r9
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f7ff ff8a 	bl	8007954 <L_shift>
 8007a40:	4544      	cmp	r4, r8
 8007a42:	d934      	bls.n	8007aae <__hexnan+0x10e>
 8007a44:	4623      	mov	r3, r4
 8007a46:	f1a8 0204 	sub.w	r2, r8, #4
 8007a4a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007a4e:	429f      	cmp	r7, r3
 8007a50:	f842 1f04 	str.w	r1, [r2, #4]!
 8007a54:	d2f9      	bcs.n	8007a4a <__hexnan+0xaa>
 8007a56:	1b3b      	subs	r3, r7, r4
 8007a58:	f023 0303 	bic.w	r3, r3, #3
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	3401      	adds	r4, #1
 8007a60:	3e03      	subs	r6, #3
 8007a62:	42b4      	cmp	r4, r6
 8007a64:	bf88      	it	hi
 8007a66:	2304      	movhi	r3, #4
 8007a68:	2200      	movs	r2, #0
 8007a6a:	4443      	add	r3, r8
 8007a6c:	f843 2b04 	str.w	r2, [r3], #4
 8007a70:	429f      	cmp	r7, r3
 8007a72:	d2fb      	bcs.n	8007a6c <__hexnan+0xcc>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	b91b      	cbnz	r3, 8007a80 <__hexnan+0xe0>
 8007a78:	4547      	cmp	r7, r8
 8007a7a:	d127      	bne.n	8007acc <__hexnan+0x12c>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	603b      	str	r3, [r7, #0]
 8007a80:	2005      	movs	r0, #5
 8007a82:	e026      	b.n	8007ad2 <__hexnan+0x132>
 8007a84:	3501      	adds	r5, #1
 8007a86:	2d08      	cmp	r5, #8
 8007a88:	f10b 0b01 	add.w	fp, fp, #1
 8007a8c:	dd06      	ble.n	8007a9c <__hexnan+0xfc>
 8007a8e:	4544      	cmp	r4, r8
 8007a90:	d9c3      	bls.n	8007a1a <__hexnan+0x7a>
 8007a92:	2300      	movs	r3, #0
 8007a94:	2501      	movs	r5, #1
 8007a96:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a9a:	3c04      	subs	r4, #4
 8007a9c:	6822      	ldr	r2, [r4, #0]
 8007a9e:	f000 000f 	and.w	r0, r0, #15
 8007aa2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007aa6:	6022      	str	r2, [r4, #0]
 8007aa8:	e7b7      	b.n	8007a1a <__hexnan+0x7a>
 8007aaa:	2508      	movs	r5, #8
 8007aac:	e7b5      	b.n	8007a1a <__hexnan+0x7a>
 8007aae:	9b01      	ldr	r3, [sp, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d0df      	beq.n	8007a74 <__hexnan+0xd4>
 8007ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ab8:	f1c3 0320 	rsb	r3, r3, #32
 8007abc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ac0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007ac4:	401a      	ands	r2, r3
 8007ac6:	f846 2c04 	str.w	r2, [r6, #-4]
 8007aca:	e7d3      	b.n	8007a74 <__hexnan+0xd4>
 8007acc:	3f04      	subs	r7, #4
 8007ace:	e7d1      	b.n	8007a74 <__hexnan+0xd4>
 8007ad0:	2004      	movs	r0, #4
 8007ad2:	b007      	add	sp, #28
 8007ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ad8 <_localeconv_r>:
 8007ad8:	4800      	ldr	r0, [pc, #0]	; (8007adc <_localeconv_r+0x4>)
 8007ada:	4770      	bx	lr
 8007adc:	2000016c 	.word	0x2000016c

08007ae0 <malloc>:
 8007ae0:	4b02      	ldr	r3, [pc, #8]	; (8007aec <malloc+0xc>)
 8007ae2:	4601      	mov	r1, r0
 8007ae4:	6818      	ldr	r0, [r3, #0]
 8007ae6:	f000 bd65 	b.w	80085b4 <_malloc_r>
 8007aea:	bf00      	nop
 8007aec:	20000014 	.word	0x20000014

08007af0 <__ascii_mbtowc>:
 8007af0:	b082      	sub	sp, #8
 8007af2:	b901      	cbnz	r1, 8007af6 <__ascii_mbtowc+0x6>
 8007af4:	a901      	add	r1, sp, #4
 8007af6:	b142      	cbz	r2, 8007b0a <__ascii_mbtowc+0x1a>
 8007af8:	b14b      	cbz	r3, 8007b0e <__ascii_mbtowc+0x1e>
 8007afa:	7813      	ldrb	r3, [r2, #0]
 8007afc:	600b      	str	r3, [r1, #0]
 8007afe:	7812      	ldrb	r2, [r2, #0]
 8007b00:	1e10      	subs	r0, r2, #0
 8007b02:	bf18      	it	ne
 8007b04:	2001      	movne	r0, #1
 8007b06:	b002      	add	sp, #8
 8007b08:	4770      	bx	lr
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	e7fb      	b.n	8007b06 <__ascii_mbtowc+0x16>
 8007b0e:	f06f 0001 	mvn.w	r0, #1
 8007b12:	e7f8      	b.n	8007b06 <__ascii_mbtowc+0x16>

08007b14 <memchr>:
 8007b14:	4603      	mov	r3, r0
 8007b16:	b510      	push	{r4, lr}
 8007b18:	b2c9      	uxtb	r1, r1
 8007b1a:	4402      	add	r2, r0
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	4618      	mov	r0, r3
 8007b20:	d101      	bne.n	8007b26 <memchr+0x12>
 8007b22:	2000      	movs	r0, #0
 8007b24:	e003      	b.n	8007b2e <memchr+0x1a>
 8007b26:	7804      	ldrb	r4, [r0, #0]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	428c      	cmp	r4, r1
 8007b2c:	d1f6      	bne.n	8007b1c <memchr+0x8>
 8007b2e:	bd10      	pop	{r4, pc}

08007b30 <memcpy>:
 8007b30:	440a      	add	r2, r1
 8007b32:	4291      	cmp	r1, r2
 8007b34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007b38:	d100      	bne.n	8007b3c <memcpy+0xc>
 8007b3a:	4770      	bx	lr
 8007b3c:	b510      	push	{r4, lr}
 8007b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b42:	4291      	cmp	r1, r2
 8007b44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b48:	d1f9      	bne.n	8007b3e <memcpy+0xe>
 8007b4a:	bd10      	pop	{r4, pc}

08007b4c <_Balloc>:
 8007b4c:	b570      	push	{r4, r5, r6, lr}
 8007b4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b50:	4604      	mov	r4, r0
 8007b52:	460d      	mov	r5, r1
 8007b54:	b976      	cbnz	r6, 8007b74 <_Balloc+0x28>
 8007b56:	2010      	movs	r0, #16
 8007b58:	f7ff ffc2 	bl	8007ae0 <malloc>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	6260      	str	r0, [r4, #36]	; 0x24
 8007b60:	b920      	cbnz	r0, 8007b6c <_Balloc+0x20>
 8007b62:	2166      	movs	r1, #102	; 0x66
 8007b64:	4b17      	ldr	r3, [pc, #92]	; (8007bc4 <_Balloc+0x78>)
 8007b66:	4818      	ldr	r0, [pc, #96]	; (8007bc8 <_Balloc+0x7c>)
 8007b68:	f000 ff2c 	bl	80089c4 <__assert_func>
 8007b6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b70:	6006      	str	r6, [r0, #0]
 8007b72:	60c6      	str	r6, [r0, #12]
 8007b74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b76:	68f3      	ldr	r3, [r6, #12]
 8007b78:	b183      	cbz	r3, 8007b9c <_Balloc+0x50>
 8007b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b82:	b9b8      	cbnz	r0, 8007bb4 <_Balloc+0x68>
 8007b84:	2101      	movs	r1, #1
 8007b86:	fa01 f605 	lsl.w	r6, r1, r5
 8007b8a:	1d72      	adds	r2, r6, #5
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	0092      	lsls	r2, r2, #2
 8007b90:	f000 fc94 	bl	80084bc <_calloc_r>
 8007b94:	b160      	cbz	r0, 8007bb0 <_Balloc+0x64>
 8007b96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b9a:	e00e      	b.n	8007bba <_Balloc+0x6e>
 8007b9c:	2221      	movs	r2, #33	; 0x21
 8007b9e:	2104      	movs	r1, #4
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f000 fc8b 	bl	80084bc <_calloc_r>
 8007ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ba8:	60f0      	str	r0, [r6, #12]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e4      	bne.n	8007b7a <_Balloc+0x2e>
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	6802      	ldr	r2, [r0, #0]
 8007bb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007bc0:	e7f7      	b.n	8007bb2 <_Balloc+0x66>
 8007bc2:	bf00      	nop
 8007bc4:	08009eb6 	.word	0x08009eb6
 8007bc8:	08009fb4 	.word	0x08009fb4

08007bcc <_Bfree>:
 8007bcc:	b570      	push	{r4, r5, r6, lr}
 8007bce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	b976      	cbnz	r6, 8007bf4 <_Bfree+0x28>
 8007bd6:	2010      	movs	r0, #16
 8007bd8:	f7ff ff82 	bl	8007ae0 <malloc>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	6268      	str	r0, [r5, #36]	; 0x24
 8007be0:	b920      	cbnz	r0, 8007bec <_Bfree+0x20>
 8007be2:	218a      	movs	r1, #138	; 0x8a
 8007be4:	4b08      	ldr	r3, [pc, #32]	; (8007c08 <_Bfree+0x3c>)
 8007be6:	4809      	ldr	r0, [pc, #36]	; (8007c0c <_Bfree+0x40>)
 8007be8:	f000 feec 	bl	80089c4 <__assert_func>
 8007bec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bf0:	6006      	str	r6, [r0, #0]
 8007bf2:	60c6      	str	r6, [r0, #12]
 8007bf4:	b13c      	cbz	r4, 8007c06 <_Bfree+0x3a>
 8007bf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007bf8:	6862      	ldr	r2, [r4, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c00:	6021      	str	r1, [r4, #0]
 8007c02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c06:	bd70      	pop	{r4, r5, r6, pc}
 8007c08:	08009eb6 	.word	0x08009eb6
 8007c0c:	08009fb4 	.word	0x08009fb4

08007c10 <__multadd>:
 8007c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c14:	4607      	mov	r7, r0
 8007c16:	460c      	mov	r4, r1
 8007c18:	461e      	mov	r6, r3
 8007c1a:	2000      	movs	r0, #0
 8007c1c:	690d      	ldr	r5, [r1, #16]
 8007c1e:	f101 0c14 	add.w	ip, r1, #20
 8007c22:	f8dc 3000 	ldr.w	r3, [ip]
 8007c26:	3001      	adds	r0, #1
 8007c28:	b299      	uxth	r1, r3
 8007c2a:	fb02 6101 	mla	r1, r2, r1, r6
 8007c2e:	0c1e      	lsrs	r6, r3, #16
 8007c30:	0c0b      	lsrs	r3, r1, #16
 8007c32:	fb02 3306 	mla	r3, r2, r6, r3
 8007c36:	b289      	uxth	r1, r1
 8007c38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c3c:	4285      	cmp	r5, r0
 8007c3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c42:	f84c 1b04 	str.w	r1, [ip], #4
 8007c46:	dcec      	bgt.n	8007c22 <__multadd+0x12>
 8007c48:	b30e      	cbz	r6, 8007c8e <__multadd+0x7e>
 8007c4a:	68a3      	ldr	r3, [r4, #8]
 8007c4c:	42ab      	cmp	r3, r5
 8007c4e:	dc19      	bgt.n	8007c84 <__multadd+0x74>
 8007c50:	6861      	ldr	r1, [r4, #4]
 8007c52:	4638      	mov	r0, r7
 8007c54:	3101      	adds	r1, #1
 8007c56:	f7ff ff79 	bl	8007b4c <_Balloc>
 8007c5a:	4680      	mov	r8, r0
 8007c5c:	b928      	cbnz	r0, 8007c6a <__multadd+0x5a>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	21b5      	movs	r1, #181	; 0xb5
 8007c62:	4b0c      	ldr	r3, [pc, #48]	; (8007c94 <__multadd+0x84>)
 8007c64:	480c      	ldr	r0, [pc, #48]	; (8007c98 <__multadd+0x88>)
 8007c66:	f000 fead 	bl	80089c4 <__assert_func>
 8007c6a:	6922      	ldr	r2, [r4, #16]
 8007c6c:	f104 010c 	add.w	r1, r4, #12
 8007c70:	3202      	adds	r2, #2
 8007c72:	0092      	lsls	r2, r2, #2
 8007c74:	300c      	adds	r0, #12
 8007c76:	f7ff ff5b 	bl	8007b30 <memcpy>
 8007c7a:	4621      	mov	r1, r4
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	f7ff ffa5 	bl	8007bcc <_Bfree>
 8007c82:	4644      	mov	r4, r8
 8007c84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c88:	3501      	adds	r5, #1
 8007c8a:	615e      	str	r6, [r3, #20]
 8007c8c:	6125      	str	r5, [r4, #16]
 8007c8e:	4620      	mov	r0, r4
 8007c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c94:	08009f28 	.word	0x08009f28
 8007c98:	08009fb4 	.word	0x08009fb4

08007c9c <__s2b>:
 8007c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ca0:	4615      	mov	r5, r2
 8007ca2:	2209      	movs	r2, #9
 8007ca4:	461f      	mov	r7, r3
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	460c      	mov	r4, r1
 8007caa:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cae:	4606      	mov	r6, r0
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	db09      	blt.n	8007ccc <__s2b+0x30>
 8007cb8:	4630      	mov	r0, r6
 8007cba:	f7ff ff47 	bl	8007b4c <_Balloc>
 8007cbe:	b940      	cbnz	r0, 8007cd2 <__s2b+0x36>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	21ce      	movs	r1, #206	; 0xce
 8007cc4:	4b18      	ldr	r3, [pc, #96]	; (8007d28 <__s2b+0x8c>)
 8007cc6:	4819      	ldr	r0, [pc, #100]	; (8007d2c <__s2b+0x90>)
 8007cc8:	f000 fe7c 	bl	80089c4 <__assert_func>
 8007ccc:	0052      	lsls	r2, r2, #1
 8007cce:	3101      	adds	r1, #1
 8007cd0:	e7f0      	b.n	8007cb4 <__s2b+0x18>
 8007cd2:	9b08      	ldr	r3, [sp, #32]
 8007cd4:	2d09      	cmp	r5, #9
 8007cd6:	6143      	str	r3, [r0, #20]
 8007cd8:	f04f 0301 	mov.w	r3, #1
 8007cdc:	6103      	str	r3, [r0, #16]
 8007cde:	dd16      	ble.n	8007d0e <__s2b+0x72>
 8007ce0:	f104 0909 	add.w	r9, r4, #9
 8007ce4:	46c8      	mov	r8, r9
 8007ce6:	442c      	add	r4, r5
 8007ce8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007cec:	4601      	mov	r1, r0
 8007cee:	220a      	movs	r2, #10
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	3b30      	subs	r3, #48	; 0x30
 8007cf4:	f7ff ff8c 	bl	8007c10 <__multadd>
 8007cf8:	45a0      	cmp	r8, r4
 8007cfa:	d1f5      	bne.n	8007ce8 <__s2b+0x4c>
 8007cfc:	f1a5 0408 	sub.w	r4, r5, #8
 8007d00:	444c      	add	r4, r9
 8007d02:	1b2d      	subs	r5, r5, r4
 8007d04:	1963      	adds	r3, r4, r5
 8007d06:	42bb      	cmp	r3, r7
 8007d08:	db04      	blt.n	8007d14 <__s2b+0x78>
 8007d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d0e:	2509      	movs	r5, #9
 8007d10:	340a      	adds	r4, #10
 8007d12:	e7f6      	b.n	8007d02 <__s2b+0x66>
 8007d14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d18:	4601      	mov	r1, r0
 8007d1a:	220a      	movs	r2, #10
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	3b30      	subs	r3, #48	; 0x30
 8007d20:	f7ff ff76 	bl	8007c10 <__multadd>
 8007d24:	e7ee      	b.n	8007d04 <__s2b+0x68>
 8007d26:	bf00      	nop
 8007d28:	08009f28 	.word	0x08009f28
 8007d2c:	08009fb4 	.word	0x08009fb4

08007d30 <__hi0bits>:
 8007d30:	0c02      	lsrs	r2, r0, #16
 8007d32:	0412      	lsls	r2, r2, #16
 8007d34:	4603      	mov	r3, r0
 8007d36:	b9ca      	cbnz	r2, 8007d6c <__hi0bits+0x3c>
 8007d38:	0403      	lsls	r3, r0, #16
 8007d3a:	2010      	movs	r0, #16
 8007d3c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007d40:	bf04      	itt	eq
 8007d42:	021b      	lsleq	r3, r3, #8
 8007d44:	3008      	addeq	r0, #8
 8007d46:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007d4a:	bf04      	itt	eq
 8007d4c:	011b      	lsleq	r3, r3, #4
 8007d4e:	3004      	addeq	r0, #4
 8007d50:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007d54:	bf04      	itt	eq
 8007d56:	009b      	lsleq	r3, r3, #2
 8007d58:	3002      	addeq	r0, #2
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	db05      	blt.n	8007d6a <__hi0bits+0x3a>
 8007d5e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007d62:	f100 0001 	add.w	r0, r0, #1
 8007d66:	bf08      	it	eq
 8007d68:	2020      	moveq	r0, #32
 8007d6a:	4770      	bx	lr
 8007d6c:	2000      	movs	r0, #0
 8007d6e:	e7e5      	b.n	8007d3c <__hi0bits+0xc>

08007d70 <__lo0bits>:
 8007d70:	6803      	ldr	r3, [r0, #0]
 8007d72:	4602      	mov	r2, r0
 8007d74:	f013 0007 	ands.w	r0, r3, #7
 8007d78:	d00b      	beq.n	8007d92 <__lo0bits+0x22>
 8007d7a:	07d9      	lsls	r1, r3, #31
 8007d7c:	d421      	bmi.n	8007dc2 <__lo0bits+0x52>
 8007d7e:	0798      	lsls	r0, r3, #30
 8007d80:	bf49      	itett	mi
 8007d82:	085b      	lsrmi	r3, r3, #1
 8007d84:	089b      	lsrpl	r3, r3, #2
 8007d86:	2001      	movmi	r0, #1
 8007d88:	6013      	strmi	r3, [r2, #0]
 8007d8a:	bf5c      	itt	pl
 8007d8c:	2002      	movpl	r0, #2
 8007d8e:	6013      	strpl	r3, [r2, #0]
 8007d90:	4770      	bx	lr
 8007d92:	b299      	uxth	r1, r3
 8007d94:	b909      	cbnz	r1, 8007d9a <__lo0bits+0x2a>
 8007d96:	2010      	movs	r0, #16
 8007d98:	0c1b      	lsrs	r3, r3, #16
 8007d9a:	b2d9      	uxtb	r1, r3
 8007d9c:	b909      	cbnz	r1, 8007da2 <__lo0bits+0x32>
 8007d9e:	3008      	adds	r0, #8
 8007da0:	0a1b      	lsrs	r3, r3, #8
 8007da2:	0719      	lsls	r1, r3, #28
 8007da4:	bf04      	itt	eq
 8007da6:	091b      	lsreq	r3, r3, #4
 8007da8:	3004      	addeq	r0, #4
 8007daa:	0799      	lsls	r1, r3, #30
 8007dac:	bf04      	itt	eq
 8007dae:	089b      	lsreq	r3, r3, #2
 8007db0:	3002      	addeq	r0, #2
 8007db2:	07d9      	lsls	r1, r3, #31
 8007db4:	d403      	bmi.n	8007dbe <__lo0bits+0x4e>
 8007db6:	085b      	lsrs	r3, r3, #1
 8007db8:	f100 0001 	add.w	r0, r0, #1
 8007dbc:	d003      	beq.n	8007dc6 <__lo0bits+0x56>
 8007dbe:	6013      	str	r3, [r2, #0]
 8007dc0:	4770      	bx	lr
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	4770      	bx	lr
 8007dc6:	2020      	movs	r0, #32
 8007dc8:	4770      	bx	lr
	...

08007dcc <__i2b>:
 8007dcc:	b510      	push	{r4, lr}
 8007dce:	460c      	mov	r4, r1
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	f7ff febb 	bl	8007b4c <_Balloc>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	b928      	cbnz	r0, 8007de6 <__i2b+0x1a>
 8007dda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007dde:	4b04      	ldr	r3, [pc, #16]	; (8007df0 <__i2b+0x24>)
 8007de0:	4804      	ldr	r0, [pc, #16]	; (8007df4 <__i2b+0x28>)
 8007de2:	f000 fdef 	bl	80089c4 <__assert_func>
 8007de6:	2301      	movs	r3, #1
 8007de8:	6144      	str	r4, [r0, #20]
 8007dea:	6103      	str	r3, [r0, #16]
 8007dec:	bd10      	pop	{r4, pc}
 8007dee:	bf00      	nop
 8007df0:	08009f28 	.word	0x08009f28
 8007df4:	08009fb4 	.word	0x08009fb4

08007df8 <__multiply>:
 8007df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfc:	4691      	mov	r9, r2
 8007dfe:	690a      	ldr	r2, [r1, #16]
 8007e00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e04:	460c      	mov	r4, r1
 8007e06:	429a      	cmp	r2, r3
 8007e08:	bfbe      	ittt	lt
 8007e0a:	460b      	movlt	r3, r1
 8007e0c:	464c      	movlt	r4, r9
 8007e0e:	4699      	movlt	r9, r3
 8007e10:	6927      	ldr	r7, [r4, #16]
 8007e12:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e16:	68a3      	ldr	r3, [r4, #8]
 8007e18:	6861      	ldr	r1, [r4, #4]
 8007e1a:	eb07 060a 	add.w	r6, r7, sl
 8007e1e:	42b3      	cmp	r3, r6
 8007e20:	b085      	sub	sp, #20
 8007e22:	bfb8      	it	lt
 8007e24:	3101      	addlt	r1, #1
 8007e26:	f7ff fe91 	bl	8007b4c <_Balloc>
 8007e2a:	b930      	cbnz	r0, 8007e3a <__multiply+0x42>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	f240 115d 	movw	r1, #349	; 0x15d
 8007e32:	4b43      	ldr	r3, [pc, #268]	; (8007f40 <__multiply+0x148>)
 8007e34:	4843      	ldr	r0, [pc, #268]	; (8007f44 <__multiply+0x14c>)
 8007e36:	f000 fdc5 	bl	80089c4 <__assert_func>
 8007e3a:	f100 0514 	add.w	r5, r0, #20
 8007e3e:	462b      	mov	r3, r5
 8007e40:	2200      	movs	r2, #0
 8007e42:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e46:	4543      	cmp	r3, r8
 8007e48:	d321      	bcc.n	8007e8e <__multiply+0x96>
 8007e4a:	f104 0314 	add.w	r3, r4, #20
 8007e4e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007e52:	f109 0314 	add.w	r3, r9, #20
 8007e56:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007e5a:	9202      	str	r2, [sp, #8]
 8007e5c:	1b3a      	subs	r2, r7, r4
 8007e5e:	3a15      	subs	r2, #21
 8007e60:	f022 0203 	bic.w	r2, r2, #3
 8007e64:	3204      	adds	r2, #4
 8007e66:	f104 0115 	add.w	r1, r4, #21
 8007e6a:	428f      	cmp	r7, r1
 8007e6c:	bf38      	it	cc
 8007e6e:	2204      	movcc	r2, #4
 8007e70:	9201      	str	r2, [sp, #4]
 8007e72:	9a02      	ldr	r2, [sp, #8]
 8007e74:	9303      	str	r3, [sp, #12]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d80c      	bhi.n	8007e94 <__multiply+0x9c>
 8007e7a:	2e00      	cmp	r6, #0
 8007e7c:	dd03      	ble.n	8007e86 <__multiply+0x8e>
 8007e7e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d059      	beq.n	8007f3a <__multiply+0x142>
 8007e86:	6106      	str	r6, [r0, #16]
 8007e88:	b005      	add	sp, #20
 8007e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8e:	f843 2b04 	str.w	r2, [r3], #4
 8007e92:	e7d8      	b.n	8007e46 <__multiply+0x4e>
 8007e94:	f8b3 a000 	ldrh.w	sl, [r3]
 8007e98:	f1ba 0f00 	cmp.w	sl, #0
 8007e9c:	d023      	beq.n	8007ee6 <__multiply+0xee>
 8007e9e:	46a9      	mov	r9, r5
 8007ea0:	f04f 0c00 	mov.w	ip, #0
 8007ea4:	f104 0e14 	add.w	lr, r4, #20
 8007ea8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007eac:	f8d9 1000 	ldr.w	r1, [r9]
 8007eb0:	fa1f fb82 	uxth.w	fp, r2
 8007eb4:	b289      	uxth	r1, r1
 8007eb6:	fb0a 110b 	mla	r1, sl, fp, r1
 8007eba:	4461      	add	r1, ip
 8007ebc:	f8d9 c000 	ldr.w	ip, [r9]
 8007ec0:	0c12      	lsrs	r2, r2, #16
 8007ec2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007ec6:	fb0a c202 	mla	r2, sl, r2, ip
 8007eca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007ece:	b289      	uxth	r1, r1
 8007ed0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ed4:	4577      	cmp	r7, lr
 8007ed6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007eda:	f849 1b04 	str.w	r1, [r9], #4
 8007ede:	d8e3      	bhi.n	8007ea8 <__multiply+0xb0>
 8007ee0:	9a01      	ldr	r2, [sp, #4]
 8007ee2:	f845 c002 	str.w	ip, [r5, r2]
 8007ee6:	9a03      	ldr	r2, [sp, #12]
 8007ee8:	3304      	adds	r3, #4
 8007eea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007eee:	f1b9 0f00 	cmp.w	r9, #0
 8007ef2:	d020      	beq.n	8007f36 <__multiply+0x13e>
 8007ef4:	46ae      	mov	lr, r5
 8007ef6:	f04f 0a00 	mov.w	sl, #0
 8007efa:	6829      	ldr	r1, [r5, #0]
 8007efc:	f104 0c14 	add.w	ip, r4, #20
 8007f00:	f8bc b000 	ldrh.w	fp, [ip]
 8007f04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f08:	b289      	uxth	r1, r1
 8007f0a:	fb09 220b 	mla	r2, r9, fp, r2
 8007f0e:	4492      	add	sl, r2
 8007f10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007f14:	f84e 1b04 	str.w	r1, [lr], #4
 8007f18:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f1c:	f8be 1000 	ldrh.w	r1, [lr]
 8007f20:	0c12      	lsrs	r2, r2, #16
 8007f22:	fb09 1102 	mla	r1, r9, r2, r1
 8007f26:	4567      	cmp	r7, ip
 8007f28:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007f2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f30:	d8e6      	bhi.n	8007f00 <__multiply+0x108>
 8007f32:	9a01      	ldr	r2, [sp, #4]
 8007f34:	50a9      	str	r1, [r5, r2]
 8007f36:	3504      	adds	r5, #4
 8007f38:	e79b      	b.n	8007e72 <__multiply+0x7a>
 8007f3a:	3e01      	subs	r6, #1
 8007f3c:	e79d      	b.n	8007e7a <__multiply+0x82>
 8007f3e:	bf00      	nop
 8007f40:	08009f28 	.word	0x08009f28
 8007f44:	08009fb4 	.word	0x08009fb4

08007f48 <__pow5mult>:
 8007f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f4c:	4615      	mov	r5, r2
 8007f4e:	f012 0203 	ands.w	r2, r2, #3
 8007f52:	4606      	mov	r6, r0
 8007f54:	460f      	mov	r7, r1
 8007f56:	d007      	beq.n	8007f68 <__pow5mult+0x20>
 8007f58:	4c25      	ldr	r4, [pc, #148]	; (8007ff0 <__pow5mult+0xa8>)
 8007f5a:	3a01      	subs	r2, #1
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f62:	f7ff fe55 	bl	8007c10 <__multadd>
 8007f66:	4607      	mov	r7, r0
 8007f68:	10ad      	asrs	r5, r5, #2
 8007f6a:	d03d      	beq.n	8007fe8 <__pow5mult+0xa0>
 8007f6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f6e:	b97c      	cbnz	r4, 8007f90 <__pow5mult+0x48>
 8007f70:	2010      	movs	r0, #16
 8007f72:	f7ff fdb5 	bl	8007ae0 <malloc>
 8007f76:	4602      	mov	r2, r0
 8007f78:	6270      	str	r0, [r6, #36]	; 0x24
 8007f7a:	b928      	cbnz	r0, 8007f88 <__pow5mult+0x40>
 8007f7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007f80:	4b1c      	ldr	r3, [pc, #112]	; (8007ff4 <__pow5mult+0xac>)
 8007f82:	481d      	ldr	r0, [pc, #116]	; (8007ff8 <__pow5mult+0xb0>)
 8007f84:	f000 fd1e 	bl	80089c4 <__assert_func>
 8007f88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f8c:	6004      	str	r4, [r0, #0]
 8007f8e:	60c4      	str	r4, [r0, #12]
 8007f90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f98:	b94c      	cbnz	r4, 8007fae <__pow5mult+0x66>
 8007f9a:	f240 2171 	movw	r1, #625	; 0x271
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f7ff ff14 	bl	8007dcc <__i2b>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fac:	6003      	str	r3, [r0, #0]
 8007fae:	f04f 0900 	mov.w	r9, #0
 8007fb2:	07eb      	lsls	r3, r5, #31
 8007fb4:	d50a      	bpl.n	8007fcc <__pow5mult+0x84>
 8007fb6:	4639      	mov	r1, r7
 8007fb8:	4622      	mov	r2, r4
 8007fba:	4630      	mov	r0, r6
 8007fbc:	f7ff ff1c 	bl	8007df8 <__multiply>
 8007fc0:	4680      	mov	r8, r0
 8007fc2:	4639      	mov	r1, r7
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	f7ff fe01 	bl	8007bcc <_Bfree>
 8007fca:	4647      	mov	r7, r8
 8007fcc:	106d      	asrs	r5, r5, #1
 8007fce:	d00b      	beq.n	8007fe8 <__pow5mult+0xa0>
 8007fd0:	6820      	ldr	r0, [r4, #0]
 8007fd2:	b938      	cbnz	r0, 8007fe4 <__pow5mult+0x9c>
 8007fd4:	4622      	mov	r2, r4
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f7ff ff0d 	bl	8007df8 <__multiply>
 8007fde:	6020      	str	r0, [r4, #0]
 8007fe0:	f8c0 9000 	str.w	r9, [r0]
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	e7e4      	b.n	8007fb2 <__pow5mult+0x6a>
 8007fe8:	4638      	mov	r0, r7
 8007fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fee:	bf00      	nop
 8007ff0:	0800a100 	.word	0x0800a100
 8007ff4:	08009eb6 	.word	0x08009eb6
 8007ff8:	08009fb4 	.word	0x08009fb4

08007ffc <__lshift>:
 8007ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008000:	460c      	mov	r4, r1
 8008002:	4607      	mov	r7, r0
 8008004:	4691      	mov	r9, r2
 8008006:	6923      	ldr	r3, [r4, #16]
 8008008:	6849      	ldr	r1, [r1, #4]
 800800a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800800e:	68a3      	ldr	r3, [r4, #8]
 8008010:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008014:	f108 0601 	add.w	r6, r8, #1
 8008018:	42b3      	cmp	r3, r6
 800801a:	db0b      	blt.n	8008034 <__lshift+0x38>
 800801c:	4638      	mov	r0, r7
 800801e:	f7ff fd95 	bl	8007b4c <_Balloc>
 8008022:	4605      	mov	r5, r0
 8008024:	b948      	cbnz	r0, 800803a <__lshift+0x3e>
 8008026:	4602      	mov	r2, r0
 8008028:	f240 11d9 	movw	r1, #473	; 0x1d9
 800802c:	4b29      	ldr	r3, [pc, #164]	; (80080d4 <__lshift+0xd8>)
 800802e:	482a      	ldr	r0, [pc, #168]	; (80080d8 <__lshift+0xdc>)
 8008030:	f000 fcc8 	bl	80089c4 <__assert_func>
 8008034:	3101      	adds	r1, #1
 8008036:	005b      	lsls	r3, r3, #1
 8008038:	e7ee      	b.n	8008018 <__lshift+0x1c>
 800803a:	2300      	movs	r3, #0
 800803c:	f100 0114 	add.w	r1, r0, #20
 8008040:	f100 0210 	add.w	r2, r0, #16
 8008044:	4618      	mov	r0, r3
 8008046:	4553      	cmp	r3, sl
 8008048:	db37      	blt.n	80080ba <__lshift+0xbe>
 800804a:	6920      	ldr	r0, [r4, #16]
 800804c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008050:	f104 0314 	add.w	r3, r4, #20
 8008054:	f019 091f 	ands.w	r9, r9, #31
 8008058:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800805c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008060:	d02f      	beq.n	80080c2 <__lshift+0xc6>
 8008062:	468a      	mov	sl, r1
 8008064:	f04f 0c00 	mov.w	ip, #0
 8008068:	f1c9 0e20 	rsb	lr, r9, #32
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	fa02 f209 	lsl.w	r2, r2, r9
 8008072:	ea42 020c 	orr.w	r2, r2, ip
 8008076:	f84a 2b04 	str.w	r2, [sl], #4
 800807a:	f853 2b04 	ldr.w	r2, [r3], #4
 800807e:	4298      	cmp	r0, r3
 8008080:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008084:	d8f2      	bhi.n	800806c <__lshift+0x70>
 8008086:	1b03      	subs	r3, r0, r4
 8008088:	3b15      	subs	r3, #21
 800808a:	f023 0303 	bic.w	r3, r3, #3
 800808e:	3304      	adds	r3, #4
 8008090:	f104 0215 	add.w	r2, r4, #21
 8008094:	4290      	cmp	r0, r2
 8008096:	bf38      	it	cc
 8008098:	2304      	movcc	r3, #4
 800809a:	f841 c003 	str.w	ip, [r1, r3]
 800809e:	f1bc 0f00 	cmp.w	ip, #0
 80080a2:	d001      	beq.n	80080a8 <__lshift+0xac>
 80080a4:	f108 0602 	add.w	r6, r8, #2
 80080a8:	3e01      	subs	r6, #1
 80080aa:	4638      	mov	r0, r7
 80080ac:	4621      	mov	r1, r4
 80080ae:	612e      	str	r6, [r5, #16]
 80080b0:	f7ff fd8c 	bl	8007bcc <_Bfree>
 80080b4:	4628      	mov	r0, r5
 80080b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80080be:	3301      	adds	r3, #1
 80080c0:	e7c1      	b.n	8008046 <__lshift+0x4a>
 80080c2:	3904      	subs	r1, #4
 80080c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80080c8:	4298      	cmp	r0, r3
 80080ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80080ce:	d8f9      	bhi.n	80080c4 <__lshift+0xc8>
 80080d0:	e7ea      	b.n	80080a8 <__lshift+0xac>
 80080d2:	bf00      	nop
 80080d4:	08009f28 	.word	0x08009f28
 80080d8:	08009fb4 	.word	0x08009fb4

080080dc <__mcmp>:
 80080dc:	4603      	mov	r3, r0
 80080de:	690a      	ldr	r2, [r1, #16]
 80080e0:	6900      	ldr	r0, [r0, #16]
 80080e2:	b530      	push	{r4, r5, lr}
 80080e4:	1a80      	subs	r0, r0, r2
 80080e6:	d10d      	bne.n	8008104 <__mcmp+0x28>
 80080e8:	3314      	adds	r3, #20
 80080ea:	3114      	adds	r1, #20
 80080ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80080f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80080f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80080f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80080fc:	4295      	cmp	r5, r2
 80080fe:	d002      	beq.n	8008106 <__mcmp+0x2a>
 8008100:	d304      	bcc.n	800810c <__mcmp+0x30>
 8008102:	2001      	movs	r0, #1
 8008104:	bd30      	pop	{r4, r5, pc}
 8008106:	42a3      	cmp	r3, r4
 8008108:	d3f4      	bcc.n	80080f4 <__mcmp+0x18>
 800810a:	e7fb      	b.n	8008104 <__mcmp+0x28>
 800810c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008110:	e7f8      	b.n	8008104 <__mcmp+0x28>
	...

08008114 <__mdiff>:
 8008114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008118:	460d      	mov	r5, r1
 800811a:	4607      	mov	r7, r0
 800811c:	4611      	mov	r1, r2
 800811e:	4628      	mov	r0, r5
 8008120:	4614      	mov	r4, r2
 8008122:	f7ff ffdb 	bl	80080dc <__mcmp>
 8008126:	1e06      	subs	r6, r0, #0
 8008128:	d111      	bne.n	800814e <__mdiff+0x3a>
 800812a:	4631      	mov	r1, r6
 800812c:	4638      	mov	r0, r7
 800812e:	f7ff fd0d 	bl	8007b4c <_Balloc>
 8008132:	4602      	mov	r2, r0
 8008134:	b928      	cbnz	r0, 8008142 <__mdiff+0x2e>
 8008136:	f240 2132 	movw	r1, #562	; 0x232
 800813a:	4b3a      	ldr	r3, [pc, #232]	; (8008224 <__mdiff+0x110>)
 800813c:	483a      	ldr	r0, [pc, #232]	; (8008228 <__mdiff+0x114>)
 800813e:	f000 fc41 	bl	80089c4 <__assert_func>
 8008142:	2301      	movs	r3, #1
 8008144:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008148:	4610      	mov	r0, r2
 800814a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800814e:	bfa4      	itt	ge
 8008150:	4623      	movge	r3, r4
 8008152:	462c      	movge	r4, r5
 8008154:	4638      	mov	r0, r7
 8008156:	6861      	ldr	r1, [r4, #4]
 8008158:	bfa6      	itte	ge
 800815a:	461d      	movge	r5, r3
 800815c:	2600      	movge	r6, #0
 800815e:	2601      	movlt	r6, #1
 8008160:	f7ff fcf4 	bl	8007b4c <_Balloc>
 8008164:	4602      	mov	r2, r0
 8008166:	b918      	cbnz	r0, 8008170 <__mdiff+0x5c>
 8008168:	f44f 7110 	mov.w	r1, #576	; 0x240
 800816c:	4b2d      	ldr	r3, [pc, #180]	; (8008224 <__mdiff+0x110>)
 800816e:	e7e5      	b.n	800813c <__mdiff+0x28>
 8008170:	f102 0814 	add.w	r8, r2, #20
 8008174:	46c2      	mov	sl, r8
 8008176:	f04f 0c00 	mov.w	ip, #0
 800817a:	6927      	ldr	r7, [r4, #16]
 800817c:	60c6      	str	r6, [r0, #12]
 800817e:	692e      	ldr	r6, [r5, #16]
 8008180:	f104 0014 	add.w	r0, r4, #20
 8008184:	f105 0914 	add.w	r9, r5, #20
 8008188:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800818c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008190:	3410      	adds	r4, #16
 8008192:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008196:	f859 3b04 	ldr.w	r3, [r9], #4
 800819a:	fa1f f18b 	uxth.w	r1, fp
 800819e:	448c      	add	ip, r1
 80081a0:	b299      	uxth	r1, r3
 80081a2:	0c1b      	lsrs	r3, r3, #16
 80081a4:	ebac 0101 	sub.w	r1, ip, r1
 80081a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80081ac:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80081b0:	b289      	uxth	r1, r1
 80081b2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80081b6:	454e      	cmp	r6, r9
 80081b8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80081bc:	f84a 3b04 	str.w	r3, [sl], #4
 80081c0:	d8e7      	bhi.n	8008192 <__mdiff+0x7e>
 80081c2:	1b73      	subs	r3, r6, r5
 80081c4:	3b15      	subs	r3, #21
 80081c6:	f023 0303 	bic.w	r3, r3, #3
 80081ca:	3515      	adds	r5, #21
 80081cc:	3304      	adds	r3, #4
 80081ce:	42ae      	cmp	r6, r5
 80081d0:	bf38      	it	cc
 80081d2:	2304      	movcc	r3, #4
 80081d4:	4418      	add	r0, r3
 80081d6:	4443      	add	r3, r8
 80081d8:	461e      	mov	r6, r3
 80081da:	4605      	mov	r5, r0
 80081dc:	4575      	cmp	r5, lr
 80081de:	d30e      	bcc.n	80081fe <__mdiff+0xea>
 80081e0:	f10e 0103 	add.w	r1, lr, #3
 80081e4:	1a09      	subs	r1, r1, r0
 80081e6:	f021 0103 	bic.w	r1, r1, #3
 80081ea:	3803      	subs	r0, #3
 80081ec:	4586      	cmp	lr, r0
 80081ee:	bf38      	it	cc
 80081f0:	2100      	movcc	r1, #0
 80081f2:	4419      	add	r1, r3
 80081f4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80081f8:	b18b      	cbz	r3, 800821e <__mdiff+0x10a>
 80081fa:	6117      	str	r7, [r2, #16]
 80081fc:	e7a4      	b.n	8008148 <__mdiff+0x34>
 80081fe:	f855 8b04 	ldr.w	r8, [r5], #4
 8008202:	fa1f f188 	uxth.w	r1, r8
 8008206:	4461      	add	r1, ip
 8008208:	140c      	asrs	r4, r1, #16
 800820a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800820e:	b289      	uxth	r1, r1
 8008210:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008214:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008218:	f846 1b04 	str.w	r1, [r6], #4
 800821c:	e7de      	b.n	80081dc <__mdiff+0xc8>
 800821e:	3f01      	subs	r7, #1
 8008220:	e7e8      	b.n	80081f4 <__mdiff+0xe0>
 8008222:	bf00      	nop
 8008224:	08009f28 	.word	0x08009f28
 8008228:	08009fb4 	.word	0x08009fb4

0800822c <__ulp>:
 800822c:	4b11      	ldr	r3, [pc, #68]	; (8008274 <__ulp+0x48>)
 800822e:	400b      	ands	r3, r1
 8008230:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008234:	2b00      	cmp	r3, #0
 8008236:	dd02      	ble.n	800823e <__ulp+0x12>
 8008238:	2000      	movs	r0, #0
 800823a:	4619      	mov	r1, r3
 800823c:	4770      	bx	lr
 800823e:	425b      	negs	r3, r3
 8008240:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008244:	f04f 0000 	mov.w	r0, #0
 8008248:	f04f 0100 	mov.w	r1, #0
 800824c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008250:	da04      	bge.n	800825c <__ulp+0x30>
 8008252:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008256:	fa43 f102 	asr.w	r1, r3, r2
 800825a:	4770      	bx	lr
 800825c:	f1a2 0314 	sub.w	r3, r2, #20
 8008260:	2b1e      	cmp	r3, #30
 8008262:	bfd6      	itet	le
 8008264:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008268:	2301      	movgt	r3, #1
 800826a:	fa22 f303 	lsrle.w	r3, r2, r3
 800826e:	4618      	mov	r0, r3
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	7ff00000 	.word	0x7ff00000

08008278 <__b2d>:
 8008278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800827c:	6907      	ldr	r7, [r0, #16]
 800827e:	f100 0914 	add.w	r9, r0, #20
 8008282:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008286:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800828a:	f1a7 0804 	sub.w	r8, r7, #4
 800828e:	4630      	mov	r0, r6
 8008290:	f7ff fd4e 	bl	8007d30 <__hi0bits>
 8008294:	f1c0 0320 	rsb	r3, r0, #32
 8008298:	280a      	cmp	r0, #10
 800829a:	600b      	str	r3, [r1, #0]
 800829c:	491f      	ldr	r1, [pc, #124]	; (800831c <__b2d+0xa4>)
 800829e:	dc17      	bgt.n	80082d0 <__b2d+0x58>
 80082a0:	45c1      	cmp	r9, r8
 80082a2:	bf28      	it	cs
 80082a4:	2200      	movcs	r2, #0
 80082a6:	f1c0 0c0b 	rsb	ip, r0, #11
 80082aa:	fa26 f30c 	lsr.w	r3, r6, ip
 80082ae:	bf38      	it	cc
 80082b0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80082b4:	ea43 0501 	orr.w	r5, r3, r1
 80082b8:	f100 0315 	add.w	r3, r0, #21
 80082bc:	fa06 f303 	lsl.w	r3, r6, r3
 80082c0:	fa22 f20c 	lsr.w	r2, r2, ip
 80082c4:	ea43 0402 	orr.w	r4, r3, r2
 80082c8:	4620      	mov	r0, r4
 80082ca:	4629      	mov	r1, r5
 80082cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082d0:	45c1      	cmp	r9, r8
 80082d2:	bf2e      	itee	cs
 80082d4:	2200      	movcs	r2, #0
 80082d6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80082da:	f1a7 0808 	subcc.w	r8, r7, #8
 80082de:	f1b0 030b 	subs.w	r3, r0, #11
 80082e2:	d016      	beq.n	8008312 <__b2d+0x9a>
 80082e4:	f1c3 0720 	rsb	r7, r3, #32
 80082e8:	fa22 f107 	lsr.w	r1, r2, r7
 80082ec:	45c8      	cmp	r8, r9
 80082ee:	fa06 f603 	lsl.w	r6, r6, r3
 80082f2:	ea46 0601 	orr.w	r6, r6, r1
 80082f6:	bf94      	ite	ls
 80082f8:	2100      	movls	r1, #0
 80082fa:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80082fe:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008302:	fa02 f003 	lsl.w	r0, r2, r3
 8008306:	40f9      	lsrs	r1, r7
 8008308:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800830c:	ea40 0401 	orr.w	r4, r0, r1
 8008310:	e7da      	b.n	80082c8 <__b2d+0x50>
 8008312:	4614      	mov	r4, r2
 8008314:	ea46 0501 	orr.w	r5, r6, r1
 8008318:	e7d6      	b.n	80082c8 <__b2d+0x50>
 800831a:	bf00      	nop
 800831c:	3ff00000 	.word	0x3ff00000

08008320 <__d2b>:
 8008320:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008324:	2101      	movs	r1, #1
 8008326:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800832a:	4690      	mov	r8, r2
 800832c:	461d      	mov	r5, r3
 800832e:	f7ff fc0d 	bl	8007b4c <_Balloc>
 8008332:	4604      	mov	r4, r0
 8008334:	b930      	cbnz	r0, 8008344 <__d2b+0x24>
 8008336:	4602      	mov	r2, r0
 8008338:	f240 310a 	movw	r1, #778	; 0x30a
 800833c:	4b24      	ldr	r3, [pc, #144]	; (80083d0 <__d2b+0xb0>)
 800833e:	4825      	ldr	r0, [pc, #148]	; (80083d4 <__d2b+0xb4>)
 8008340:	f000 fb40 	bl	80089c4 <__assert_func>
 8008344:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008348:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800834c:	bb2d      	cbnz	r5, 800839a <__d2b+0x7a>
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	f1b8 0300 	subs.w	r3, r8, #0
 8008354:	d026      	beq.n	80083a4 <__d2b+0x84>
 8008356:	4668      	mov	r0, sp
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	f7ff fd09 	bl	8007d70 <__lo0bits>
 800835e:	9900      	ldr	r1, [sp, #0]
 8008360:	b1f0      	cbz	r0, 80083a0 <__d2b+0x80>
 8008362:	9a01      	ldr	r2, [sp, #4]
 8008364:	f1c0 0320 	rsb	r3, r0, #32
 8008368:	fa02 f303 	lsl.w	r3, r2, r3
 800836c:	430b      	orrs	r3, r1
 800836e:	40c2      	lsrs	r2, r0
 8008370:	6163      	str	r3, [r4, #20]
 8008372:	9201      	str	r2, [sp, #4]
 8008374:	9b01      	ldr	r3, [sp, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	bf14      	ite	ne
 800837a:	2102      	movne	r1, #2
 800837c:	2101      	moveq	r1, #1
 800837e:	61a3      	str	r3, [r4, #24]
 8008380:	6121      	str	r1, [r4, #16]
 8008382:	b1c5      	cbz	r5, 80083b6 <__d2b+0x96>
 8008384:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008388:	4405      	add	r5, r0
 800838a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800838e:	603d      	str	r5, [r7, #0]
 8008390:	6030      	str	r0, [r6, #0]
 8008392:	4620      	mov	r0, r4
 8008394:	b002      	add	sp, #8
 8008396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800839a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800839e:	e7d6      	b.n	800834e <__d2b+0x2e>
 80083a0:	6161      	str	r1, [r4, #20]
 80083a2:	e7e7      	b.n	8008374 <__d2b+0x54>
 80083a4:	a801      	add	r0, sp, #4
 80083a6:	f7ff fce3 	bl	8007d70 <__lo0bits>
 80083aa:	2101      	movs	r1, #1
 80083ac:	9b01      	ldr	r3, [sp, #4]
 80083ae:	6121      	str	r1, [r4, #16]
 80083b0:	6163      	str	r3, [r4, #20]
 80083b2:	3020      	adds	r0, #32
 80083b4:	e7e5      	b.n	8008382 <__d2b+0x62>
 80083b6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80083ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80083be:	6038      	str	r0, [r7, #0]
 80083c0:	6918      	ldr	r0, [r3, #16]
 80083c2:	f7ff fcb5 	bl	8007d30 <__hi0bits>
 80083c6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80083ca:	6031      	str	r1, [r6, #0]
 80083cc:	e7e1      	b.n	8008392 <__d2b+0x72>
 80083ce:	bf00      	nop
 80083d0:	08009f28 	.word	0x08009f28
 80083d4:	08009fb4 	.word	0x08009fb4

080083d8 <__ratio>:
 80083d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083dc:	4688      	mov	r8, r1
 80083de:	4669      	mov	r1, sp
 80083e0:	4681      	mov	r9, r0
 80083e2:	f7ff ff49 	bl	8008278 <__b2d>
 80083e6:	460f      	mov	r7, r1
 80083e8:	4604      	mov	r4, r0
 80083ea:	460d      	mov	r5, r1
 80083ec:	4640      	mov	r0, r8
 80083ee:	a901      	add	r1, sp, #4
 80083f0:	f7ff ff42 	bl	8008278 <__b2d>
 80083f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80083f8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80083fc:	468b      	mov	fp, r1
 80083fe:	eba3 0c02 	sub.w	ip, r3, r2
 8008402:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008406:	1a9b      	subs	r3, r3, r2
 8008408:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800840c:	2b00      	cmp	r3, #0
 800840e:	bfd5      	itete	le
 8008410:	460a      	movle	r2, r1
 8008412:	462a      	movgt	r2, r5
 8008414:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008418:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800841c:	bfd8      	it	le
 800841e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008422:	465b      	mov	r3, fp
 8008424:	4602      	mov	r2, r0
 8008426:	4639      	mov	r1, r7
 8008428:	4620      	mov	r0, r4
 800842a:	f7f8 f97f 	bl	800072c <__aeabi_ddiv>
 800842e:	b003      	add	sp, #12
 8008430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008434 <__copybits>:
 8008434:	3901      	subs	r1, #1
 8008436:	b570      	push	{r4, r5, r6, lr}
 8008438:	1149      	asrs	r1, r1, #5
 800843a:	6914      	ldr	r4, [r2, #16]
 800843c:	3101      	adds	r1, #1
 800843e:	f102 0314 	add.w	r3, r2, #20
 8008442:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008446:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800844a:	1f05      	subs	r5, r0, #4
 800844c:	42a3      	cmp	r3, r4
 800844e:	d30c      	bcc.n	800846a <__copybits+0x36>
 8008450:	1aa3      	subs	r3, r4, r2
 8008452:	3b11      	subs	r3, #17
 8008454:	f023 0303 	bic.w	r3, r3, #3
 8008458:	3211      	adds	r2, #17
 800845a:	42a2      	cmp	r2, r4
 800845c:	bf88      	it	hi
 800845e:	2300      	movhi	r3, #0
 8008460:	4418      	add	r0, r3
 8008462:	2300      	movs	r3, #0
 8008464:	4288      	cmp	r0, r1
 8008466:	d305      	bcc.n	8008474 <__copybits+0x40>
 8008468:	bd70      	pop	{r4, r5, r6, pc}
 800846a:	f853 6b04 	ldr.w	r6, [r3], #4
 800846e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008472:	e7eb      	b.n	800844c <__copybits+0x18>
 8008474:	f840 3b04 	str.w	r3, [r0], #4
 8008478:	e7f4      	b.n	8008464 <__copybits+0x30>

0800847a <__any_on>:
 800847a:	f100 0214 	add.w	r2, r0, #20
 800847e:	6900      	ldr	r0, [r0, #16]
 8008480:	114b      	asrs	r3, r1, #5
 8008482:	4298      	cmp	r0, r3
 8008484:	b510      	push	{r4, lr}
 8008486:	db11      	blt.n	80084ac <__any_on+0x32>
 8008488:	dd0a      	ble.n	80084a0 <__any_on+0x26>
 800848a:	f011 011f 	ands.w	r1, r1, #31
 800848e:	d007      	beq.n	80084a0 <__any_on+0x26>
 8008490:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008494:	fa24 f001 	lsr.w	r0, r4, r1
 8008498:	fa00 f101 	lsl.w	r1, r0, r1
 800849c:	428c      	cmp	r4, r1
 800849e:	d10b      	bne.n	80084b8 <__any_on+0x3e>
 80084a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d803      	bhi.n	80084b0 <__any_on+0x36>
 80084a8:	2000      	movs	r0, #0
 80084aa:	bd10      	pop	{r4, pc}
 80084ac:	4603      	mov	r3, r0
 80084ae:	e7f7      	b.n	80084a0 <__any_on+0x26>
 80084b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084b4:	2900      	cmp	r1, #0
 80084b6:	d0f5      	beq.n	80084a4 <__any_on+0x2a>
 80084b8:	2001      	movs	r0, #1
 80084ba:	e7f6      	b.n	80084aa <__any_on+0x30>

080084bc <_calloc_r>:
 80084bc:	b570      	push	{r4, r5, r6, lr}
 80084be:	fba1 5402 	umull	r5, r4, r1, r2
 80084c2:	b934      	cbnz	r4, 80084d2 <_calloc_r+0x16>
 80084c4:	4629      	mov	r1, r5
 80084c6:	f000 f875 	bl	80085b4 <_malloc_r>
 80084ca:	4606      	mov	r6, r0
 80084cc:	b928      	cbnz	r0, 80084da <_calloc_r+0x1e>
 80084ce:	4630      	mov	r0, r6
 80084d0:	bd70      	pop	{r4, r5, r6, pc}
 80084d2:	220c      	movs	r2, #12
 80084d4:	2600      	movs	r6, #0
 80084d6:	6002      	str	r2, [r0, #0]
 80084d8:	e7f9      	b.n	80084ce <_calloc_r+0x12>
 80084da:	462a      	mov	r2, r5
 80084dc:	4621      	mov	r1, r4
 80084de:	f7fc fbf1 	bl	8004cc4 <memset>
 80084e2:	e7f4      	b.n	80084ce <_calloc_r+0x12>

080084e4 <_free_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4605      	mov	r5, r0
 80084e8:	2900      	cmp	r1, #0
 80084ea:	d040      	beq.n	800856e <_free_r+0x8a>
 80084ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084f0:	1f0c      	subs	r4, r1, #4
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	bfb8      	it	lt
 80084f6:	18e4      	addlt	r4, r4, r3
 80084f8:	f000 faae 	bl	8008a58 <__malloc_lock>
 80084fc:	4a1c      	ldr	r2, [pc, #112]	; (8008570 <_free_r+0x8c>)
 80084fe:	6813      	ldr	r3, [r2, #0]
 8008500:	b933      	cbnz	r3, 8008510 <_free_r+0x2c>
 8008502:	6063      	str	r3, [r4, #4]
 8008504:	6014      	str	r4, [r2, #0]
 8008506:	4628      	mov	r0, r5
 8008508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800850c:	f000 baaa 	b.w	8008a64 <__malloc_unlock>
 8008510:	42a3      	cmp	r3, r4
 8008512:	d908      	bls.n	8008526 <_free_r+0x42>
 8008514:	6820      	ldr	r0, [r4, #0]
 8008516:	1821      	adds	r1, r4, r0
 8008518:	428b      	cmp	r3, r1
 800851a:	bf01      	itttt	eq
 800851c:	6819      	ldreq	r1, [r3, #0]
 800851e:	685b      	ldreq	r3, [r3, #4]
 8008520:	1809      	addeq	r1, r1, r0
 8008522:	6021      	streq	r1, [r4, #0]
 8008524:	e7ed      	b.n	8008502 <_free_r+0x1e>
 8008526:	461a      	mov	r2, r3
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	b10b      	cbz	r3, 8008530 <_free_r+0x4c>
 800852c:	42a3      	cmp	r3, r4
 800852e:	d9fa      	bls.n	8008526 <_free_r+0x42>
 8008530:	6811      	ldr	r1, [r2, #0]
 8008532:	1850      	adds	r0, r2, r1
 8008534:	42a0      	cmp	r0, r4
 8008536:	d10b      	bne.n	8008550 <_free_r+0x6c>
 8008538:	6820      	ldr	r0, [r4, #0]
 800853a:	4401      	add	r1, r0
 800853c:	1850      	adds	r0, r2, r1
 800853e:	4283      	cmp	r3, r0
 8008540:	6011      	str	r1, [r2, #0]
 8008542:	d1e0      	bne.n	8008506 <_free_r+0x22>
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	4401      	add	r1, r0
 800854a:	6011      	str	r1, [r2, #0]
 800854c:	6053      	str	r3, [r2, #4]
 800854e:	e7da      	b.n	8008506 <_free_r+0x22>
 8008550:	d902      	bls.n	8008558 <_free_r+0x74>
 8008552:	230c      	movs	r3, #12
 8008554:	602b      	str	r3, [r5, #0]
 8008556:	e7d6      	b.n	8008506 <_free_r+0x22>
 8008558:	6820      	ldr	r0, [r4, #0]
 800855a:	1821      	adds	r1, r4, r0
 800855c:	428b      	cmp	r3, r1
 800855e:	bf01      	itttt	eq
 8008560:	6819      	ldreq	r1, [r3, #0]
 8008562:	685b      	ldreq	r3, [r3, #4]
 8008564:	1809      	addeq	r1, r1, r0
 8008566:	6021      	streq	r1, [r4, #0]
 8008568:	6063      	str	r3, [r4, #4]
 800856a:	6054      	str	r4, [r2, #4]
 800856c:	e7cb      	b.n	8008506 <_free_r+0x22>
 800856e:	bd38      	pop	{r3, r4, r5, pc}
 8008570:	2000071c 	.word	0x2000071c

08008574 <sbrk_aligned>:
 8008574:	b570      	push	{r4, r5, r6, lr}
 8008576:	4e0e      	ldr	r6, [pc, #56]	; (80085b0 <sbrk_aligned+0x3c>)
 8008578:	460c      	mov	r4, r1
 800857a:	6831      	ldr	r1, [r6, #0]
 800857c:	4605      	mov	r5, r0
 800857e:	b911      	cbnz	r1, 8008586 <sbrk_aligned+0x12>
 8008580:	f000 f9ee 	bl	8008960 <_sbrk_r>
 8008584:	6030      	str	r0, [r6, #0]
 8008586:	4621      	mov	r1, r4
 8008588:	4628      	mov	r0, r5
 800858a:	f000 f9e9 	bl	8008960 <_sbrk_r>
 800858e:	1c43      	adds	r3, r0, #1
 8008590:	d00a      	beq.n	80085a8 <sbrk_aligned+0x34>
 8008592:	1cc4      	adds	r4, r0, #3
 8008594:	f024 0403 	bic.w	r4, r4, #3
 8008598:	42a0      	cmp	r0, r4
 800859a:	d007      	beq.n	80085ac <sbrk_aligned+0x38>
 800859c:	1a21      	subs	r1, r4, r0
 800859e:	4628      	mov	r0, r5
 80085a0:	f000 f9de 	bl	8008960 <_sbrk_r>
 80085a4:	3001      	adds	r0, #1
 80085a6:	d101      	bne.n	80085ac <sbrk_aligned+0x38>
 80085a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80085ac:	4620      	mov	r0, r4
 80085ae:	bd70      	pop	{r4, r5, r6, pc}
 80085b0:	20000720 	.word	0x20000720

080085b4 <_malloc_r>:
 80085b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085b8:	1ccd      	adds	r5, r1, #3
 80085ba:	f025 0503 	bic.w	r5, r5, #3
 80085be:	3508      	adds	r5, #8
 80085c0:	2d0c      	cmp	r5, #12
 80085c2:	bf38      	it	cc
 80085c4:	250c      	movcc	r5, #12
 80085c6:	2d00      	cmp	r5, #0
 80085c8:	4607      	mov	r7, r0
 80085ca:	db01      	blt.n	80085d0 <_malloc_r+0x1c>
 80085cc:	42a9      	cmp	r1, r5
 80085ce:	d905      	bls.n	80085dc <_malloc_r+0x28>
 80085d0:	230c      	movs	r3, #12
 80085d2:	2600      	movs	r6, #0
 80085d4:	603b      	str	r3, [r7, #0]
 80085d6:	4630      	mov	r0, r6
 80085d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085dc:	4e2e      	ldr	r6, [pc, #184]	; (8008698 <_malloc_r+0xe4>)
 80085de:	f000 fa3b 	bl	8008a58 <__malloc_lock>
 80085e2:	6833      	ldr	r3, [r6, #0]
 80085e4:	461c      	mov	r4, r3
 80085e6:	bb34      	cbnz	r4, 8008636 <_malloc_r+0x82>
 80085e8:	4629      	mov	r1, r5
 80085ea:	4638      	mov	r0, r7
 80085ec:	f7ff ffc2 	bl	8008574 <sbrk_aligned>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	4604      	mov	r4, r0
 80085f4:	d14d      	bne.n	8008692 <_malloc_r+0xde>
 80085f6:	6834      	ldr	r4, [r6, #0]
 80085f8:	4626      	mov	r6, r4
 80085fa:	2e00      	cmp	r6, #0
 80085fc:	d140      	bne.n	8008680 <_malloc_r+0xcc>
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	4631      	mov	r1, r6
 8008602:	4638      	mov	r0, r7
 8008604:	eb04 0803 	add.w	r8, r4, r3
 8008608:	f000 f9aa 	bl	8008960 <_sbrk_r>
 800860c:	4580      	cmp	r8, r0
 800860e:	d13a      	bne.n	8008686 <_malloc_r+0xd2>
 8008610:	6821      	ldr	r1, [r4, #0]
 8008612:	3503      	adds	r5, #3
 8008614:	1a6d      	subs	r5, r5, r1
 8008616:	f025 0503 	bic.w	r5, r5, #3
 800861a:	3508      	adds	r5, #8
 800861c:	2d0c      	cmp	r5, #12
 800861e:	bf38      	it	cc
 8008620:	250c      	movcc	r5, #12
 8008622:	4638      	mov	r0, r7
 8008624:	4629      	mov	r1, r5
 8008626:	f7ff ffa5 	bl	8008574 <sbrk_aligned>
 800862a:	3001      	adds	r0, #1
 800862c:	d02b      	beq.n	8008686 <_malloc_r+0xd2>
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	442b      	add	r3, r5
 8008632:	6023      	str	r3, [r4, #0]
 8008634:	e00e      	b.n	8008654 <_malloc_r+0xa0>
 8008636:	6822      	ldr	r2, [r4, #0]
 8008638:	1b52      	subs	r2, r2, r5
 800863a:	d41e      	bmi.n	800867a <_malloc_r+0xc6>
 800863c:	2a0b      	cmp	r2, #11
 800863e:	d916      	bls.n	800866e <_malloc_r+0xba>
 8008640:	1961      	adds	r1, r4, r5
 8008642:	42a3      	cmp	r3, r4
 8008644:	6025      	str	r5, [r4, #0]
 8008646:	bf18      	it	ne
 8008648:	6059      	strne	r1, [r3, #4]
 800864a:	6863      	ldr	r3, [r4, #4]
 800864c:	bf08      	it	eq
 800864e:	6031      	streq	r1, [r6, #0]
 8008650:	5162      	str	r2, [r4, r5]
 8008652:	604b      	str	r3, [r1, #4]
 8008654:	4638      	mov	r0, r7
 8008656:	f104 060b 	add.w	r6, r4, #11
 800865a:	f000 fa03 	bl	8008a64 <__malloc_unlock>
 800865e:	f026 0607 	bic.w	r6, r6, #7
 8008662:	1d23      	adds	r3, r4, #4
 8008664:	1af2      	subs	r2, r6, r3
 8008666:	d0b6      	beq.n	80085d6 <_malloc_r+0x22>
 8008668:	1b9b      	subs	r3, r3, r6
 800866a:	50a3      	str	r3, [r4, r2]
 800866c:	e7b3      	b.n	80085d6 <_malloc_r+0x22>
 800866e:	6862      	ldr	r2, [r4, #4]
 8008670:	42a3      	cmp	r3, r4
 8008672:	bf0c      	ite	eq
 8008674:	6032      	streq	r2, [r6, #0]
 8008676:	605a      	strne	r2, [r3, #4]
 8008678:	e7ec      	b.n	8008654 <_malloc_r+0xa0>
 800867a:	4623      	mov	r3, r4
 800867c:	6864      	ldr	r4, [r4, #4]
 800867e:	e7b2      	b.n	80085e6 <_malloc_r+0x32>
 8008680:	4634      	mov	r4, r6
 8008682:	6876      	ldr	r6, [r6, #4]
 8008684:	e7b9      	b.n	80085fa <_malloc_r+0x46>
 8008686:	230c      	movs	r3, #12
 8008688:	4638      	mov	r0, r7
 800868a:	603b      	str	r3, [r7, #0]
 800868c:	f000 f9ea 	bl	8008a64 <__malloc_unlock>
 8008690:	e7a1      	b.n	80085d6 <_malloc_r+0x22>
 8008692:	6025      	str	r5, [r4, #0]
 8008694:	e7de      	b.n	8008654 <_malloc_r+0xa0>
 8008696:	bf00      	nop
 8008698:	2000071c 	.word	0x2000071c

0800869c <__ssputs_r>:
 800869c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a0:	688e      	ldr	r6, [r1, #8]
 80086a2:	4682      	mov	sl, r0
 80086a4:	429e      	cmp	r6, r3
 80086a6:	460c      	mov	r4, r1
 80086a8:	4690      	mov	r8, r2
 80086aa:	461f      	mov	r7, r3
 80086ac:	d838      	bhi.n	8008720 <__ssputs_r+0x84>
 80086ae:	898a      	ldrh	r2, [r1, #12]
 80086b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086b4:	d032      	beq.n	800871c <__ssputs_r+0x80>
 80086b6:	6825      	ldr	r5, [r4, #0]
 80086b8:	6909      	ldr	r1, [r1, #16]
 80086ba:	3301      	adds	r3, #1
 80086bc:	eba5 0901 	sub.w	r9, r5, r1
 80086c0:	6965      	ldr	r5, [r4, #20]
 80086c2:	444b      	add	r3, r9
 80086c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086cc:	106d      	asrs	r5, r5, #1
 80086ce:	429d      	cmp	r5, r3
 80086d0:	bf38      	it	cc
 80086d2:	461d      	movcc	r5, r3
 80086d4:	0553      	lsls	r3, r2, #21
 80086d6:	d531      	bpl.n	800873c <__ssputs_r+0xa0>
 80086d8:	4629      	mov	r1, r5
 80086da:	f7ff ff6b 	bl	80085b4 <_malloc_r>
 80086de:	4606      	mov	r6, r0
 80086e0:	b950      	cbnz	r0, 80086f8 <__ssputs_r+0x5c>
 80086e2:	230c      	movs	r3, #12
 80086e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086e8:	f8ca 3000 	str.w	r3, [sl]
 80086ec:	89a3      	ldrh	r3, [r4, #12]
 80086ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086f2:	81a3      	strh	r3, [r4, #12]
 80086f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f8:	464a      	mov	r2, r9
 80086fa:	6921      	ldr	r1, [r4, #16]
 80086fc:	f7ff fa18 	bl	8007b30 <memcpy>
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800870a:	81a3      	strh	r3, [r4, #12]
 800870c:	6126      	str	r6, [r4, #16]
 800870e:	444e      	add	r6, r9
 8008710:	6026      	str	r6, [r4, #0]
 8008712:	463e      	mov	r6, r7
 8008714:	6165      	str	r5, [r4, #20]
 8008716:	eba5 0509 	sub.w	r5, r5, r9
 800871a:	60a5      	str	r5, [r4, #8]
 800871c:	42be      	cmp	r6, r7
 800871e:	d900      	bls.n	8008722 <__ssputs_r+0x86>
 8008720:	463e      	mov	r6, r7
 8008722:	4632      	mov	r2, r6
 8008724:	4641      	mov	r1, r8
 8008726:	6820      	ldr	r0, [r4, #0]
 8008728:	f000 f97c 	bl	8008a24 <memmove>
 800872c:	68a3      	ldr	r3, [r4, #8]
 800872e:	2000      	movs	r0, #0
 8008730:	1b9b      	subs	r3, r3, r6
 8008732:	60a3      	str	r3, [r4, #8]
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	4433      	add	r3, r6
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	e7db      	b.n	80086f4 <__ssputs_r+0x58>
 800873c:	462a      	mov	r2, r5
 800873e:	f000 f997 	bl	8008a70 <_realloc_r>
 8008742:	4606      	mov	r6, r0
 8008744:	2800      	cmp	r0, #0
 8008746:	d1e1      	bne.n	800870c <__ssputs_r+0x70>
 8008748:	4650      	mov	r0, sl
 800874a:	6921      	ldr	r1, [r4, #16]
 800874c:	f7ff feca 	bl	80084e4 <_free_r>
 8008750:	e7c7      	b.n	80086e2 <__ssputs_r+0x46>
	...

08008754 <_svfiprintf_r>:
 8008754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008758:	4698      	mov	r8, r3
 800875a:	898b      	ldrh	r3, [r1, #12]
 800875c:	4607      	mov	r7, r0
 800875e:	061b      	lsls	r3, r3, #24
 8008760:	460d      	mov	r5, r1
 8008762:	4614      	mov	r4, r2
 8008764:	b09d      	sub	sp, #116	; 0x74
 8008766:	d50e      	bpl.n	8008786 <_svfiprintf_r+0x32>
 8008768:	690b      	ldr	r3, [r1, #16]
 800876a:	b963      	cbnz	r3, 8008786 <_svfiprintf_r+0x32>
 800876c:	2140      	movs	r1, #64	; 0x40
 800876e:	f7ff ff21 	bl	80085b4 <_malloc_r>
 8008772:	6028      	str	r0, [r5, #0]
 8008774:	6128      	str	r0, [r5, #16]
 8008776:	b920      	cbnz	r0, 8008782 <_svfiprintf_r+0x2e>
 8008778:	230c      	movs	r3, #12
 800877a:	603b      	str	r3, [r7, #0]
 800877c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008780:	e0d1      	b.n	8008926 <_svfiprintf_r+0x1d2>
 8008782:	2340      	movs	r3, #64	; 0x40
 8008784:	616b      	str	r3, [r5, #20]
 8008786:	2300      	movs	r3, #0
 8008788:	9309      	str	r3, [sp, #36]	; 0x24
 800878a:	2320      	movs	r3, #32
 800878c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008790:	2330      	movs	r3, #48	; 0x30
 8008792:	f04f 0901 	mov.w	r9, #1
 8008796:	f8cd 800c 	str.w	r8, [sp, #12]
 800879a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008940 <_svfiprintf_r+0x1ec>
 800879e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087a2:	4623      	mov	r3, r4
 80087a4:	469a      	mov	sl, r3
 80087a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087aa:	b10a      	cbz	r2, 80087b0 <_svfiprintf_r+0x5c>
 80087ac:	2a25      	cmp	r2, #37	; 0x25
 80087ae:	d1f9      	bne.n	80087a4 <_svfiprintf_r+0x50>
 80087b0:	ebba 0b04 	subs.w	fp, sl, r4
 80087b4:	d00b      	beq.n	80087ce <_svfiprintf_r+0x7a>
 80087b6:	465b      	mov	r3, fp
 80087b8:	4622      	mov	r2, r4
 80087ba:	4629      	mov	r1, r5
 80087bc:	4638      	mov	r0, r7
 80087be:	f7ff ff6d 	bl	800869c <__ssputs_r>
 80087c2:	3001      	adds	r0, #1
 80087c4:	f000 80aa 	beq.w	800891c <_svfiprintf_r+0x1c8>
 80087c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ca:	445a      	add	r2, fp
 80087cc:	9209      	str	r2, [sp, #36]	; 0x24
 80087ce:	f89a 3000 	ldrb.w	r3, [sl]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 80a2 	beq.w	800891c <_svfiprintf_r+0x1c8>
 80087d8:	2300      	movs	r3, #0
 80087da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087e2:	f10a 0a01 	add.w	sl, sl, #1
 80087e6:	9304      	str	r3, [sp, #16]
 80087e8:	9307      	str	r3, [sp, #28]
 80087ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087ee:	931a      	str	r3, [sp, #104]	; 0x68
 80087f0:	4654      	mov	r4, sl
 80087f2:	2205      	movs	r2, #5
 80087f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087f8:	4851      	ldr	r0, [pc, #324]	; (8008940 <_svfiprintf_r+0x1ec>)
 80087fa:	f7ff f98b 	bl	8007b14 <memchr>
 80087fe:	9a04      	ldr	r2, [sp, #16]
 8008800:	b9d8      	cbnz	r0, 800883a <_svfiprintf_r+0xe6>
 8008802:	06d0      	lsls	r0, r2, #27
 8008804:	bf44      	itt	mi
 8008806:	2320      	movmi	r3, #32
 8008808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800880c:	0711      	lsls	r1, r2, #28
 800880e:	bf44      	itt	mi
 8008810:	232b      	movmi	r3, #43	; 0x2b
 8008812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008816:	f89a 3000 	ldrb.w	r3, [sl]
 800881a:	2b2a      	cmp	r3, #42	; 0x2a
 800881c:	d015      	beq.n	800884a <_svfiprintf_r+0xf6>
 800881e:	4654      	mov	r4, sl
 8008820:	2000      	movs	r0, #0
 8008822:	f04f 0c0a 	mov.w	ip, #10
 8008826:	9a07      	ldr	r2, [sp, #28]
 8008828:	4621      	mov	r1, r4
 800882a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800882e:	3b30      	subs	r3, #48	; 0x30
 8008830:	2b09      	cmp	r3, #9
 8008832:	d94e      	bls.n	80088d2 <_svfiprintf_r+0x17e>
 8008834:	b1b0      	cbz	r0, 8008864 <_svfiprintf_r+0x110>
 8008836:	9207      	str	r2, [sp, #28]
 8008838:	e014      	b.n	8008864 <_svfiprintf_r+0x110>
 800883a:	eba0 0308 	sub.w	r3, r0, r8
 800883e:	fa09 f303 	lsl.w	r3, r9, r3
 8008842:	4313      	orrs	r3, r2
 8008844:	46a2      	mov	sl, r4
 8008846:	9304      	str	r3, [sp, #16]
 8008848:	e7d2      	b.n	80087f0 <_svfiprintf_r+0x9c>
 800884a:	9b03      	ldr	r3, [sp, #12]
 800884c:	1d19      	adds	r1, r3, #4
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	9103      	str	r1, [sp, #12]
 8008852:	2b00      	cmp	r3, #0
 8008854:	bfbb      	ittet	lt
 8008856:	425b      	neglt	r3, r3
 8008858:	f042 0202 	orrlt.w	r2, r2, #2
 800885c:	9307      	strge	r3, [sp, #28]
 800885e:	9307      	strlt	r3, [sp, #28]
 8008860:	bfb8      	it	lt
 8008862:	9204      	strlt	r2, [sp, #16]
 8008864:	7823      	ldrb	r3, [r4, #0]
 8008866:	2b2e      	cmp	r3, #46	; 0x2e
 8008868:	d10c      	bne.n	8008884 <_svfiprintf_r+0x130>
 800886a:	7863      	ldrb	r3, [r4, #1]
 800886c:	2b2a      	cmp	r3, #42	; 0x2a
 800886e:	d135      	bne.n	80088dc <_svfiprintf_r+0x188>
 8008870:	9b03      	ldr	r3, [sp, #12]
 8008872:	3402      	adds	r4, #2
 8008874:	1d1a      	adds	r2, r3, #4
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	9203      	str	r2, [sp, #12]
 800887a:	2b00      	cmp	r3, #0
 800887c:	bfb8      	it	lt
 800887e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008882:	9305      	str	r3, [sp, #20]
 8008884:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008944 <_svfiprintf_r+0x1f0>
 8008888:	2203      	movs	r2, #3
 800888a:	4650      	mov	r0, sl
 800888c:	7821      	ldrb	r1, [r4, #0]
 800888e:	f7ff f941 	bl	8007b14 <memchr>
 8008892:	b140      	cbz	r0, 80088a6 <_svfiprintf_r+0x152>
 8008894:	2340      	movs	r3, #64	; 0x40
 8008896:	eba0 000a 	sub.w	r0, r0, sl
 800889a:	fa03 f000 	lsl.w	r0, r3, r0
 800889e:	9b04      	ldr	r3, [sp, #16]
 80088a0:	3401      	adds	r4, #1
 80088a2:	4303      	orrs	r3, r0
 80088a4:	9304      	str	r3, [sp, #16]
 80088a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088aa:	2206      	movs	r2, #6
 80088ac:	4826      	ldr	r0, [pc, #152]	; (8008948 <_svfiprintf_r+0x1f4>)
 80088ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088b2:	f7ff f92f 	bl	8007b14 <memchr>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d038      	beq.n	800892c <_svfiprintf_r+0x1d8>
 80088ba:	4b24      	ldr	r3, [pc, #144]	; (800894c <_svfiprintf_r+0x1f8>)
 80088bc:	bb1b      	cbnz	r3, 8008906 <_svfiprintf_r+0x1b2>
 80088be:	9b03      	ldr	r3, [sp, #12]
 80088c0:	3307      	adds	r3, #7
 80088c2:	f023 0307 	bic.w	r3, r3, #7
 80088c6:	3308      	adds	r3, #8
 80088c8:	9303      	str	r3, [sp, #12]
 80088ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088cc:	4433      	add	r3, r6
 80088ce:	9309      	str	r3, [sp, #36]	; 0x24
 80088d0:	e767      	b.n	80087a2 <_svfiprintf_r+0x4e>
 80088d2:	460c      	mov	r4, r1
 80088d4:	2001      	movs	r0, #1
 80088d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80088da:	e7a5      	b.n	8008828 <_svfiprintf_r+0xd4>
 80088dc:	2300      	movs	r3, #0
 80088de:	f04f 0c0a 	mov.w	ip, #10
 80088e2:	4619      	mov	r1, r3
 80088e4:	3401      	adds	r4, #1
 80088e6:	9305      	str	r3, [sp, #20]
 80088e8:	4620      	mov	r0, r4
 80088ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088ee:	3a30      	subs	r2, #48	; 0x30
 80088f0:	2a09      	cmp	r2, #9
 80088f2:	d903      	bls.n	80088fc <_svfiprintf_r+0x1a8>
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0c5      	beq.n	8008884 <_svfiprintf_r+0x130>
 80088f8:	9105      	str	r1, [sp, #20]
 80088fa:	e7c3      	b.n	8008884 <_svfiprintf_r+0x130>
 80088fc:	4604      	mov	r4, r0
 80088fe:	2301      	movs	r3, #1
 8008900:	fb0c 2101 	mla	r1, ip, r1, r2
 8008904:	e7f0      	b.n	80088e8 <_svfiprintf_r+0x194>
 8008906:	ab03      	add	r3, sp, #12
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	462a      	mov	r2, r5
 800890c:	4638      	mov	r0, r7
 800890e:	4b10      	ldr	r3, [pc, #64]	; (8008950 <_svfiprintf_r+0x1fc>)
 8008910:	a904      	add	r1, sp, #16
 8008912:	f7fc fa7d 	bl	8004e10 <_printf_float>
 8008916:	1c42      	adds	r2, r0, #1
 8008918:	4606      	mov	r6, r0
 800891a:	d1d6      	bne.n	80088ca <_svfiprintf_r+0x176>
 800891c:	89ab      	ldrh	r3, [r5, #12]
 800891e:	065b      	lsls	r3, r3, #25
 8008920:	f53f af2c 	bmi.w	800877c <_svfiprintf_r+0x28>
 8008924:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008926:	b01d      	add	sp, #116	; 0x74
 8008928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892c:	ab03      	add	r3, sp, #12
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	462a      	mov	r2, r5
 8008932:	4638      	mov	r0, r7
 8008934:	4b06      	ldr	r3, [pc, #24]	; (8008950 <_svfiprintf_r+0x1fc>)
 8008936:	a904      	add	r1, sp, #16
 8008938:	f7fc fd06 	bl	8005348 <_printf_i>
 800893c:	e7eb      	b.n	8008916 <_svfiprintf_r+0x1c2>
 800893e:	bf00      	nop
 8008940:	0800a10c 	.word	0x0800a10c
 8008944:	0800a112 	.word	0x0800a112
 8008948:	0800a116 	.word	0x0800a116
 800894c:	08004e11 	.word	0x08004e11
 8008950:	0800869d 	.word	0x0800869d

08008954 <nan>:
 8008954:	2000      	movs	r0, #0
 8008956:	4901      	ldr	r1, [pc, #4]	; (800895c <nan+0x8>)
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	7ff80000 	.word	0x7ff80000

08008960 <_sbrk_r>:
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	2300      	movs	r3, #0
 8008964:	4d05      	ldr	r5, [pc, #20]	; (800897c <_sbrk_r+0x1c>)
 8008966:	4604      	mov	r4, r0
 8008968:	4608      	mov	r0, r1
 800896a:	602b      	str	r3, [r5, #0]
 800896c:	f7f9 fcfe 	bl	800236c <_sbrk>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d102      	bne.n	800897a <_sbrk_r+0x1a>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	b103      	cbz	r3, 800897a <_sbrk_r+0x1a>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	20000724 	.word	0x20000724

08008980 <strncmp>:
 8008980:	4603      	mov	r3, r0
 8008982:	b510      	push	{r4, lr}
 8008984:	b172      	cbz	r2, 80089a4 <strncmp+0x24>
 8008986:	3901      	subs	r1, #1
 8008988:	1884      	adds	r4, r0, r2
 800898a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800898e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008992:	4290      	cmp	r0, r2
 8008994:	d101      	bne.n	800899a <strncmp+0x1a>
 8008996:	42a3      	cmp	r3, r4
 8008998:	d101      	bne.n	800899e <strncmp+0x1e>
 800899a:	1a80      	subs	r0, r0, r2
 800899c:	bd10      	pop	{r4, pc}
 800899e:	2800      	cmp	r0, #0
 80089a0:	d1f3      	bne.n	800898a <strncmp+0xa>
 80089a2:	e7fa      	b.n	800899a <strncmp+0x1a>
 80089a4:	4610      	mov	r0, r2
 80089a6:	e7f9      	b.n	800899c <strncmp+0x1c>

080089a8 <__ascii_wctomb>:
 80089a8:	4603      	mov	r3, r0
 80089aa:	4608      	mov	r0, r1
 80089ac:	b141      	cbz	r1, 80089c0 <__ascii_wctomb+0x18>
 80089ae:	2aff      	cmp	r2, #255	; 0xff
 80089b0:	d904      	bls.n	80089bc <__ascii_wctomb+0x14>
 80089b2:	228a      	movs	r2, #138	; 0x8a
 80089b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	4770      	bx	lr
 80089bc:	2001      	movs	r0, #1
 80089be:	700a      	strb	r2, [r1, #0]
 80089c0:	4770      	bx	lr
	...

080089c4 <__assert_func>:
 80089c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089c6:	4614      	mov	r4, r2
 80089c8:	461a      	mov	r2, r3
 80089ca:	4b09      	ldr	r3, [pc, #36]	; (80089f0 <__assert_func+0x2c>)
 80089cc:	4605      	mov	r5, r0
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68d8      	ldr	r0, [r3, #12]
 80089d2:	b14c      	cbz	r4, 80089e8 <__assert_func+0x24>
 80089d4:	4b07      	ldr	r3, [pc, #28]	; (80089f4 <__assert_func+0x30>)
 80089d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089da:	9100      	str	r1, [sp, #0]
 80089dc:	462b      	mov	r3, r5
 80089de:	4906      	ldr	r1, [pc, #24]	; (80089f8 <__assert_func+0x34>)
 80089e0:	f000 f80e 	bl	8008a00 <fiprintf>
 80089e4:	f000 fa8a 	bl	8008efc <abort>
 80089e8:	4b04      	ldr	r3, [pc, #16]	; (80089fc <__assert_func+0x38>)
 80089ea:	461c      	mov	r4, r3
 80089ec:	e7f3      	b.n	80089d6 <__assert_func+0x12>
 80089ee:	bf00      	nop
 80089f0:	20000014 	.word	0x20000014
 80089f4:	0800a11d 	.word	0x0800a11d
 80089f8:	0800a12a 	.word	0x0800a12a
 80089fc:	0800a158 	.word	0x0800a158

08008a00 <fiprintf>:
 8008a00:	b40e      	push	{r1, r2, r3}
 8008a02:	b503      	push	{r0, r1, lr}
 8008a04:	4601      	mov	r1, r0
 8008a06:	ab03      	add	r3, sp, #12
 8008a08:	4805      	ldr	r0, [pc, #20]	; (8008a20 <fiprintf+0x20>)
 8008a0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a0e:	6800      	ldr	r0, [r0, #0]
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	f000 f883 	bl	8008b1c <_vfiprintf_r>
 8008a16:	b002      	add	sp, #8
 8008a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a1c:	b003      	add	sp, #12
 8008a1e:	4770      	bx	lr
 8008a20:	20000014 	.word	0x20000014

08008a24 <memmove>:
 8008a24:	4288      	cmp	r0, r1
 8008a26:	b510      	push	{r4, lr}
 8008a28:	eb01 0402 	add.w	r4, r1, r2
 8008a2c:	d902      	bls.n	8008a34 <memmove+0x10>
 8008a2e:	4284      	cmp	r4, r0
 8008a30:	4623      	mov	r3, r4
 8008a32:	d807      	bhi.n	8008a44 <memmove+0x20>
 8008a34:	1e43      	subs	r3, r0, #1
 8008a36:	42a1      	cmp	r1, r4
 8008a38:	d008      	beq.n	8008a4c <memmove+0x28>
 8008a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a42:	e7f8      	b.n	8008a36 <memmove+0x12>
 8008a44:	4601      	mov	r1, r0
 8008a46:	4402      	add	r2, r0
 8008a48:	428a      	cmp	r2, r1
 8008a4a:	d100      	bne.n	8008a4e <memmove+0x2a>
 8008a4c:	bd10      	pop	{r4, pc}
 8008a4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a56:	e7f7      	b.n	8008a48 <memmove+0x24>

08008a58 <__malloc_lock>:
 8008a58:	4801      	ldr	r0, [pc, #4]	; (8008a60 <__malloc_lock+0x8>)
 8008a5a:	f000 bc0b 	b.w	8009274 <__retarget_lock_acquire_recursive>
 8008a5e:	bf00      	nop
 8008a60:	20000728 	.word	0x20000728

08008a64 <__malloc_unlock>:
 8008a64:	4801      	ldr	r0, [pc, #4]	; (8008a6c <__malloc_unlock+0x8>)
 8008a66:	f000 bc06 	b.w	8009276 <__retarget_lock_release_recursive>
 8008a6a:	bf00      	nop
 8008a6c:	20000728 	.word	0x20000728

08008a70 <_realloc_r>:
 8008a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a74:	4680      	mov	r8, r0
 8008a76:	4614      	mov	r4, r2
 8008a78:	460e      	mov	r6, r1
 8008a7a:	b921      	cbnz	r1, 8008a86 <_realloc_r+0x16>
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a82:	f7ff bd97 	b.w	80085b4 <_malloc_r>
 8008a86:	b92a      	cbnz	r2, 8008a94 <_realloc_r+0x24>
 8008a88:	f7ff fd2c 	bl	80084e4 <_free_r>
 8008a8c:	4625      	mov	r5, r4
 8008a8e:	4628      	mov	r0, r5
 8008a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a94:	f000 fc56 	bl	8009344 <_malloc_usable_size_r>
 8008a98:	4284      	cmp	r4, r0
 8008a9a:	4607      	mov	r7, r0
 8008a9c:	d802      	bhi.n	8008aa4 <_realloc_r+0x34>
 8008a9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008aa2:	d812      	bhi.n	8008aca <_realloc_r+0x5a>
 8008aa4:	4621      	mov	r1, r4
 8008aa6:	4640      	mov	r0, r8
 8008aa8:	f7ff fd84 	bl	80085b4 <_malloc_r>
 8008aac:	4605      	mov	r5, r0
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d0ed      	beq.n	8008a8e <_realloc_r+0x1e>
 8008ab2:	42bc      	cmp	r4, r7
 8008ab4:	4622      	mov	r2, r4
 8008ab6:	4631      	mov	r1, r6
 8008ab8:	bf28      	it	cs
 8008aba:	463a      	movcs	r2, r7
 8008abc:	f7ff f838 	bl	8007b30 <memcpy>
 8008ac0:	4631      	mov	r1, r6
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	f7ff fd0e 	bl	80084e4 <_free_r>
 8008ac8:	e7e1      	b.n	8008a8e <_realloc_r+0x1e>
 8008aca:	4635      	mov	r5, r6
 8008acc:	e7df      	b.n	8008a8e <_realloc_r+0x1e>

08008ace <__sfputc_r>:
 8008ace:	6893      	ldr	r3, [r2, #8]
 8008ad0:	b410      	push	{r4}
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	6093      	str	r3, [r2, #8]
 8008ad8:	da07      	bge.n	8008aea <__sfputc_r+0x1c>
 8008ada:	6994      	ldr	r4, [r2, #24]
 8008adc:	42a3      	cmp	r3, r4
 8008ade:	db01      	blt.n	8008ae4 <__sfputc_r+0x16>
 8008ae0:	290a      	cmp	r1, #10
 8008ae2:	d102      	bne.n	8008aea <__sfputc_r+0x1c>
 8008ae4:	bc10      	pop	{r4}
 8008ae6:	f000 b949 	b.w	8008d7c <__swbuf_r>
 8008aea:	6813      	ldr	r3, [r2, #0]
 8008aec:	1c58      	adds	r0, r3, #1
 8008aee:	6010      	str	r0, [r2, #0]
 8008af0:	7019      	strb	r1, [r3, #0]
 8008af2:	4608      	mov	r0, r1
 8008af4:	bc10      	pop	{r4}
 8008af6:	4770      	bx	lr

08008af8 <__sfputs_r>:
 8008af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afa:	4606      	mov	r6, r0
 8008afc:	460f      	mov	r7, r1
 8008afe:	4614      	mov	r4, r2
 8008b00:	18d5      	adds	r5, r2, r3
 8008b02:	42ac      	cmp	r4, r5
 8008b04:	d101      	bne.n	8008b0a <__sfputs_r+0x12>
 8008b06:	2000      	movs	r0, #0
 8008b08:	e007      	b.n	8008b1a <__sfputs_r+0x22>
 8008b0a:	463a      	mov	r2, r7
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b12:	f7ff ffdc 	bl	8008ace <__sfputc_r>
 8008b16:	1c43      	adds	r3, r0, #1
 8008b18:	d1f3      	bne.n	8008b02 <__sfputs_r+0xa>
 8008b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b1c <_vfiprintf_r>:
 8008b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b20:	460d      	mov	r5, r1
 8008b22:	4614      	mov	r4, r2
 8008b24:	4698      	mov	r8, r3
 8008b26:	4606      	mov	r6, r0
 8008b28:	b09d      	sub	sp, #116	; 0x74
 8008b2a:	b118      	cbz	r0, 8008b34 <_vfiprintf_r+0x18>
 8008b2c:	6983      	ldr	r3, [r0, #24]
 8008b2e:	b90b      	cbnz	r3, 8008b34 <_vfiprintf_r+0x18>
 8008b30:	f000 fb02 	bl	8009138 <__sinit>
 8008b34:	4b89      	ldr	r3, [pc, #548]	; (8008d5c <_vfiprintf_r+0x240>)
 8008b36:	429d      	cmp	r5, r3
 8008b38:	d11b      	bne.n	8008b72 <_vfiprintf_r+0x56>
 8008b3a:	6875      	ldr	r5, [r6, #4]
 8008b3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b3e:	07d9      	lsls	r1, r3, #31
 8008b40:	d405      	bmi.n	8008b4e <_vfiprintf_r+0x32>
 8008b42:	89ab      	ldrh	r3, [r5, #12]
 8008b44:	059a      	lsls	r2, r3, #22
 8008b46:	d402      	bmi.n	8008b4e <_vfiprintf_r+0x32>
 8008b48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b4a:	f000 fb93 	bl	8009274 <__retarget_lock_acquire_recursive>
 8008b4e:	89ab      	ldrh	r3, [r5, #12]
 8008b50:	071b      	lsls	r3, r3, #28
 8008b52:	d501      	bpl.n	8008b58 <_vfiprintf_r+0x3c>
 8008b54:	692b      	ldr	r3, [r5, #16]
 8008b56:	b9eb      	cbnz	r3, 8008b94 <_vfiprintf_r+0x78>
 8008b58:	4629      	mov	r1, r5
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f000 f960 	bl	8008e20 <__swsetup_r>
 8008b60:	b1c0      	cbz	r0, 8008b94 <_vfiprintf_r+0x78>
 8008b62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b64:	07dc      	lsls	r4, r3, #31
 8008b66:	d50e      	bpl.n	8008b86 <_vfiprintf_r+0x6a>
 8008b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b6c:	b01d      	add	sp, #116	; 0x74
 8008b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b72:	4b7b      	ldr	r3, [pc, #492]	; (8008d60 <_vfiprintf_r+0x244>)
 8008b74:	429d      	cmp	r5, r3
 8008b76:	d101      	bne.n	8008b7c <_vfiprintf_r+0x60>
 8008b78:	68b5      	ldr	r5, [r6, #8]
 8008b7a:	e7df      	b.n	8008b3c <_vfiprintf_r+0x20>
 8008b7c:	4b79      	ldr	r3, [pc, #484]	; (8008d64 <_vfiprintf_r+0x248>)
 8008b7e:	429d      	cmp	r5, r3
 8008b80:	bf08      	it	eq
 8008b82:	68f5      	ldreq	r5, [r6, #12]
 8008b84:	e7da      	b.n	8008b3c <_vfiprintf_r+0x20>
 8008b86:	89ab      	ldrh	r3, [r5, #12]
 8008b88:	0598      	lsls	r0, r3, #22
 8008b8a:	d4ed      	bmi.n	8008b68 <_vfiprintf_r+0x4c>
 8008b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b8e:	f000 fb72 	bl	8009276 <__retarget_lock_release_recursive>
 8008b92:	e7e9      	b.n	8008b68 <_vfiprintf_r+0x4c>
 8008b94:	2300      	movs	r3, #0
 8008b96:	9309      	str	r3, [sp, #36]	; 0x24
 8008b98:	2320      	movs	r3, #32
 8008b9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b9e:	2330      	movs	r3, #48	; 0x30
 8008ba0:	f04f 0901 	mov.w	r9, #1
 8008ba4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ba8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008d68 <_vfiprintf_r+0x24c>
 8008bac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bb0:	4623      	mov	r3, r4
 8008bb2:	469a      	mov	sl, r3
 8008bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bb8:	b10a      	cbz	r2, 8008bbe <_vfiprintf_r+0xa2>
 8008bba:	2a25      	cmp	r2, #37	; 0x25
 8008bbc:	d1f9      	bne.n	8008bb2 <_vfiprintf_r+0x96>
 8008bbe:	ebba 0b04 	subs.w	fp, sl, r4
 8008bc2:	d00b      	beq.n	8008bdc <_vfiprintf_r+0xc0>
 8008bc4:	465b      	mov	r3, fp
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	4629      	mov	r1, r5
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f7ff ff94 	bl	8008af8 <__sfputs_r>
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	f000 80aa 	beq.w	8008d2a <_vfiprintf_r+0x20e>
 8008bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bd8:	445a      	add	r2, fp
 8008bda:	9209      	str	r2, [sp, #36]	; 0x24
 8008bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 80a2 	beq.w	8008d2a <_vfiprintf_r+0x20e>
 8008be6:	2300      	movs	r3, #0
 8008be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bf0:	f10a 0a01 	add.w	sl, sl, #1
 8008bf4:	9304      	str	r3, [sp, #16]
 8008bf6:	9307      	str	r3, [sp, #28]
 8008bf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bfc:	931a      	str	r3, [sp, #104]	; 0x68
 8008bfe:	4654      	mov	r4, sl
 8008c00:	2205      	movs	r2, #5
 8008c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c06:	4858      	ldr	r0, [pc, #352]	; (8008d68 <_vfiprintf_r+0x24c>)
 8008c08:	f7fe ff84 	bl	8007b14 <memchr>
 8008c0c:	9a04      	ldr	r2, [sp, #16]
 8008c0e:	b9d8      	cbnz	r0, 8008c48 <_vfiprintf_r+0x12c>
 8008c10:	06d1      	lsls	r1, r2, #27
 8008c12:	bf44      	itt	mi
 8008c14:	2320      	movmi	r3, #32
 8008c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c1a:	0713      	lsls	r3, r2, #28
 8008c1c:	bf44      	itt	mi
 8008c1e:	232b      	movmi	r3, #43	; 0x2b
 8008c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c24:	f89a 3000 	ldrb.w	r3, [sl]
 8008c28:	2b2a      	cmp	r3, #42	; 0x2a
 8008c2a:	d015      	beq.n	8008c58 <_vfiprintf_r+0x13c>
 8008c2c:	4654      	mov	r4, sl
 8008c2e:	2000      	movs	r0, #0
 8008c30:	f04f 0c0a 	mov.w	ip, #10
 8008c34:	9a07      	ldr	r2, [sp, #28]
 8008c36:	4621      	mov	r1, r4
 8008c38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c3c:	3b30      	subs	r3, #48	; 0x30
 8008c3e:	2b09      	cmp	r3, #9
 8008c40:	d94e      	bls.n	8008ce0 <_vfiprintf_r+0x1c4>
 8008c42:	b1b0      	cbz	r0, 8008c72 <_vfiprintf_r+0x156>
 8008c44:	9207      	str	r2, [sp, #28]
 8008c46:	e014      	b.n	8008c72 <_vfiprintf_r+0x156>
 8008c48:	eba0 0308 	sub.w	r3, r0, r8
 8008c4c:	fa09 f303 	lsl.w	r3, r9, r3
 8008c50:	4313      	orrs	r3, r2
 8008c52:	46a2      	mov	sl, r4
 8008c54:	9304      	str	r3, [sp, #16]
 8008c56:	e7d2      	b.n	8008bfe <_vfiprintf_r+0xe2>
 8008c58:	9b03      	ldr	r3, [sp, #12]
 8008c5a:	1d19      	adds	r1, r3, #4
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	9103      	str	r1, [sp, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	bfbb      	ittet	lt
 8008c64:	425b      	neglt	r3, r3
 8008c66:	f042 0202 	orrlt.w	r2, r2, #2
 8008c6a:	9307      	strge	r3, [sp, #28]
 8008c6c:	9307      	strlt	r3, [sp, #28]
 8008c6e:	bfb8      	it	lt
 8008c70:	9204      	strlt	r2, [sp, #16]
 8008c72:	7823      	ldrb	r3, [r4, #0]
 8008c74:	2b2e      	cmp	r3, #46	; 0x2e
 8008c76:	d10c      	bne.n	8008c92 <_vfiprintf_r+0x176>
 8008c78:	7863      	ldrb	r3, [r4, #1]
 8008c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c7c:	d135      	bne.n	8008cea <_vfiprintf_r+0x1ce>
 8008c7e:	9b03      	ldr	r3, [sp, #12]
 8008c80:	3402      	adds	r4, #2
 8008c82:	1d1a      	adds	r2, r3, #4
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	9203      	str	r2, [sp, #12]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	bfb8      	it	lt
 8008c8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008c90:	9305      	str	r3, [sp, #20]
 8008c92:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008d6c <_vfiprintf_r+0x250>
 8008c96:	2203      	movs	r2, #3
 8008c98:	4650      	mov	r0, sl
 8008c9a:	7821      	ldrb	r1, [r4, #0]
 8008c9c:	f7fe ff3a 	bl	8007b14 <memchr>
 8008ca0:	b140      	cbz	r0, 8008cb4 <_vfiprintf_r+0x198>
 8008ca2:	2340      	movs	r3, #64	; 0x40
 8008ca4:	eba0 000a 	sub.w	r0, r0, sl
 8008ca8:	fa03 f000 	lsl.w	r0, r3, r0
 8008cac:	9b04      	ldr	r3, [sp, #16]
 8008cae:	3401      	adds	r4, #1
 8008cb0:	4303      	orrs	r3, r0
 8008cb2:	9304      	str	r3, [sp, #16]
 8008cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cb8:	2206      	movs	r2, #6
 8008cba:	482d      	ldr	r0, [pc, #180]	; (8008d70 <_vfiprintf_r+0x254>)
 8008cbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cc0:	f7fe ff28 	bl	8007b14 <memchr>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	d03f      	beq.n	8008d48 <_vfiprintf_r+0x22c>
 8008cc8:	4b2a      	ldr	r3, [pc, #168]	; (8008d74 <_vfiprintf_r+0x258>)
 8008cca:	bb1b      	cbnz	r3, 8008d14 <_vfiprintf_r+0x1f8>
 8008ccc:	9b03      	ldr	r3, [sp, #12]
 8008cce:	3307      	adds	r3, #7
 8008cd0:	f023 0307 	bic.w	r3, r3, #7
 8008cd4:	3308      	adds	r3, #8
 8008cd6:	9303      	str	r3, [sp, #12]
 8008cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cda:	443b      	add	r3, r7
 8008cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8008cde:	e767      	b.n	8008bb0 <_vfiprintf_r+0x94>
 8008ce0:	460c      	mov	r4, r1
 8008ce2:	2001      	movs	r0, #1
 8008ce4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ce8:	e7a5      	b.n	8008c36 <_vfiprintf_r+0x11a>
 8008cea:	2300      	movs	r3, #0
 8008cec:	f04f 0c0a 	mov.w	ip, #10
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	3401      	adds	r4, #1
 8008cf4:	9305      	str	r3, [sp, #20]
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cfc:	3a30      	subs	r2, #48	; 0x30
 8008cfe:	2a09      	cmp	r2, #9
 8008d00:	d903      	bls.n	8008d0a <_vfiprintf_r+0x1ee>
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d0c5      	beq.n	8008c92 <_vfiprintf_r+0x176>
 8008d06:	9105      	str	r1, [sp, #20]
 8008d08:	e7c3      	b.n	8008c92 <_vfiprintf_r+0x176>
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d12:	e7f0      	b.n	8008cf6 <_vfiprintf_r+0x1da>
 8008d14:	ab03      	add	r3, sp, #12
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	462a      	mov	r2, r5
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	4b16      	ldr	r3, [pc, #88]	; (8008d78 <_vfiprintf_r+0x25c>)
 8008d1e:	a904      	add	r1, sp, #16
 8008d20:	f7fc f876 	bl	8004e10 <_printf_float>
 8008d24:	4607      	mov	r7, r0
 8008d26:	1c78      	adds	r0, r7, #1
 8008d28:	d1d6      	bne.n	8008cd8 <_vfiprintf_r+0x1bc>
 8008d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d2c:	07d9      	lsls	r1, r3, #31
 8008d2e:	d405      	bmi.n	8008d3c <_vfiprintf_r+0x220>
 8008d30:	89ab      	ldrh	r3, [r5, #12]
 8008d32:	059a      	lsls	r2, r3, #22
 8008d34:	d402      	bmi.n	8008d3c <_vfiprintf_r+0x220>
 8008d36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d38:	f000 fa9d 	bl	8009276 <__retarget_lock_release_recursive>
 8008d3c:	89ab      	ldrh	r3, [r5, #12]
 8008d3e:	065b      	lsls	r3, r3, #25
 8008d40:	f53f af12 	bmi.w	8008b68 <_vfiprintf_r+0x4c>
 8008d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d46:	e711      	b.n	8008b6c <_vfiprintf_r+0x50>
 8008d48:	ab03      	add	r3, sp, #12
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	462a      	mov	r2, r5
 8008d4e:	4630      	mov	r0, r6
 8008d50:	4b09      	ldr	r3, [pc, #36]	; (8008d78 <_vfiprintf_r+0x25c>)
 8008d52:	a904      	add	r1, sp, #16
 8008d54:	f7fc faf8 	bl	8005348 <_printf_i>
 8008d58:	e7e4      	b.n	8008d24 <_vfiprintf_r+0x208>
 8008d5a:	bf00      	nop
 8008d5c:	0800a17c 	.word	0x0800a17c
 8008d60:	0800a19c 	.word	0x0800a19c
 8008d64:	0800a15c 	.word	0x0800a15c
 8008d68:	0800a10c 	.word	0x0800a10c
 8008d6c:	0800a112 	.word	0x0800a112
 8008d70:	0800a116 	.word	0x0800a116
 8008d74:	08004e11 	.word	0x08004e11
 8008d78:	08008af9 	.word	0x08008af9

08008d7c <__swbuf_r>:
 8008d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7e:	460e      	mov	r6, r1
 8008d80:	4614      	mov	r4, r2
 8008d82:	4605      	mov	r5, r0
 8008d84:	b118      	cbz	r0, 8008d8e <__swbuf_r+0x12>
 8008d86:	6983      	ldr	r3, [r0, #24]
 8008d88:	b90b      	cbnz	r3, 8008d8e <__swbuf_r+0x12>
 8008d8a:	f000 f9d5 	bl	8009138 <__sinit>
 8008d8e:	4b21      	ldr	r3, [pc, #132]	; (8008e14 <__swbuf_r+0x98>)
 8008d90:	429c      	cmp	r4, r3
 8008d92:	d12b      	bne.n	8008dec <__swbuf_r+0x70>
 8008d94:	686c      	ldr	r4, [r5, #4]
 8008d96:	69a3      	ldr	r3, [r4, #24]
 8008d98:	60a3      	str	r3, [r4, #8]
 8008d9a:	89a3      	ldrh	r3, [r4, #12]
 8008d9c:	071a      	lsls	r2, r3, #28
 8008d9e:	d52f      	bpl.n	8008e00 <__swbuf_r+0x84>
 8008da0:	6923      	ldr	r3, [r4, #16]
 8008da2:	b36b      	cbz	r3, 8008e00 <__swbuf_r+0x84>
 8008da4:	6923      	ldr	r3, [r4, #16]
 8008da6:	6820      	ldr	r0, [r4, #0]
 8008da8:	b2f6      	uxtb	r6, r6
 8008daa:	1ac0      	subs	r0, r0, r3
 8008dac:	6963      	ldr	r3, [r4, #20]
 8008dae:	4637      	mov	r7, r6
 8008db0:	4283      	cmp	r3, r0
 8008db2:	dc04      	bgt.n	8008dbe <__swbuf_r+0x42>
 8008db4:	4621      	mov	r1, r4
 8008db6:	4628      	mov	r0, r5
 8008db8:	f000 f92a 	bl	8009010 <_fflush_r>
 8008dbc:	bb30      	cbnz	r0, 8008e0c <__swbuf_r+0x90>
 8008dbe:	68a3      	ldr	r3, [r4, #8]
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	60a3      	str	r3, [r4, #8]
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	1c5a      	adds	r2, r3, #1
 8008dca:	6022      	str	r2, [r4, #0]
 8008dcc:	701e      	strb	r6, [r3, #0]
 8008dce:	6963      	ldr	r3, [r4, #20]
 8008dd0:	4283      	cmp	r3, r0
 8008dd2:	d004      	beq.n	8008dde <__swbuf_r+0x62>
 8008dd4:	89a3      	ldrh	r3, [r4, #12]
 8008dd6:	07db      	lsls	r3, r3, #31
 8008dd8:	d506      	bpl.n	8008de8 <__swbuf_r+0x6c>
 8008dda:	2e0a      	cmp	r6, #10
 8008ddc:	d104      	bne.n	8008de8 <__swbuf_r+0x6c>
 8008dde:	4621      	mov	r1, r4
 8008de0:	4628      	mov	r0, r5
 8008de2:	f000 f915 	bl	8009010 <_fflush_r>
 8008de6:	b988      	cbnz	r0, 8008e0c <__swbuf_r+0x90>
 8008de8:	4638      	mov	r0, r7
 8008dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dec:	4b0a      	ldr	r3, [pc, #40]	; (8008e18 <__swbuf_r+0x9c>)
 8008dee:	429c      	cmp	r4, r3
 8008df0:	d101      	bne.n	8008df6 <__swbuf_r+0x7a>
 8008df2:	68ac      	ldr	r4, [r5, #8]
 8008df4:	e7cf      	b.n	8008d96 <__swbuf_r+0x1a>
 8008df6:	4b09      	ldr	r3, [pc, #36]	; (8008e1c <__swbuf_r+0xa0>)
 8008df8:	429c      	cmp	r4, r3
 8008dfa:	bf08      	it	eq
 8008dfc:	68ec      	ldreq	r4, [r5, #12]
 8008dfe:	e7ca      	b.n	8008d96 <__swbuf_r+0x1a>
 8008e00:	4621      	mov	r1, r4
 8008e02:	4628      	mov	r0, r5
 8008e04:	f000 f80c 	bl	8008e20 <__swsetup_r>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d0cb      	beq.n	8008da4 <__swbuf_r+0x28>
 8008e0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008e10:	e7ea      	b.n	8008de8 <__swbuf_r+0x6c>
 8008e12:	bf00      	nop
 8008e14:	0800a17c 	.word	0x0800a17c
 8008e18:	0800a19c 	.word	0x0800a19c
 8008e1c:	0800a15c 	.word	0x0800a15c

08008e20 <__swsetup_r>:
 8008e20:	4b32      	ldr	r3, [pc, #200]	; (8008eec <__swsetup_r+0xcc>)
 8008e22:	b570      	push	{r4, r5, r6, lr}
 8008e24:	681d      	ldr	r5, [r3, #0]
 8008e26:	4606      	mov	r6, r0
 8008e28:	460c      	mov	r4, r1
 8008e2a:	b125      	cbz	r5, 8008e36 <__swsetup_r+0x16>
 8008e2c:	69ab      	ldr	r3, [r5, #24]
 8008e2e:	b913      	cbnz	r3, 8008e36 <__swsetup_r+0x16>
 8008e30:	4628      	mov	r0, r5
 8008e32:	f000 f981 	bl	8009138 <__sinit>
 8008e36:	4b2e      	ldr	r3, [pc, #184]	; (8008ef0 <__swsetup_r+0xd0>)
 8008e38:	429c      	cmp	r4, r3
 8008e3a:	d10f      	bne.n	8008e5c <__swsetup_r+0x3c>
 8008e3c:	686c      	ldr	r4, [r5, #4]
 8008e3e:	89a3      	ldrh	r3, [r4, #12]
 8008e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e44:	0719      	lsls	r1, r3, #28
 8008e46:	d42c      	bmi.n	8008ea2 <__swsetup_r+0x82>
 8008e48:	06dd      	lsls	r5, r3, #27
 8008e4a:	d411      	bmi.n	8008e70 <__swsetup_r+0x50>
 8008e4c:	2309      	movs	r3, #9
 8008e4e:	6033      	str	r3, [r6, #0]
 8008e50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e58:	81a3      	strh	r3, [r4, #12]
 8008e5a:	e03e      	b.n	8008eda <__swsetup_r+0xba>
 8008e5c:	4b25      	ldr	r3, [pc, #148]	; (8008ef4 <__swsetup_r+0xd4>)
 8008e5e:	429c      	cmp	r4, r3
 8008e60:	d101      	bne.n	8008e66 <__swsetup_r+0x46>
 8008e62:	68ac      	ldr	r4, [r5, #8]
 8008e64:	e7eb      	b.n	8008e3e <__swsetup_r+0x1e>
 8008e66:	4b24      	ldr	r3, [pc, #144]	; (8008ef8 <__swsetup_r+0xd8>)
 8008e68:	429c      	cmp	r4, r3
 8008e6a:	bf08      	it	eq
 8008e6c:	68ec      	ldreq	r4, [r5, #12]
 8008e6e:	e7e6      	b.n	8008e3e <__swsetup_r+0x1e>
 8008e70:	0758      	lsls	r0, r3, #29
 8008e72:	d512      	bpl.n	8008e9a <__swsetup_r+0x7a>
 8008e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e76:	b141      	cbz	r1, 8008e8a <__swsetup_r+0x6a>
 8008e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e7c:	4299      	cmp	r1, r3
 8008e7e:	d002      	beq.n	8008e86 <__swsetup_r+0x66>
 8008e80:	4630      	mov	r0, r6
 8008e82:	f7ff fb2f 	bl	80084e4 <_free_r>
 8008e86:	2300      	movs	r3, #0
 8008e88:	6363      	str	r3, [r4, #52]	; 0x34
 8008e8a:	89a3      	ldrh	r3, [r4, #12]
 8008e8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e90:	81a3      	strh	r3, [r4, #12]
 8008e92:	2300      	movs	r3, #0
 8008e94:	6063      	str	r3, [r4, #4]
 8008e96:	6923      	ldr	r3, [r4, #16]
 8008e98:	6023      	str	r3, [r4, #0]
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	f043 0308 	orr.w	r3, r3, #8
 8008ea0:	81a3      	strh	r3, [r4, #12]
 8008ea2:	6923      	ldr	r3, [r4, #16]
 8008ea4:	b94b      	cbnz	r3, 8008eba <__swsetup_r+0x9a>
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eb0:	d003      	beq.n	8008eba <__swsetup_r+0x9a>
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f000 fa05 	bl	80092c4 <__smakebuf_r>
 8008eba:	89a0      	ldrh	r0, [r4, #12]
 8008ebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ec0:	f010 0301 	ands.w	r3, r0, #1
 8008ec4:	d00a      	beq.n	8008edc <__swsetup_r+0xbc>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	60a3      	str	r3, [r4, #8]
 8008eca:	6963      	ldr	r3, [r4, #20]
 8008ecc:	425b      	negs	r3, r3
 8008ece:	61a3      	str	r3, [r4, #24]
 8008ed0:	6923      	ldr	r3, [r4, #16]
 8008ed2:	b943      	cbnz	r3, 8008ee6 <__swsetup_r+0xc6>
 8008ed4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ed8:	d1ba      	bne.n	8008e50 <__swsetup_r+0x30>
 8008eda:	bd70      	pop	{r4, r5, r6, pc}
 8008edc:	0781      	lsls	r1, r0, #30
 8008ede:	bf58      	it	pl
 8008ee0:	6963      	ldrpl	r3, [r4, #20]
 8008ee2:	60a3      	str	r3, [r4, #8]
 8008ee4:	e7f4      	b.n	8008ed0 <__swsetup_r+0xb0>
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	e7f7      	b.n	8008eda <__swsetup_r+0xba>
 8008eea:	bf00      	nop
 8008eec:	20000014 	.word	0x20000014
 8008ef0:	0800a17c 	.word	0x0800a17c
 8008ef4:	0800a19c 	.word	0x0800a19c
 8008ef8:	0800a15c 	.word	0x0800a15c

08008efc <abort>:
 8008efc:	2006      	movs	r0, #6
 8008efe:	b508      	push	{r3, lr}
 8008f00:	f000 fa50 	bl	80093a4 <raise>
 8008f04:	2001      	movs	r0, #1
 8008f06:	f7f9 f9be 	bl	8002286 <_exit>
	...

08008f0c <__sflush_r>:
 8008f0c:	898a      	ldrh	r2, [r1, #12]
 8008f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f10:	4605      	mov	r5, r0
 8008f12:	0710      	lsls	r0, r2, #28
 8008f14:	460c      	mov	r4, r1
 8008f16:	d457      	bmi.n	8008fc8 <__sflush_r+0xbc>
 8008f18:	684b      	ldr	r3, [r1, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	dc04      	bgt.n	8008f28 <__sflush_r+0x1c>
 8008f1e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	dc01      	bgt.n	8008f28 <__sflush_r+0x1c>
 8008f24:	2000      	movs	r0, #0
 8008f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f2a:	2e00      	cmp	r6, #0
 8008f2c:	d0fa      	beq.n	8008f24 <__sflush_r+0x18>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f34:	682f      	ldr	r7, [r5, #0]
 8008f36:	602b      	str	r3, [r5, #0]
 8008f38:	d032      	beq.n	8008fa0 <__sflush_r+0x94>
 8008f3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	075a      	lsls	r2, r3, #29
 8008f40:	d505      	bpl.n	8008f4e <__sflush_r+0x42>
 8008f42:	6863      	ldr	r3, [r4, #4]
 8008f44:	1ac0      	subs	r0, r0, r3
 8008f46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f48:	b10b      	cbz	r3, 8008f4e <__sflush_r+0x42>
 8008f4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f4c:	1ac0      	subs	r0, r0, r3
 8008f4e:	2300      	movs	r3, #0
 8008f50:	4602      	mov	r2, r0
 8008f52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f54:	4628      	mov	r0, r5
 8008f56:	6a21      	ldr	r1, [r4, #32]
 8008f58:	47b0      	blx	r6
 8008f5a:	1c43      	adds	r3, r0, #1
 8008f5c:	89a3      	ldrh	r3, [r4, #12]
 8008f5e:	d106      	bne.n	8008f6e <__sflush_r+0x62>
 8008f60:	6829      	ldr	r1, [r5, #0]
 8008f62:	291d      	cmp	r1, #29
 8008f64:	d82c      	bhi.n	8008fc0 <__sflush_r+0xb4>
 8008f66:	4a29      	ldr	r2, [pc, #164]	; (800900c <__sflush_r+0x100>)
 8008f68:	40ca      	lsrs	r2, r1
 8008f6a:	07d6      	lsls	r6, r2, #31
 8008f6c:	d528      	bpl.n	8008fc0 <__sflush_r+0xb4>
 8008f6e:	2200      	movs	r2, #0
 8008f70:	6062      	str	r2, [r4, #4]
 8008f72:	6922      	ldr	r2, [r4, #16]
 8008f74:	04d9      	lsls	r1, r3, #19
 8008f76:	6022      	str	r2, [r4, #0]
 8008f78:	d504      	bpl.n	8008f84 <__sflush_r+0x78>
 8008f7a:	1c42      	adds	r2, r0, #1
 8008f7c:	d101      	bne.n	8008f82 <__sflush_r+0x76>
 8008f7e:	682b      	ldr	r3, [r5, #0]
 8008f80:	b903      	cbnz	r3, 8008f84 <__sflush_r+0x78>
 8008f82:	6560      	str	r0, [r4, #84]	; 0x54
 8008f84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f86:	602f      	str	r7, [r5, #0]
 8008f88:	2900      	cmp	r1, #0
 8008f8a:	d0cb      	beq.n	8008f24 <__sflush_r+0x18>
 8008f8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f90:	4299      	cmp	r1, r3
 8008f92:	d002      	beq.n	8008f9a <__sflush_r+0x8e>
 8008f94:	4628      	mov	r0, r5
 8008f96:	f7ff faa5 	bl	80084e4 <_free_r>
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	6360      	str	r0, [r4, #52]	; 0x34
 8008f9e:	e7c2      	b.n	8008f26 <__sflush_r+0x1a>
 8008fa0:	6a21      	ldr	r1, [r4, #32]
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	47b0      	blx	r6
 8008fa8:	1c41      	adds	r1, r0, #1
 8008faa:	d1c7      	bne.n	8008f3c <__sflush_r+0x30>
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d0c4      	beq.n	8008f3c <__sflush_r+0x30>
 8008fb2:	2b1d      	cmp	r3, #29
 8008fb4:	d001      	beq.n	8008fba <__sflush_r+0xae>
 8008fb6:	2b16      	cmp	r3, #22
 8008fb8:	d101      	bne.n	8008fbe <__sflush_r+0xb2>
 8008fba:	602f      	str	r7, [r5, #0]
 8008fbc:	e7b2      	b.n	8008f24 <__sflush_r+0x18>
 8008fbe:	89a3      	ldrh	r3, [r4, #12]
 8008fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fc4:	81a3      	strh	r3, [r4, #12]
 8008fc6:	e7ae      	b.n	8008f26 <__sflush_r+0x1a>
 8008fc8:	690f      	ldr	r7, [r1, #16]
 8008fca:	2f00      	cmp	r7, #0
 8008fcc:	d0aa      	beq.n	8008f24 <__sflush_r+0x18>
 8008fce:	0793      	lsls	r3, r2, #30
 8008fd0:	bf18      	it	ne
 8008fd2:	2300      	movne	r3, #0
 8008fd4:	680e      	ldr	r6, [r1, #0]
 8008fd6:	bf08      	it	eq
 8008fd8:	694b      	ldreq	r3, [r1, #20]
 8008fda:	1bf6      	subs	r6, r6, r7
 8008fdc:	600f      	str	r7, [r1, #0]
 8008fde:	608b      	str	r3, [r1, #8]
 8008fe0:	2e00      	cmp	r6, #0
 8008fe2:	dd9f      	ble.n	8008f24 <__sflush_r+0x18>
 8008fe4:	4633      	mov	r3, r6
 8008fe6:	463a      	mov	r2, r7
 8008fe8:	4628      	mov	r0, r5
 8008fea:	6a21      	ldr	r1, [r4, #32]
 8008fec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008ff0:	47e0      	blx	ip
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	dc06      	bgt.n	8009004 <__sflush_r+0xf8>
 8008ff6:	89a3      	ldrh	r3, [r4, #12]
 8008ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009000:	81a3      	strh	r3, [r4, #12]
 8009002:	e790      	b.n	8008f26 <__sflush_r+0x1a>
 8009004:	4407      	add	r7, r0
 8009006:	1a36      	subs	r6, r6, r0
 8009008:	e7ea      	b.n	8008fe0 <__sflush_r+0xd4>
 800900a:	bf00      	nop
 800900c:	20400001 	.word	0x20400001

08009010 <_fflush_r>:
 8009010:	b538      	push	{r3, r4, r5, lr}
 8009012:	690b      	ldr	r3, [r1, #16]
 8009014:	4605      	mov	r5, r0
 8009016:	460c      	mov	r4, r1
 8009018:	b913      	cbnz	r3, 8009020 <_fflush_r+0x10>
 800901a:	2500      	movs	r5, #0
 800901c:	4628      	mov	r0, r5
 800901e:	bd38      	pop	{r3, r4, r5, pc}
 8009020:	b118      	cbz	r0, 800902a <_fflush_r+0x1a>
 8009022:	6983      	ldr	r3, [r0, #24]
 8009024:	b90b      	cbnz	r3, 800902a <_fflush_r+0x1a>
 8009026:	f000 f887 	bl	8009138 <__sinit>
 800902a:	4b14      	ldr	r3, [pc, #80]	; (800907c <_fflush_r+0x6c>)
 800902c:	429c      	cmp	r4, r3
 800902e:	d11b      	bne.n	8009068 <_fflush_r+0x58>
 8009030:	686c      	ldr	r4, [r5, #4]
 8009032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d0ef      	beq.n	800901a <_fflush_r+0xa>
 800903a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800903c:	07d0      	lsls	r0, r2, #31
 800903e:	d404      	bmi.n	800904a <_fflush_r+0x3a>
 8009040:	0599      	lsls	r1, r3, #22
 8009042:	d402      	bmi.n	800904a <_fflush_r+0x3a>
 8009044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009046:	f000 f915 	bl	8009274 <__retarget_lock_acquire_recursive>
 800904a:	4628      	mov	r0, r5
 800904c:	4621      	mov	r1, r4
 800904e:	f7ff ff5d 	bl	8008f0c <__sflush_r>
 8009052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009054:	4605      	mov	r5, r0
 8009056:	07da      	lsls	r2, r3, #31
 8009058:	d4e0      	bmi.n	800901c <_fflush_r+0xc>
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	059b      	lsls	r3, r3, #22
 800905e:	d4dd      	bmi.n	800901c <_fflush_r+0xc>
 8009060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009062:	f000 f908 	bl	8009276 <__retarget_lock_release_recursive>
 8009066:	e7d9      	b.n	800901c <_fflush_r+0xc>
 8009068:	4b05      	ldr	r3, [pc, #20]	; (8009080 <_fflush_r+0x70>)
 800906a:	429c      	cmp	r4, r3
 800906c:	d101      	bne.n	8009072 <_fflush_r+0x62>
 800906e:	68ac      	ldr	r4, [r5, #8]
 8009070:	e7df      	b.n	8009032 <_fflush_r+0x22>
 8009072:	4b04      	ldr	r3, [pc, #16]	; (8009084 <_fflush_r+0x74>)
 8009074:	429c      	cmp	r4, r3
 8009076:	bf08      	it	eq
 8009078:	68ec      	ldreq	r4, [r5, #12]
 800907a:	e7da      	b.n	8009032 <_fflush_r+0x22>
 800907c:	0800a17c 	.word	0x0800a17c
 8009080:	0800a19c 	.word	0x0800a19c
 8009084:	0800a15c 	.word	0x0800a15c

08009088 <std>:
 8009088:	2300      	movs	r3, #0
 800908a:	b510      	push	{r4, lr}
 800908c:	4604      	mov	r4, r0
 800908e:	e9c0 3300 	strd	r3, r3, [r0]
 8009092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009096:	6083      	str	r3, [r0, #8]
 8009098:	8181      	strh	r1, [r0, #12]
 800909a:	6643      	str	r3, [r0, #100]	; 0x64
 800909c:	81c2      	strh	r2, [r0, #14]
 800909e:	6183      	str	r3, [r0, #24]
 80090a0:	4619      	mov	r1, r3
 80090a2:	2208      	movs	r2, #8
 80090a4:	305c      	adds	r0, #92	; 0x5c
 80090a6:	f7fb fe0d 	bl	8004cc4 <memset>
 80090aa:	4b05      	ldr	r3, [pc, #20]	; (80090c0 <std+0x38>)
 80090ac:	6224      	str	r4, [r4, #32]
 80090ae:	6263      	str	r3, [r4, #36]	; 0x24
 80090b0:	4b04      	ldr	r3, [pc, #16]	; (80090c4 <std+0x3c>)
 80090b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80090b4:	4b04      	ldr	r3, [pc, #16]	; (80090c8 <std+0x40>)
 80090b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090b8:	4b04      	ldr	r3, [pc, #16]	; (80090cc <std+0x44>)
 80090ba:	6323      	str	r3, [r4, #48]	; 0x30
 80090bc:	bd10      	pop	{r4, pc}
 80090be:	bf00      	nop
 80090c0:	080093dd 	.word	0x080093dd
 80090c4:	080093ff 	.word	0x080093ff
 80090c8:	08009437 	.word	0x08009437
 80090cc:	0800945b 	.word	0x0800945b

080090d0 <_cleanup_r>:
 80090d0:	4901      	ldr	r1, [pc, #4]	; (80090d8 <_cleanup_r+0x8>)
 80090d2:	f000 b8af 	b.w	8009234 <_fwalk_reent>
 80090d6:	bf00      	nop
 80090d8:	08009011 	.word	0x08009011

080090dc <__sfmoreglue>:
 80090dc:	2268      	movs	r2, #104	; 0x68
 80090de:	b570      	push	{r4, r5, r6, lr}
 80090e0:	1e4d      	subs	r5, r1, #1
 80090e2:	4355      	muls	r5, r2
 80090e4:	460e      	mov	r6, r1
 80090e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090ea:	f7ff fa63 	bl	80085b4 <_malloc_r>
 80090ee:	4604      	mov	r4, r0
 80090f0:	b140      	cbz	r0, 8009104 <__sfmoreglue+0x28>
 80090f2:	2100      	movs	r1, #0
 80090f4:	e9c0 1600 	strd	r1, r6, [r0]
 80090f8:	300c      	adds	r0, #12
 80090fa:	60a0      	str	r0, [r4, #8]
 80090fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009100:	f7fb fde0 	bl	8004cc4 <memset>
 8009104:	4620      	mov	r0, r4
 8009106:	bd70      	pop	{r4, r5, r6, pc}

08009108 <__sfp_lock_acquire>:
 8009108:	4801      	ldr	r0, [pc, #4]	; (8009110 <__sfp_lock_acquire+0x8>)
 800910a:	f000 b8b3 	b.w	8009274 <__retarget_lock_acquire_recursive>
 800910e:	bf00      	nop
 8009110:	20000729 	.word	0x20000729

08009114 <__sfp_lock_release>:
 8009114:	4801      	ldr	r0, [pc, #4]	; (800911c <__sfp_lock_release+0x8>)
 8009116:	f000 b8ae 	b.w	8009276 <__retarget_lock_release_recursive>
 800911a:	bf00      	nop
 800911c:	20000729 	.word	0x20000729

08009120 <__sinit_lock_acquire>:
 8009120:	4801      	ldr	r0, [pc, #4]	; (8009128 <__sinit_lock_acquire+0x8>)
 8009122:	f000 b8a7 	b.w	8009274 <__retarget_lock_acquire_recursive>
 8009126:	bf00      	nop
 8009128:	2000072a 	.word	0x2000072a

0800912c <__sinit_lock_release>:
 800912c:	4801      	ldr	r0, [pc, #4]	; (8009134 <__sinit_lock_release+0x8>)
 800912e:	f000 b8a2 	b.w	8009276 <__retarget_lock_release_recursive>
 8009132:	bf00      	nop
 8009134:	2000072a 	.word	0x2000072a

08009138 <__sinit>:
 8009138:	b510      	push	{r4, lr}
 800913a:	4604      	mov	r4, r0
 800913c:	f7ff fff0 	bl	8009120 <__sinit_lock_acquire>
 8009140:	69a3      	ldr	r3, [r4, #24]
 8009142:	b11b      	cbz	r3, 800914c <__sinit+0x14>
 8009144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009148:	f7ff bff0 	b.w	800912c <__sinit_lock_release>
 800914c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009150:	6523      	str	r3, [r4, #80]	; 0x50
 8009152:	4b13      	ldr	r3, [pc, #76]	; (80091a0 <__sinit+0x68>)
 8009154:	4a13      	ldr	r2, [pc, #76]	; (80091a4 <__sinit+0x6c>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	62a2      	str	r2, [r4, #40]	; 0x28
 800915a:	42a3      	cmp	r3, r4
 800915c:	bf08      	it	eq
 800915e:	2301      	moveq	r3, #1
 8009160:	4620      	mov	r0, r4
 8009162:	bf08      	it	eq
 8009164:	61a3      	streq	r3, [r4, #24]
 8009166:	f000 f81f 	bl	80091a8 <__sfp>
 800916a:	6060      	str	r0, [r4, #4]
 800916c:	4620      	mov	r0, r4
 800916e:	f000 f81b 	bl	80091a8 <__sfp>
 8009172:	60a0      	str	r0, [r4, #8]
 8009174:	4620      	mov	r0, r4
 8009176:	f000 f817 	bl	80091a8 <__sfp>
 800917a:	2200      	movs	r2, #0
 800917c:	2104      	movs	r1, #4
 800917e:	60e0      	str	r0, [r4, #12]
 8009180:	6860      	ldr	r0, [r4, #4]
 8009182:	f7ff ff81 	bl	8009088 <std>
 8009186:	2201      	movs	r2, #1
 8009188:	2109      	movs	r1, #9
 800918a:	68a0      	ldr	r0, [r4, #8]
 800918c:	f7ff ff7c 	bl	8009088 <std>
 8009190:	2202      	movs	r2, #2
 8009192:	2112      	movs	r1, #18
 8009194:	68e0      	ldr	r0, [r4, #12]
 8009196:	f7ff ff77 	bl	8009088 <std>
 800919a:	2301      	movs	r3, #1
 800919c:	61a3      	str	r3, [r4, #24]
 800919e:	e7d1      	b.n	8009144 <__sinit+0xc>
 80091a0:	08009d18 	.word	0x08009d18
 80091a4:	080090d1 	.word	0x080090d1

080091a8 <__sfp>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	4607      	mov	r7, r0
 80091ac:	f7ff ffac 	bl	8009108 <__sfp_lock_acquire>
 80091b0:	4b1e      	ldr	r3, [pc, #120]	; (800922c <__sfp+0x84>)
 80091b2:	681e      	ldr	r6, [r3, #0]
 80091b4:	69b3      	ldr	r3, [r6, #24]
 80091b6:	b913      	cbnz	r3, 80091be <__sfp+0x16>
 80091b8:	4630      	mov	r0, r6
 80091ba:	f7ff ffbd 	bl	8009138 <__sinit>
 80091be:	3648      	adds	r6, #72	; 0x48
 80091c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091c4:	3b01      	subs	r3, #1
 80091c6:	d503      	bpl.n	80091d0 <__sfp+0x28>
 80091c8:	6833      	ldr	r3, [r6, #0]
 80091ca:	b30b      	cbz	r3, 8009210 <__sfp+0x68>
 80091cc:	6836      	ldr	r6, [r6, #0]
 80091ce:	e7f7      	b.n	80091c0 <__sfp+0x18>
 80091d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091d4:	b9d5      	cbnz	r5, 800920c <__sfp+0x64>
 80091d6:	4b16      	ldr	r3, [pc, #88]	; (8009230 <__sfp+0x88>)
 80091d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091dc:	60e3      	str	r3, [r4, #12]
 80091de:	6665      	str	r5, [r4, #100]	; 0x64
 80091e0:	f000 f847 	bl	8009272 <__retarget_lock_init_recursive>
 80091e4:	f7ff ff96 	bl	8009114 <__sfp_lock_release>
 80091e8:	2208      	movs	r2, #8
 80091ea:	4629      	mov	r1, r5
 80091ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091f4:	6025      	str	r5, [r4, #0]
 80091f6:	61a5      	str	r5, [r4, #24]
 80091f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091fc:	f7fb fd62 	bl	8004cc4 <memset>
 8009200:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009204:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009208:	4620      	mov	r0, r4
 800920a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800920c:	3468      	adds	r4, #104	; 0x68
 800920e:	e7d9      	b.n	80091c4 <__sfp+0x1c>
 8009210:	2104      	movs	r1, #4
 8009212:	4638      	mov	r0, r7
 8009214:	f7ff ff62 	bl	80090dc <__sfmoreglue>
 8009218:	4604      	mov	r4, r0
 800921a:	6030      	str	r0, [r6, #0]
 800921c:	2800      	cmp	r0, #0
 800921e:	d1d5      	bne.n	80091cc <__sfp+0x24>
 8009220:	f7ff ff78 	bl	8009114 <__sfp_lock_release>
 8009224:	230c      	movs	r3, #12
 8009226:	603b      	str	r3, [r7, #0]
 8009228:	e7ee      	b.n	8009208 <__sfp+0x60>
 800922a:	bf00      	nop
 800922c:	08009d18 	.word	0x08009d18
 8009230:	ffff0001 	.word	0xffff0001

08009234 <_fwalk_reent>:
 8009234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009238:	4606      	mov	r6, r0
 800923a:	4688      	mov	r8, r1
 800923c:	2700      	movs	r7, #0
 800923e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009242:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009246:	f1b9 0901 	subs.w	r9, r9, #1
 800924a:	d505      	bpl.n	8009258 <_fwalk_reent+0x24>
 800924c:	6824      	ldr	r4, [r4, #0]
 800924e:	2c00      	cmp	r4, #0
 8009250:	d1f7      	bne.n	8009242 <_fwalk_reent+0xe>
 8009252:	4638      	mov	r0, r7
 8009254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009258:	89ab      	ldrh	r3, [r5, #12]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d907      	bls.n	800926e <_fwalk_reent+0x3a>
 800925e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009262:	3301      	adds	r3, #1
 8009264:	d003      	beq.n	800926e <_fwalk_reent+0x3a>
 8009266:	4629      	mov	r1, r5
 8009268:	4630      	mov	r0, r6
 800926a:	47c0      	blx	r8
 800926c:	4307      	orrs	r7, r0
 800926e:	3568      	adds	r5, #104	; 0x68
 8009270:	e7e9      	b.n	8009246 <_fwalk_reent+0x12>

08009272 <__retarget_lock_init_recursive>:
 8009272:	4770      	bx	lr

08009274 <__retarget_lock_acquire_recursive>:
 8009274:	4770      	bx	lr

08009276 <__retarget_lock_release_recursive>:
 8009276:	4770      	bx	lr

08009278 <__swhatbuf_r>:
 8009278:	b570      	push	{r4, r5, r6, lr}
 800927a:	460e      	mov	r6, r1
 800927c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009280:	4614      	mov	r4, r2
 8009282:	2900      	cmp	r1, #0
 8009284:	461d      	mov	r5, r3
 8009286:	b096      	sub	sp, #88	; 0x58
 8009288:	da08      	bge.n	800929c <__swhatbuf_r+0x24>
 800928a:	2200      	movs	r2, #0
 800928c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009290:	602a      	str	r2, [r5, #0]
 8009292:	061a      	lsls	r2, r3, #24
 8009294:	d410      	bmi.n	80092b8 <__swhatbuf_r+0x40>
 8009296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800929a:	e00e      	b.n	80092ba <__swhatbuf_r+0x42>
 800929c:	466a      	mov	r2, sp
 800929e:	f000 f903 	bl	80094a8 <_fstat_r>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	dbf1      	blt.n	800928a <__swhatbuf_r+0x12>
 80092a6:	9a01      	ldr	r2, [sp, #4]
 80092a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092b0:	425a      	negs	r2, r3
 80092b2:	415a      	adcs	r2, r3
 80092b4:	602a      	str	r2, [r5, #0]
 80092b6:	e7ee      	b.n	8009296 <__swhatbuf_r+0x1e>
 80092b8:	2340      	movs	r3, #64	; 0x40
 80092ba:	2000      	movs	r0, #0
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	b016      	add	sp, #88	; 0x58
 80092c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080092c4 <__smakebuf_r>:
 80092c4:	898b      	ldrh	r3, [r1, #12]
 80092c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092c8:	079d      	lsls	r5, r3, #30
 80092ca:	4606      	mov	r6, r0
 80092cc:	460c      	mov	r4, r1
 80092ce:	d507      	bpl.n	80092e0 <__smakebuf_r+0x1c>
 80092d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	6123      	str	r3, [r4, #16]
 80092d8:	2301      	movs	r3, #1
 80092da:	6163      	str	r3, [r4, #20]
 80092dc:	b002      	add	sp, #8
 80092de:	bd70      	pop	{r4, r5, r6, pc}
 80092e0:	466a      	mov	r2, sp
 80092e2:	ab01      	add	r3, sp, #4
 80092e4:	f7ff ffc8 	bl	8009278 <__swhatbuf_r>
 80092e8:	9900      	ldr	r1, [sp, #0]
 80092ea:	4605      	mov	r5, r0
 80092ec:	4630      	mov	r0, r6
 80092ee:	f7ff f961 	bl	80085b4 <_malloc_r>
 80092f2:	b948      	cbnz	r0, 8009308 <__smakebuf_r+0x44>
 80092f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f8:	059a      	lsls	r2, r3, #22
 80092fa:	d4ef      	bmi.n	80092dc <__smakebuf_r+0x18>
 80092fc:	f023 0303 	bic.w	r3, r3, #3
 8009300:	f043 0302 	orr.w	r3, r3, #2
 8009304:	81a3      	strh	r3, [r4, #12]
 8009306:	e7e3      	b.n	80092d0 <__smakebuf_r+0xc>
 8009308:	4b0d      	ldr	r3, [pc, #52]	; (8009340 <__smakebuf_r+0x7c>)
 800930a:	62b3      	str	r3, [r6, #40]	; 0x28
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	6020      	str	r0, [r4, #0]
 8009310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009314:	81a3      	strh	r3, [r4, #12]
 8009316:	9b00      	ldr	r3, [sp, #0]
 8009318:	6120      	str	r0, [r4, #16]
 800931a:	6163      	str	r3, [r4, #20]
 800931c:	9b01      	ldr	r3, [sp, #4]
 800931e:	b15b      	cbz	r3, 8009338 <__smakebuf_r+0x74>
 8009320:	4630      	mov	r0, r6
 8009322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009326:	f000 f8d1 	bl	80094cc <_isatty_r>
 800932a:	b128      	cbz	r0, 8009338 <__smakebuf_r+0x74>
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	f023 0303 	bic.w	r3, r3, #3
 8009332:	f043 0301 	orr.w	r3, r3, #1
 8009336:	81a3      	strh	r3, [r4, #12]
 8009338:	89a0      	ldrh	r0, [r4, #12]
 800933a:	4305      	orrs	r5, r0
 800933c:	81a5      	strh	r5, [r4, #12]
 800933e:	e7cd      	b.n	80092dc <__smakebuf_r+0x18>
 8009340:	080090d1 	.word	0x080090d1

08009344 <_malloc_usable_size_r>:
 8009344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009348:	1f18      	subs	r0, r3, #4
 800934a:	2b00      	cmp	r3, #0
 800934c:	bfbc      	itt	lt
 800934e:	580b      	ldrlt	r3, [r1, r0]
 8009350:	18c0      	addlt	r0, r0, r3
 8009352:	4770      	bx	lr

08009354 <_raise_r>:
 8009354:	291f      	cmp	r1, #31
 8009356:	b538      	push	{r3, r4, r5, lr}
 8009358:	4604      	mov	r4, r0
 800935a:	460d      	mov	r5, r1
 800935c:	d904      	bls.n	8009368 <_raise_r+0x14>
 800935e:	2316      	movs	r3, #22
 8009360:	6003      	str	r3, [r0, #0]
 8009362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009366:	bd38      	pop	{r3, r4, r5, pc}
 8009368:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800936a:	b112      	cbz	r2, 8009372 <_raise_r+0x1e>
 800936c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009370:	b94b      	cbnz	r3, 8009386 <_raise_r+0x32>
 8009372:	4620      	mov	r0, r4
 8009374:	f000 f830 	bl	80093d8 <_getpid_r>
 8009378:	462a      	mov	r2, r5
 800937a:	4601      	mov	r1, r0
 800937c:	4620      	mov	r0, r4
 800937e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009382:	f000 b817 	b.w	80093b4 <_kill_r>
 8009386:	2b01      	cmp	r3, #1
 8009388:	d00a      	beq.n	80093a0 <_raise_r+0x4c>
 800938a:	1c59      	adds	r1, r3, #1
 800938c:	d103      	bne.n	8009396 <_raise_r+0x42>
 800938e:	2316      	movs	r3, #22
 8009390:	6003      	str	r3, [r0, #0]
 8009392:	2001      	movs	r0, #1
 8009394:	e7e7      	b.n	8009366 <_raise_r+0x12>
 8009396:	2400      	movs	r4, #0
 8009398:	4628      	mov	r0, r5
 800939a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800939e:	4798      	blx	r3
 80093a0:	2000      	movs	r0, #0
 80093a2:	e7e0      	b.n	8009366 <_raise_r+0x12>

080093a4 <raise>:
 80093a4:	4b02      	ldr	r3, [pc, #8]	; (80093b0 <raise+0xc>)
 80093a6:	4601      	mov	r1, r0
 80093a8:	6818      	ldr	r0, [r3, #0]
 80093aa:	f7ff bfd3 	b.w	8009354 <_raise_r>
 80093ae:	bf00      	nop
 80093b0:	20000014 	.word	0x20000014

080093b4 <_kill_r>:
 80093b4:	b538      	push	{r3, r4, r5, lr}
 80093b6:	2300      	movs	r3, #0
 80093b8:	4d06      	ldr	r5, [pc, #24]	; (80093d4 <_kill_r+0x20>)
 80093ba:	4604      	mov	r4, r0
 80093bc:	4608      	mov	r0, r1
 80093be:	4611      	mov	r1, r2
 80093c0:	602b      	str	r3, [r5, #0]
 80093c2:	f7f8 ff50 	bl	8002266 <_kill>
 80093c6:	1c43      	adds	r3, r0, #1
 80093c8:	d102      	bne.n	80093d0 <_kill_r+0x1c>
 80093ca:	682b      	ldr	r3, [r5, #0]
 80093cc:	b103      	cbz	r3, 80093d0 <_kill_r+0x1c>
 80093ce:	6023      	str	r3, [r4, #0]
 80093d0:	bd38      	pop	{r3, r4, r5, pc}
 80093d2:	bf00      	nop
 80093d4:	20000724 	.word	0x20000724

080093d8 <_getpid_r>:
 80093d8:	f7f8 bf3e 	b.w	8002258 <_getpid>

080093dc <__sread>:
 80093dc:	b510      	push	{r4, lr}
 80093de:	460c      	mov	r4, r1
 80093e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e4:	f000 f894 	bl	8009510 <_read_r>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	bfab      	itete	ge
 80093ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80093ee:	89a3      	ldrhlt	r3, [r4, #12]
 80093f0:	181b      	addge	r3, r3, r0
 80093f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80093f6:	bfac      	ite	ge
 80093f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80093fa:	81a3      	strhlt	r3, [r4, #12]
 80093fc:	bd10      	pop	{r4, pc}

080093fe <__swrite>:
 80093fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009402:	461f      	mov	r7, r3
 8009404:	898b      	ldrh	r3, [r1, #12]
 8009406:	4605      	mov	r5, r0
 8009408:	05db      	lsls	r3, r3, #23
 800940a:	460c      	mov	r4, r1
 800940c:	4616      	mov	r6, r2
 800940e:	d505      	bpl.n	800941c <__swrite+0x1e>
 8009410:	2302      	movs	r3, #2
 8009412:	2200      	movs	r2, #0
 8009414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009418:	f000 f868 	bl	80094ec <_lseek_r>
 800941c:	89a3      	ldrh	r3, [r4, #12]
 800941e:	4632      	mov	r2, r6
 8009420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009424:	81a3      	strh	r3, [r4, #12]
 8009426:	4628      	mov	r0, r5
 8009428:	463b      	mov	r3, r7
 800942a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800942e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009432:	f000 b817 	b.w	8009464 <_write_r>

08009436 <__sseek>:
 8009436:	b510      	push	{r4, lr}
 8009438:	460c      	mov	r4, r1
 800943a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800943e:	f000 f855 	bl	80094ec <_lseek_r>
 8009442:	1c43      	adds	r3, r0, #1
 8009444:	89a3      	ldrh	r3, [r4, #12]
 8009446:	bf15      	itete	ne
 8009448:	6560      	strne	r0, [r4, #84]	; 0x54
 800944a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800944e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009452:	81a3      	strheq	r3, [r4, #12]
 8009454:	bf18      	it	ne
 8009456:	81a3      	strhne	r3, [r4, #12]
 8009458:	bd10      	pop	{r4, pc}

0800945a <__sclose>:
 800945a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800945e:	f000 b813 	b.w	8009488 <_close_r>
	...

08009464 <_write_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4604      	mov	r4, r0
 8009468:	4608      	mov	r0, r1
 800946a:	4611      	mov	r1, r2
 800946c:	2200      	movs	r2, #0
 800946e:	4d05      	ldr	r5, [pc, #20]	; (8009484 <_write_r+0x20>)
 8009470:	602a      	str	r2, [r5, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	f7f8 ff2e 	bl	80022d4 <_write>
 8009478:	1c43      	adds	r3, r0, #1
 800947a:	d102      	bne.n	8009482 <_write_r+0x1e>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	b103      	cbz	r3, 8009482 <_write_r+0x1e>
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	bd38      	pop	{r3, r4, r5, pc}
 8009484:	20000724 	.word	0x20000724

08009488 <_close_r>:
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	2300      	movs	r3, #0
 800948c:	4d05      	ldr	r5, [pc, #20]	; (80094a4 <_close_r+0x1c>)
 800948e:	4604      	mov	r4, r0
 8009490:	4608      	mov	r0, r1
 8009492:	602b      	str	r3, [r5, #0]
 8009494:	f7f8 ff3a 	bl	800230c <_close>
 8009498:	1c43      	adds	r3, r0, #1
 800949a:	d102      	bne.n	80094a2 <_close_r+0x1a>
 800949c:	682b      	ldr	r3, [r5, #0]
 800949e:	b103      	cbz	r3, 80094a2 <_close_r+0x1a>
 80094a0:	6023      	str	r3, [r4, #0]
 80094a2:	bd38      	pop	{r3, r4, r5, pc}
 80094a4:	20000724 	.word	0x20000724

080094a8 <_fstat_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	2300      	movs	r3, #0
 80094ac:	4d06      	ldr	r5, [pc, #24]	; (80094c8 <_fstat_r+0x20>)
 80094ae:	4604      	mov	r4, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	4611      	mov	r1, r2
 80094b4:	602b      	str	r3, [r5, #0]
 80094b6:	f7f8 ff34 	bl	8002322 <_fstat>
 80094ba:	1c43      	adds	r3, r0, #1
 80094bc:	d102      	bne.n	80094c4 <_fstat_r+0x1c>
 80094be:	682b      	ldr	r3, [r5, #0]
 80094c0:	b103      	cbz	r3, 80094c4 <_fstat_r+0x1c>
 80094c2:	6023      	str	r3, [r4, #0]
 80094c4:	bd38      	pop	{r3, r4, r5, pc}
 80094c6:	bf00      	nop
 80094c8:	20000724 	.word	0x20000724

080094cc <_isatty_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	2300      	movs	r3, #0
 80094d0:	4d05      	ldr	r5, [pc, #20]	; (80094e8 <_isatty_r+0x1c>)
 80094d2:	4604      	mov	r4, r0
 80094d4:	4608      	mov	r0, r1
 80094d6:	602b      	str	r3, [r5, #0]
 80094d8:	f7f8 ff32 	bl	8002340 <_isatty>
 80094dc:	1c43      	adds	r3, r0, #1
 80094de:	d102      	bne.n	80094e6 <_isatty_r+0x1a>
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	b103      	cbz	r3, 80094e6 <_isatty_r+0x1a>
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	bd38      	pop	{r3, r4, r5, pc}
 80094e8:	20000724 	.word	0x20000724

080094ec <_lseek_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4604      	mov	r4, r0
 80094f0:	4608      	mov	r0, r1
 80094f2:	4611      	mov	r1, r2
 80094f4:	2200      	movs	r2, #0
 80094f6:	4d05      	ldr	r5, [pc, #20]	; (800950c <_lseek_r+0x20>)
 80094f8:	602a      	str	r2, [r5, #0]
 80094fa:	461a      	mov	r2, r3
 80094fc:	f7f8 ff2a 	bl	8002354 <_lseek>
 8009500:	1c43      	adds	r3, r0, #1
 8009502:	d102      	bne.n	800950a <_lseek_r+0x1e>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	b103      	cbz	r3, 800950a <_lseek_r+0x1e>
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	20000724 	.word	0x20000724

08009510 <_read_r>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	4604      	mov	r4, r0
 8009514:	4608      	mov	r0, r1
 8009516:	4611      	mov	r1, r2
 8009518:	2200      	movs	r2, #0
 800951a:	4d05      	ldr	r5, [pc, #20]	; (8009530 <_read_r+0x20>)
 800951c:	602a      	str	r2, [r5, #0]
 800951e:	461a      	mov	r2, r3
 8009520:	f7f8 febb 	bl	800229a <_read>
 8009524:	1c43      	adds	r3, r0, #1
 8009526:	d102      	bne.n	800952e <_read_r+0x1e>
 8009528:	682b      	ldr	r3, [r5, #0]
 800952a:	b103      	cbz	r3, 800952e <_read_r+0x1e>
 800952c:	6023      	str	r3, [r4, #0]
 800952e:	bd38      	pop	{r3, r4, r5, pc}
 8009530:	20000724 	.word	0x20000724

08009534 <_init>:
 8009534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009536:	bf00      	nop
 8009538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800953a:	bc08      	pop	{r3}
 800953c:	469e      	mov	lr, r3
 800953e:	4770      	bx	lr

08009540 <_fini>:
 8009540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009542:	bf00      	nop
 8009544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009546:	bc08      	pop	{r3}
 8009548:	469e      	mov	lr, r3
 800954a:	4770      	bx	lr
